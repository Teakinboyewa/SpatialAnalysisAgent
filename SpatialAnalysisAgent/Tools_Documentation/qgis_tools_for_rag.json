[
    {
        "tool_id": "3d:tessellate",
        "toolname": "tessellate",
        "tool_description": "Tessellates a polygon geometry layer, dividing the geometries into triangular components.\nThe output layer consists of multipolygon geometries for each input feature, with each multipolygon consisting of multiple triangle component polygons.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input polygon vector layer. Type: [vector: polygon]\nOUTPUT: Tesselated. Specify the output layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Tesselated. Output multipolygonZ layer. Type: [vector: polygon]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef tessellate_polygons():\n    input_path = 'D:/Data/InputPolygonLayer.shp'\n    output_path = 'C:/output_path/tesselated_output.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Polygon Layer', 'ogr')\n\n    result = processing.run('3d:tessellate', {\n        'INPUT': input_path,\n        'OUTPUT': output_path  # One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026\n    })\n\n    tesselated_layer = QgsVectorLayer(result['OUTPUT'], 'Tessellated', 'ogr')\n    QgsProject.instance().addMapLayer(tesselated_layer)\n\ntessellate_polygons()\nimport processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef tessellate_polygons():\n    input_path = 'D:/Data/PolygonData.shp'\n    output_path = 'C:/output_path/tesselated_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Polygon Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'OUTPUT': output_path  # Options: [Create Temporary Layer ( TEMPORARY_OUTPUT ), Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026]      \n    }\n\n    result = processing.run('3d:tessellate', parameters)\n    \n    tesselated_layer = QgsVectorLayer(result['OUTPUT'], 'Tesselated Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(tesselated_layer)\n\n# Execute the function\ntessellate_polygons()"
    },
    {
        "tool_id": "gdal:aspect",
        "toolname": "aspect",
        "tool_description": "Generates an aspect map from any GDAL-supported elevation raster. Aspect is the compass direction that a slope faces. The pixels will have a value from 0-360\u00b0 measured in degrees from north indicating the azimuth. On the northern hemisphere, the north side of slopes is often shaded (small azimuth from 0\u00b0-90\u00b0), while the southern side receives more solar radiation (higher azimuth from 180\u00b0-270\u00b0).\nThis algorithm is derived from the GDAL DEM utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input elevation raster layer. Type: [raster]\nBAND: Band number. The number of the band to use as elevation. Type: [raster band] Default: 1 \nTRIG_ANGLE: Return trigonometric angle instead of azimuth. Activating the trigonometric angle results in differentcategories: 0\u00b0 (East), 90\u00b0 (North), 180\u00b0 (West), 270\u00b0 (South).. Type: [boolean] Default: False \nZERO_FLAT: Return 0 for flat instead of -9999. Activating this option will insert a 0-value for the value-9999 on flat areas.. Type: [boolean] Default: False \nCOMPUTE_EDGES: Compute edges. Generates edges from the elevation raster. Type: [boolean] Default: False \nZEVENBERGEN: Use Zevenbergen&Thorne formula instead of the Horn\u2019s one. Activates Zevenbergen&Thorne formula for smooth landscapes. Type: [boolean] Default: False \nOUTPUT: Aspect. Output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Aspect. Output raster with angle values in degrees. Type: [raster]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef compute_aspect():\n    # Define input and output paths\n    input_path = 'D:/Data/InputElevationRaster.tif'\n    output_path = 'C:/output_path/aspect_output.tif'\n\n    # Load the raster as a raster layer\n    input_layer = QgsRasterLayer(input_path, 'Elevation Raster')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_path,\n        'BAND': 1,  # Default band number\n        'TRIG_ANGLE': False,  # Default: False\n        'ZERO_FLAT': False,  # Default: False\n        'COMPUTE_EDGES': False,  # Default: False\n        'ZEVENBERGEN': False,  # Default: False\n        'OUTPUT': output_path,\n        'OPTIONS': '',  # Default: '''        'EXTRA': ''  # Default: None\n    }\n\n    # Run the Aspect algorithm\n    result = processing.run('gdal:aspect', parameters)\n\n    # Load the output layer into QGIS\n    aspect_layer = QgsRasterLayer(result['OUTPUT'], 'Aspect')\n    QgsProject.instance().addMapLayer(aspect_layer)\n\n# Execute the function\ncompute_aspect()"
    },
    {
        "tool_id": "gdal:assignprojection",
        "toolname": "assignprojection",
        "tool_description": "Applies a coordinate system to a raster dataset.\nThis algorithm is derived from the GDAL edit utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT_LAYER: Input layer. Input raster layer. Type: [raster]\nCRS: Desired \nCRS. The projection \n(CRS) of the output layer. Type: [crs] outputs = \nOUTPUT: Layer with projection. The output raster layer (with the new projection information). Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef assign_projection():\n    input_raster_path = \"\"\"D:/input_raster.tif\"\n    output_path = \"D:/workspace_directory/assigned_projection_output.tif\"\n                        \n    input_layer = QgsRasterLayer(input_raster_path, \"Input Raster\", \"gdal\")\n    \n                                  \n    parameters = {\n        'INPUT_LAYER': input_raster_path,\n        'CRS': 'EPSG:4326',                                           \n        'OUTPUT': output_path\n    }\n    \n                                         \n    result = processing.run(\"gdal:assignprojection\", parameters)\n    \n                           \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Assigned_Projection_Output', 'gdal')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nassign_projection()"
    },
    {
        "tool_id": "gdal:buffervectors",
        "toolname": "buffervectors",
        "tool_description": "Create buffers around the features of a vector layer.",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nGEOMETRY: Geometry column name. The name of the input layer geometry column to use. Type: [string] Default: \u2018geometry\u2019 \nDISTANCE: Buffer distance. Minimum: 0.0. Type: [number] Default: 10.0 \nFIELD: Dissolve by attribute Optional. Field to use for dissolving. Type: [tablefield: any] Default: None \nDISSOLVE: Dissolve results. If set, the result is dissolved. If no field is set for dissolving, all the buffers aredissolved into one feature.. Type: [boolean] Default: False \nEXPLODE_COLLECTIONS: Produce one feature for each geometry in any kind ofgeometry collection in the source file. . Type: [boolean] Default: False \nOUTPUT: Buffer. Specify the output buffer layer. One of: Save to a Temporary File Save to File\u2026. Type: [vector: polygon] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: Buffer. The output buffer layer. Type: [vector: polygon]\n",
        "code_example": "# Import necessary modules\nimport processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef buffer_vectors(output_path):\n    # Define the input layer path\n    input_layer_path = 'path/to/your/input_layer.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n                           \n    parameters = {\n        'INPUT': input_layer_path,\n        'GEOMETRY': 'geometry',\n        'DISTANCE': 10.0,\n        'FIELD': '',            \n        'DISSOLVE': False,\n        'EXPLODE_COLLECTIONS': False,\n        'OUTPUT': output_path,                                \n        'OPTIONS': ''            \n    }\n    \n                                \n    result = processing.run(\"gdal:buffervectors\", parameters)\n    \n                                       \n    buffered_layer = QgsVectorLayer(result['OUTPUT'], 'Buffered Layer', 'ogr')\n    QgsProject.instance().addMapLayer(buffered_layer)\n\n                              \noutput_layer_path = \"path/to/your/output_buffer_layer.shp\"\n\n                      \nbuffer_vectors(output_layer_path)"
    },
    {
        "tool_id": "gdal:buildvirtualraster",
        "toolname": "buildvirtualraster",
        "tool_description": "Builds a VRT (Virtual Dataset) that is a mosaic of the list of input GDAL-supported rasters. With a mosaic you can merge several raster files.\nThis algorithm is derived from the GDAL buildvrt utility .\nDefault menu: Raster \u25ba Miscellaneous",
        "parameters": "INPUT: Input layers. GDAL-supported raster layers.. Type: [raster] [list]\nRESOLUTION: Resolution. The output resolution of the mosaic.By default the average resolution of the raster fileswill be chosen. Options: 0 \u2014 Average ( average ) 1 \u2014 Highest ( highest ) 2 \u2014 Lowest ( lowest ). Type: [enumeration] Default: 0 \nSEPARATE: Place each input file into a separate band. With \u2018True\u2019 you can define that each raster file goes intoa separated stacked band in the \nVRT band.. Type: [boolean] Default: False \nPROJ_DIFFERENCE: Allow projection difference. Allows that the output bands have different projectionsderived from the projection of the input raster layers.. Type: [boolean] Default: False \nOUTPUT: Virtual. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nADD_ALPHA: Add alpha mask band to \nVRT when source raster has none. Adds an alpha mask band to the \nVRT when the source rasterhas none.. Type: [boolean] Default: False \nASSIGN_CRS: Override projection for the output file Optional. Overrides the projection for the output file.No reprojection is done.. Type: [crs] Default: None \nRESAMPLING: Resampling algorithm. The resampling algorithm to use.Options: 0 \u2014 Nearest Neighbour ( nearest ) 1 \u2014 Bilinear (2x2 kernel) ( bilinear ) 2 \u2014 Cubic (4x4 kernel) ( cubic ) 3 \u2014 Cubic B-Spline (4x4 kernel) ( cubicspline ) 4 \u2014 Lanczos (6x6 kernel) ( lanczos ) 5 \u2014 Average ( average ) 6 \u2014 Mode ( mode ). Type: [enumeration] Default: 0 \nSRC_NODATA: NoData value(s) for input bands (space separated) Optional. Space separated NoData value(s) for input band(s). Type: [string] Default: None \nEXTRA: Additional command-line parameters. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Virtual. Output raster layer. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef build_virtual_raster():\n    # Define the input and output paths\n    input_layers = ['D:/input_raster1.tif', 'D:/input_raster2.tif']  # Example input layers\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"virtual_raster.vrt\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n    \n                                   \n    parameters = {\n        'INPUT': input_layers,                                \n        'RESOLUTION': 0,                                                 \n        'SEPARATE': False,\n        'PROJ_DIFFERENCE': False,\n        'OUTPUT': output_path,\n        'ADD_ALPHA': False,\n        'ASSIGN_CRS': '',        \n        'RESAMPLING': 0,                                                                                                         \n        'SRC_NODATA': '',        \n        'EXTRA': ''        \n    }\n    \n                                            \n    result = processing.run(\"gdal:buildvirtualraster\", parameters)\n    \n                                       \n    virtual_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Virtual_Raster')\n    QgsProject.instance().addMapLayer(virtual_raster_layer)\n\n                      \nbuild_virtual_raster()"
    },
    {
        "tool_id": "gdal:buildvirtualvector",
        "toolname": "buildvirtualvector",
        "tool_description": "Creates a virtual vector layer that contains a set of vector layers. The output virtual vector layer will not be opened in the current project.\nThis algorithm is especially useful in case another algorithm needs multiple layers but accept only one vrt in which the layers are specified.",
        "parameters": "INPUT: Input datasources. Select the vector layers you want to use to buildthe virtual vector. Type: [vector: any] [list]\nUNIONED: Create \u201cunioned\u201d \nVRT. Check if you want to unite all the vectors in asingle vrt file. Type: [boolean] Default: False \nOUTPUT: Virtual vector. Specify the output layer containing only the duplicates.One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] outputs = \nOUTPUT: Virtual vector. The output virtual vector made from the chosen sources. Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef build_virtual_vector():\n    input_paths = ['path/to/layer1.shp', 'path/to/layer2.shp']  # Add your vector layer paths\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"virtual_vector.vrt\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n    \n    parameters = {\n        'INPUT': input_paths,\n        'UNIONED': False,                 \n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"gdal:buildvirtualvector\", parameters)\n    virtual_vector_layer = QgsVectorLayer(result['OUTPUT'], 'Virtual_Vector', 'ogr')\n    QgsProject.instance().addMapLayer(virtual_vector_layer)\n\nbuild_virtual_vector()"
    },
    {
        "tool_id": "gdal:cliprasterbyextent",
        "toolname": "cliprasterbyextent",
        "tool_description": "Clips any GDAL-supported raster file to a given extent.\nThis algorithm is derived from the GDAL translate utility .\nDefault menu: Raster \u25ba Extraction",
        "parameters": "INPUT: Input layer. The input raster. Type: [raster]\nEXTENT: Clipping extent. Extent that should be used for the output raster.Only pixels within the specified bounding box will beincluded in the output. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nOVERCRS: Override the projection for the output file. If checked, the output file is assigned the input layer \nCRS.. Type: [boolean] Default: False \nNODATA: Assign a specified NoData value to output bands Optional. Defines a value that should be inserted for the NoDatavalues in the output raster. Type: [number] Default: None \nOUTPUT: Clipped (extent). Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file. Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Clipped (extent). Output raster layer clipped by the given extent. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef clip_raster_by_extent():\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_clipped_raster.tif'\n    \n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'EXTENT': '0,10,0,10',                                                  \n        'OVERCRS': False,                                      \n        'NODATA': None,\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                \n        'EXTRA': None\n    }\n    \n    result = processing.run(\"gdal:cliprasterbyextent\", parameters)\n    \n    clipped_layer = QgsRasterLayer(result['OUTPUT'], 'Clipped Raster')\n    QgsProject.instance().addMapLayer(clipped_layer)\n    \n                      \nclip_raster_by_extent()"
    },
    {
        "tool_id": "gdal:cliprasterbymasklayer",
        "toolname": "cliprasterbymasklayer",
        "tool_description": "Clips any GDAL-supported raster by a vector mask layer.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Extraction",
        "parameters": "INPUT: Input layer. The input raster. Type: [raster]\nMASK: Mask layer. Vector mask for clipping the raster. Type: [vector: polygon] \nSOURCE_CRS: Source \nCRS. Set the coordinate reference to use for the input raster. Type: [crs] \nTARGET_CRS: Target \nCRS. Set the coordinate reference to use for the mask layer. Type: [crs] \nTARGET_EXTENT: Target extent Optional. Extent of the output file to be created Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nNODATA: Assign a specified NoData value to output bands Optional. Defines a value that should be inserted for the NoDatavalues in the output raster. Type: [number] Default: None \nALPHA_BAND: Create an output alpha band. Creates an alpha band for the result.The alpha band then includes the transparency values of the pixels.. Type: [boolean] Default: False \nCROP_TO_CUTLINE: Match the extent of the clipped raster to the extent of the mask layer. Applies the vector layer extent to the output raster if checked.. Type: [boolean] Default: True \nKEEP_RESOLUTION: Keep resolution of input raster. The resolution of the output raster will not be changed. Type: [boolean] Default: False \nSET_RESOLUTION: Set output file resolution. Shall the output resolution (cell size) be specified. Type: [boolean] Default: False \nX_RESOLUTION: \nX Resolution to output bands Optional. The width of the cells in the output raster. Type: [number] Default: None \nY_RESOLUTION: \nY Resolution to output band Optional. The height of the cells in the output raster. Type: [number] Default: None \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of imageand perform input/output operation simultaneously.Note that computation is not multithreaded itself.. Type: [boolean] Default: False \nOUTPUT: Clipped (mask). Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file. Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Clipped (mask). Output raster layer clipped by the vector layer. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject, QgsVectorLayer\n\ndef clip_raster_by_mask_layer():\n    input_raster_path = 'D:/Data/InputRaster.tif'  # Path to the input raster\n    mask_layer_path = 'D:/Data/MaskLayer.shp'  # Path to the mask layer\n    output_path = 'D:/workspace_directory/output_raster.tif'  # Path for the output file\n\n    # Load the input layers\n    input_layer = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n    mask_layer = QgsVectorLayer(mask_layer_path, \"Mask Layer\", \"ogr\")\n\n                                  \n    parameters = {\n        'INPUT': input_raster_path,\n        'MASK': mask_layer_path,\n        'SOURCE_CRS': 'EPSG:4326',                 \n        'TARGET_CRS': 'EPSG:4326',                 \n        'TARGET_EXTENT': '',\n        'NODATA': None,\n        'ALPHA_BAND': False,\n        'CROP_TO_CUTLINE': True,\n        'KEEP_RESOLUTION': False,\n        'SET_RESOLUTION': False,\n        'X_RESOLUTION': None,\n        'Y_RESOLUTION': None,\n        'MULTITHREADING': False,\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                     \n        'EXTRA': '''    }\n\n                        \n    result = processing.run(\"gdal:cliprasterbymasklayer\", parameters)\n\n                               \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Clipped Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nclip_raster_by_mask_layer()"
    },
    {
        "tool_id": "gdal:clipvectorbyextent",
        "toolname": "clipvectorbyextent",
        "tool_description": "Clips any OGR-supported vector file to a given extent.\nThis algorithm is derived from the GDAL ogr2ogr utility .",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nEXTENT: Clip extent. Defines the bounding box that should be used for theoutput vector file.It has to be defined in target \nCRS coordinates. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nOUTPUT: Clipped (extent). Specify the output (clipped) layer. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: Clipped (extent). The output (clipped) layer.The default format is \n\u201cESRI Shapefile\u201d.. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef clip_vector_by_extent():\n    input_path = 'D:/input_layer.shp'\n    output_path = 'C:/Users/Output/clipped_output.shp'\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n                                    \n    parameters = {\n        'INPUT': input_path,\n        'EXTENT': 'xmin,xmax,ymin,ymax',                                            \n        'OUTPUT': output_path,\n        'OPTIONS': ''                                    \n    }\n                                \n    result = processing.run(\"gdal:clipvectorbyextent\", parameters)\n    \n                                      \n    clipped_layer = QgsVectorLayer(result['OUTPUT'], 'Clipped_output', 'ogr')\n    QgsProject.instance().addMapLayer(clipped_layer)\n\n                      \nclip_vector_by_extent()"
    },
    {
        "tool_id": "gdal:clipvectorbypolygon",
        "toolname": "clipvectorbypolygon",
        "tool_description": "Clips any OGR-supported vector layer by a mask polygon layer.\nThis algorithm is derived from the GDAL ogr2ogr utility .",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nMASK: Mask layer. Layer to be used as clipping extent for the input vector layer.. Type: [vector: polygon] \nOUTPUT: Clipped (mask). The output (masked) layer. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: Clipped (mask). The output (masked) layer.The default format is \n\u201cESRI Shapefile\u201d.. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsProject, QgsVectorLayer\nimport processing\n\ndef clip_vector_by_polygon():\n    # Define the input, mask, and output paths\n    input_layer_path = 'D:/input_layer.shp'\n    mask_layer_path = 'D:/mask_layer.shp'\n    output_path = 'D:/output_clipped.shp'\n    \n    # Load the input and mask layers\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    mask_layer = QgsVectorLayer(mask_layer_path, \"Mask Layer\", \"ogr\")\n    \n                             \n    clip_params = {\n        'INPUT': input_layer_path, \n        'MASK': mask_layer_path,\n        'OPTIONS': '',                                            \n        'OUTPUT': output_path                                        \n    }\n    \n                                \n    result = processing.run(\"gdal:clipvectorbypolygon\", clip_params)\n    \n                           \n    clipped_layer = QgsVectorLayer(output_path, 'Clipped Output', 'ogr')\n    QgsProject.instance().addMapLayer(clipped_layer)\n\n                      \nclip_vector_by_polygon()"
    },
    {
        "tool_id": "gdal:colorrelief",
        "toolname": "colorrelief",
        "tool_description": "Generates a color relief map from any GDAL-supported elevation raster. Color reliefs can particularly be used to depict elevations. The Algorithm outputs a 4-band raster with values computed from the elevation and a text-based color configuration file. By default, the colors between the given elevation values are blended smoothly and the result is a nice colorized elevation raster.\nThis algorithm is derived from the GDAL DEM utility .",
        "parameters": "INPUT: Input layer. Input elevation raster layer. Type: [raster]\nBAND: Band number. The number of the band to use as elevation. Type: [raster band] Default: 1 \nCOMPUTE_EDGES: Compute edges. Generates edges from the elevation raster. Type: [boolean] Default: False \nCOLOR_TABLE: Color configuration file. \nA text-based color configuration file. Type: [file] \nMATCH_MODE: Matching mode. One of: 0 \u2014 Use strict color matching 1 \u2014 Use closest \nRGBA quadruples 2 \u2014 Use smoothly blended colours. Type: [enumeration] Default: 2 \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nOUTPUT: Color relief. Output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] outputs = \nOUTPUT: Color relief. \nA 4-band output raster. Type: [raster]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef generate_color_relief():\n    # Define input and output paths\n    input_path = 'D:/Data/ElevationData.tif'\n    color_table_path = 'D:/Data/ColorConfiguration.txt'\n    output_path = 'C:/output_path/ColorRelief.tif'\n\n    # Load the raster layer\n    input_layer = QgsRasterLayer(input_path, 'Elevation Data')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_path,\n        'BAND': 1,\n        'COMPUTE_EDGES': False,\n        'COLOR_TABLE': color_table_path,\n        'MATCH_MODE': 2,  # 0 \u2014 Use strict color matching, 1 \u2014 Use closest RGBA quadruples, 2 \u2014 Use smoothly blended colours\n        'OPTIONS': '',\n        'EXTRA': None,\n        'OUTPUT': output_path\n    }\n\n    # Run the Color Relief algorithm\n    result = processing.run('gdal:colorrelief', parameters)\n\n    # Load the output raster layer to QGIS\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Color Relief')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\ngenerate_color_relief()"
    },
    {
        "tool_id": "gdal:contour",
        "toolname": "contour",
        "tool_description": "Extracts contour lines from any GDAL-supported elevation raster.\nThis algorithm is derived from the GDAL contour utility .\nDefault menu: Raster \u25ba Extraction",
        "parameters": "INPUT: Input layer. Input raster. Type: [raster]\nBAND: Band number. Raster band to create the contours from. Type: [raster band] Default: 1 \nINTERVAL: Interval between contour lines. Defines the interval between the contour lines in the givenunits of the elevation raster (minimum value 0). Type: [number] Default: 10.0 \nFIELD_NAME: Attribute name (if not set, no elevation attribute is attached) Optional. Provides a name for the attribute in which to put the elevation.. Type: [string] Default: \n\u2018ELEV\u2019 \nOFFSET: Offset from zero relative to which to interpret intervals Optional. . Type: [number] Default: 0.0 \nOUTPUT: Contours. Specification of the output vector layer.One of: Save to a Temporary File Save to File\u2026. Type: [vector: line] Default: [Save to temporary file] \nCREATE_3D: Produce \n3D vector. Forces production of \n3D vectors instead of 2D.Includes elevation at every vertex.. Type: [boolean] Default: False \nIGNORE_NODATA: Treat all raster values as valid. Ignores any NoData values in the dataset.. Type: [boolean] Default: False \nNODATA: Input pixel value to treat as \u201cNoData\u201d Optional. Defines a value that should be inserted for the NoDatavalues in the output raster. Type: [number] Default: None \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.Refer to the corresponding GDAL utility documentation.. Type: [string] Default: None outputs = \nOUTPUT: Contours. Output vector layer with contour lines. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef generate_contours():\n    input_path = 'D:/input_raster.tif'\n    output_path = 'C:/Users/Output/contours.shp'\n    raster_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'BAND': 1,\n        'INTERVAL': 10.0,\n        'FIELD_NAME': '',                   \n        'OFFSET': '',                \n        'OUTPUT': output_path,                                                      \n        'CREATE_3D': '',                  \n        'IGNORE_NODATA': '',                  \n        'NODATA': '',\n        'EXTRA': '''    }\n    \n    result = processing.run(\"gdal:contour\", parameters)\n    contour_layer = QgsRasterLayer(result['OUTPUT'], \"Contours\")\n    QgsProject.instance().addMapLayer(contour_layer)\n\ngenerate_contours()"
    },
    {
        "tool_id": "gdal:contour_polygon",
        "toolname": "contour_polygon",
        "tool_description": "Extracts contour polygons from any GDAL-supported elevation raster.\nThis algorithm is derived from the GDAL contour utility .",
        "parameters": "INPUT: Input layer. Input raster. Type: [raster]\nBAND: Band number. Raster band to create the contours from. Type: [raster band] Default: 1 \nINTERVAL: Interval between contour lines. Defines the interval between the contour lines in the givenunits of the elevation raster (minimum value 0). Type: [number] Default: 10.0 \nOFFSET: Offset from zero relative to which to interpret intervals Optional. . Type: [number] Default: 0.0 \nFIELD_NAME_MIN: Attribute name for minimum elevation of contour polygon Optional. Provides a name for the attribute in which to put the minimum elevationof contour polygon. If not provided no minimum elevation attributeis attached.. Type: [string] Default: \n\u2018ELEV_MIN\u2019 \nFIELD_NAME_MAX: Attribute name for maximum elevation of contour polygon Optional. Provides a name for the attribute in which to put the maximum elevationof contour polygon. If not provided no maximum elevation attributeis attached.. Type: [string] Default: \n\u2018ELEV_MAX\u2019 \nOUTPUT: Contours. Specification of the output vector layer.One of: Save to a Temporary File Save to File\u2026. Type: [vector: polygon] Default: [Save to temporary file] \nCREATE_3D: Produce \n3D vector. Forces production of \n3D vectors instead of 2D.Includes elevation at every vertex.. Type: [boolean] Default: False \nIGNORE_NODATA: Treat all raster values as valid. Ignores any NoData values in the dataset.. Type: [boolean] Default: False \nNODATA: Input pixel value to treat as \u201cNoData\u201d Optional. Defines a value that should be inserted for the NoDatavalues in the output raster. Type: [number] Default: None \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.Refer to the corresponding GDAL utility documentation.. Type: [string] Default: None outputs = \nOUTPUT: Contours. Output vector layer with contour polygons. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\n\ndef generate_contour_polygons():\n    input_raster_path = 'D:/input_raster.tif'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"contour_polygons.shp\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n\n    parameters = {\n        'INPUT': input_raster_path,\n        'BAND': 1,\n        'INTERVAL': 10.0,\n        'OFFSET': 0.0,\n        'FIELD_NAME_MIN': None, \n        'FIELD_NAME_MAX': None, \n        'OUTPUT': output_path,                                                   \n        'CREATE_3D': False, \n        'IGNORE_NODATA': False, \n        'NODATA': None, \n        'EXTRA': None \n    }\n\n    result = processing.run(\"gdal:contour_polygon\", parameters)\n\n    contour_layer = QgsVectorLayer(result['OUTPUT'], 'Contour Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(contour_layer)\n\ngenerate_contour_polygons()"
    },
    {
        "tool_id": "gdal:convertformat",
        "toolname": "convertformat",
        "tool_description": "Converts any OGR-supported vector layer into another OGR-supported format.\nThis algorithm is derived from the ogr2ogr utility .",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nCONVERT_ALL_LAYERS: Convert all layers from dataset. Converts the whole dataset.Supported output formats for this option are \nGPKG and \nGML .. Type: [boolean] Default: False \nOUTPUT: Converted. Specification of the output vector layer.One of: Save to a Temporary File Save to File\u2026 For Save to File , the output format has to be specified.All GDAL vector formats are supported.For Save to a Temporary File the \nQGIS default vector formatwill be used.. Type: [same as input] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: Converted. The output vector layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef convert_layer_format():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_path = 'D:/output_layer.gpkg'  # For Save to File\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n\n                                          \n    convert_params = {\n        'INPUT': input_path,\n        'CONVERT_ALL_LAYERS': False,                 \n        'OUTPUT': output_path,                                            \n        'OPTIONS': '''    }\n\n                    \n    result = processing.run(\"gdal:convertformat\", convert_params)\n\n                              \n    converted_layer = QgsVectorLayer(result['OUTPUT'], 'Converted_Layer', 'ogr')\n    QgsProject.instance().addMapLayer(converted_layer)\n\n                      \nconvert_layer_format()"
    },
    {
        "tool_id": "gdal:dissolve",
        "toolname": "dissolve",
        "tool_description": "Dissolve (combine) geometries that have the same value for a given attribute / field. The output geometries are multipart.",
        "parameters": "INPUT: Input layer. The input layer to dissolve. Type: [vector: any]\nFIELD: Dissolve field Optional. The field of the input layer to use for dissolving. Type: [tablefield: any] \nGEOMETRY: Geometry column name. The name of the input layer geometry column to usefor dissolving.. Type: [string] Default: \u2018geometry\u2019 \nOUTPUT: Dissolved. Specify the output layer. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nEXPLODE_COLLECTIONS: Produce one feature for each geometry in any kind ofgeometry collection in the source file. Produce one feature for each geometry in any kind of geometrycollection in the source file. Type: [boolean] Default: False \nKEEP_ATTRIBUTES: Keep input attributes. Keep all attributes from the input layer. Type: [boolean] Default: False \nCOUNT_FEATURES: Count dissolved features. Count the dissolved features and include it in the outputlayer.. Type: [boolean] Default: False \nCOMPUTE_AREA: Compute area and perimeter of dissolved features. Compute the area and perimeter of dissolved features and include them in the output layer. Type: [boolean] Default: False \nCOMPUTE_STATISTICS: Compute min/max/sum/mean for attribute. Calculate statistics (min, max, sum and mean) for the numericattribute specified and include them in the output layer. Type: [boolean] Default: False \nSTATISTICS_ATTRIBUTE: Numeric attribute to calculate statistics on Optional. The numeric attribute to calculate statistics on. Type: [tablefield: numeric] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: Dissolved. The output multipart geometry layer (with dissolved geometries). Type: [same as input]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef dissolve_layer():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"Dissolved_output.shp\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n                          \n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n                                        \n    dissolve_params = {\n        'INPUT': input_path,\n        'FIELD': '',            \n        'GEOMETRY': '',                       \n        'OUTPUT': output_path,                                     \n        'EXPLODE_COLLECTIONS': False,                  \n        'KEEP_ATTRIBUTES': False,                  \n        'COUNT_FEATURES': False,                  \n        'COMPUTE_AREA': False,                  \n        'COMPUTE_STATISTICS': False,                  \n        'STATISTICS_ATTRIBUTE': '',            \n        'OPTIONS': ''                                  \n    }\n                            \n    result = processing.run(\"gdal:dissolve\", dissolve_params)\n                                        \n    dissolved_layer = QgsVectorLayer(result['OUTPUT'], 'Dissolved_output', 'ogr')\n    QgsProject.instance().addMapLayer(dissolved_layer)\n\n                      \ndissolve_layer()"
    },
    {
        "tool_id": "gdal:executesql",
        "toolname": "executesql",
        "tool_description": "Runs a simple or complex query with SQL syntax on the source layer. The result of the query will be added as a new layer.\nThis algorithm is derived from the GDAL ogr2ogr utility .",
        "parameters": "INPUT: Input layer. OGR-supported input vector layer. Type: [vector: any]\nSQL: \nSQL expression. Defines the \nSQL query, for example \nSELECT * \nFROM my_table \nWHERE name is not null .. Type: [string] \nDIALECT: \nSQL dialect. \nSQL dialect to use. One of: 0 \u2014 None 1 \u2014 OGR \nSQL 2 \u2014 SQLite. Type: [enumeration] Default: 0 \nOUTPUT: \nSQL result. Specification of the output layer.One of: Save to a Temporary File Save to File\u2026 For Save to File , the output format has to be specified.All GDAL vector formats are supported.For Save to a Temporary File the default output vectorlayer format will be used.. Type: [vector: any] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: \nSQL result. Vector layer created by the query. Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef execute_sql_query():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_path = 'C:/Users/Output/executed_sql_result.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n                                   \n    sql_params = {\n        'INPUT': input_path,\n        'SQL': 'SELECT * FROM my_table WHERE name is not null',\n        'DIALECT': 0,                                              \n        'OUTPUT': output_path,\n        'OPTIONS': '''    }\n    \n                           \n    result = processing.run(\"gdal:executesql\", sql_params)\n    \n                                         \n    sql_result_layer = QgsVectorLayer(result['OUTPUT'], 'SQL_Output', 'ogr')\n    QgsProject.instance().addMapLayer(sql_result_layer)\n\n                      \nexecute_sql_query()"
    },
    {
        "tool_id": "gdal:extractprojection",
        "toolname": "extractprojection",
        "tool_description": "Extracts the projection of a raster file and writes it into a world file with extension .wld .\nThis algorithm is derived from the GDAL srsinfo utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT_LAYER: Input file. Input rasterThe raster layer has to be file based, as the algorithmuses the path to the raster file as the location of thegenerated .wld file.Using a non-file raster layer will lead to an error.. Type: [raster]\nPRJ_FILE_CREATE: Create also .prj file. If this is activated a .prj file containing theprojection information is also created.. Type: [boolean] Default: False outputs = \nWORLD_FILE: World file. Text file with extension .wld containingtransformation parameters for the raster file.. Type: [file] \nPRJ_FILE: \nESRI Shapefile prj file. Text file with .prj extension that describes the CRS.Will be None if Create also .prj file isFalse.. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer\n\ndef extract_projection():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_directory'\n    \n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT_LAYER': input_path,                  \n        'PRJ_FILE_CREATE': False,                                   \n        'OUTPUT': output_path\n    }\n    \n                                        \n    result = processing.run(\"gdal:extractprojection\", parameters)\n\n                      \nextract_projection()"
    },
    {
        "tool_id": "gdal:fillnodata",
        "toolname": "fillnodata",
        "tool_description": "Fill raster regions with NoData values by interpolation from edges. The values for the NoData regions are calculated by the surrounding pixel values using inverse distance weighting. After the interpolation a smoothing of the results takes place. Input can be any GDAL-supported raster layer. This algorithm is generally suitable for interpolating missing regions of fairly continuously varying rasters (such as elevation models for instance). It is also suitable for filling small holes and cracks in more irregularly varying images (like airphotos). It is generally not so great for interpolating a raster from sparse point data.\nThis algorithm is derived from the GDAL fillnodata utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "Name: Label. Description. Type: Type INPUT: Input layer. Input raster layer. Type: [raster]\nBAND: Band number. The band to operate on. NoData values must berepresented by the value 0.. Type: [raster band] Default: 1 \nDISTANCE: Maximum distance (in pixels) to search out for values to interpolate. The number of pixels to search in all directions to find valuesto interpolate from. Type: [number] Default: 10 \nITERATIONS: Number of smoothing iterations to run after the interpolation. The number of 3x3 filter passes to run (0 or more) to smoothenthe results of the interpolation.. Type: [number] Default: 0 \nNO_MASK: Do not use default validity mask for the input band. Activates the user-defined validity mask. Type: [boolean] Default: False \nMASK_LAYER: Validity mask. \nA raster layer that defines the areas to fill.. Type: [raster] \nOUTPUT: Filled. Specification of the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Filled. Output raster. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef fill_no_data():\n    # Define input and output paths\n    input_path = 'D:/Data/input_raster.tif'\n    output_path = 'C:/output_path/filled_raster.tif'\n\n    # Load the raster file as a raster layer\n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n\n    # Run the Fill No Data algorithm\n    result = processing.run('gdal:fillnodata', {\n        'INPUT': input_layer,\n        'BAND': 1,  # Default band number\n        'DISTANCE': 10,  # Maximum distance to search for values to interpolate\n        'ITERATIONS': 0,  # Number of smoothing iterations to run\n        'NO_MASK': False,  # Do not use default validity mask\n        'MASK_LAYER': None,  # No mask layer\n        'OUTPUT': output_path,\n        'OPTIONS': '',  # Additional creation options\n        'EXTRA': None  # Additional command-line parameters\n    })\n\n    # Load the filled raster layer to QGIS\n    filled_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Filled Raster')\n    QgsProject.instance().addMapLayer(filled_raster_layer)\n\n# Execute the function\nfill_no_data()"
    },
    {
        "tool_id": "gdal:gdal2tiles",
        "toolname": "gdal2tiles",
        "tool_description": "Generates a directory with small tiles and metadata, following the OSGeo Tile Map Service Specification . See also the OpenGIS Web Map Tile Service Implementation Standard . Simple web pages with viewers based on Google Maps, OpenLayers and Leaflet are generated as well. To explore your maps on-line in the web browser, you only need to upload the generated directory onto a web server.\nThis algorithm also creates the necessary metadata for Google Earth (KML SuperOverlay), in case the supplied map uses EPSG:4326 projection.\nESRI world files and embedded georeferencing is used during tile generation, but you can publish a picture without proper georeferencing too.\nThis algorithm is derived from the GDAL gdal2tiles utility .",
        "parameters": "INPUT: Input layer. GDAL-supported raster layer.. Type: [raster]\nPROFILE: Tile cutting profile. One of: 0 \u2014 Mercator ( mercator ) 1 \u2014 Geodetic ( geodetic ) 2 \u2014 Raster ( raster ). Type: [enumeration] Default: 0 \nZOOM: Zoom levels to render Optional. . Type: [string] Default: \u2018\u2019 \nVIEWER: Web viewer to generate. One of: 0 \u2014 All ( all ) 1 \u2014 GoogleMaps ( google ) 2 \u2014 OpenLayers ( openlayers ) 3 \u2014 Leaflet ( leaflet ) 4 \u2014 None ( none ). Type: [enumerate] Default: 0 \nTITLE: Title of the map Optional. . Type: [string] Default: \u2018\u2019 \nCOPYRIGHT: Copyright of the map. . Type: [string] Default: \u2018\u2019 \nOUTPUT: Output directory. Specify the output folder for the tiles. One of: Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Save to temporary folder] \nRESAMPLING: Resampling method. The resampling algorithm to use.Options: 0 \u2014 Average ( average ) 1 \u2014 Nearest Neighbour ( near ) 2 \u2014 Bilinear (2x2 kernel) ( bilinear ) 3 \u2014 Cubic (4x4 kernel) ( cubic ) 4 \u2014 Cubic B-Spline (4x4 kernel) ( cubicspline ) 5 \u2014 Lanczos (6x6 kernel) ( lanczos ) 6 \u2014 Antialias ( antialias ). Type: [enumeration] Default: 0 \nSOURCE_CRS: The spatial reference system used for the source input data Optional. . Type: [crs] Default: None \nNODATA: Transparency value to assign to the input data Optional. . Type: [number] Default: 0.0 \nURL: \nURL address where the generated tiles are going to be published Optional. . Type: [string] Default: \u2018\u2019 \nGOOGLE_KEY: Google Maps \nAPI key (http://code.google.com/apis/maps/signup.html) Optional. Your Google maps \nAPI key.. Type: [string] Default: \u2018\u2019 \nBING_KEY: Bing Maps \nAPI key (https://www.bingmapsportal.com/) Optional. Your Bing maps \nAPI key.. Type: [string] Default: \u2018\u2019 \nRESUME: Generate only missing files. . Type: [boolean] Default: False \nKML: Generate \nKML for Google Earth. . Type: [boolean] Default: False \nNO_KML: Avoid automatic generation of \nKML files for \nEPSG:4326. . Type: [boolean] Default: False outputs = \nOUTPUT: Output directory. The output folder (for the tiles). Type: [folder]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef generate_tiles():\n    # Define the input and output directory paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'C:/Users/Output'\n\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n\n                                               \n    parameters = {\n        'INPUT': input_path,\n        'PROFILE': 0,                                                        \n        'ZOOM': '',\n        'VIEWER': 0,                                                                              \n        'TITLE': '',\n        'COPYRIGHT': '',\n        'OUTPUT': output_path,\n        'RESAMPLING': 0,                                                                                                                 \n        'SOURCE_CRS': None,\n        'NODATA': 0.0,\n        'URL': '',\n        'GOOGLE_KEY': '',\n        'BING_KEY': '',\n        'RESUME': False,\n        'KML': False,\n        'NO_KML': False\n    }\n    \n                                      \n    result = processing.run(\"gdal:gdal2tiles\", parameters)\n    \n                                                               \ngenerate_tiles()"
    },
    {
        "tool_id": "gdal:gdal2xyz",
        "toolname": "gdal2xyz",
        "tool_description": "Converts raster data to XYZ ASCII file format.",
        "parameters": "INPUT: Input layer. Raster layer to convert. Type: [raster]\nBAND: Band number. If the raster is multiband, choose the band you want toconvert. Type: [raster band] Default: The first band of the input layer \nNODATA_INPUT: Source NoData Optional. Input pixel value to treat as \u201cNoData\u201d \n(GDAL >= 3.7).. Type: [number] Default: None \nNODATA_OUTPUT: Destination NoData Optional. Assign specified \u201cNoData\u201d value to output \n(GDAL >= 3.7).. Type: [number] Default: None \nSKIP_NODATA: Do not output NoData values. Do not output \u201cNoData\u201d values \n(GDAL >= 3.3).. Type: [boolean] Default: False \nCSV: Output comma-separated values. Sets whether the output file should be of type comma-separatedvalues (csv).. Type: [boolean] Default: False \nOUTPUT: \nXYZ \nASCII file. Specification of the output file.One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nINPUT: \nXYZ \nASCII file. Table file containing the values exported from the raster band.. Type: [table]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef convert_raster_to_xyz():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"output_xyz.txt\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n\n                                 \n    input_layer = QgsRasterLayer(input_path, \"Input Raster\")\n\n                                         \n    parameters = {\n        'INPUT': input_path,\n        'BAND': 1,\n        'NODATA_INPUT': None,\n        'NODATA_OUTPUT': None,\n        'SKIP_NODATA': False,               \n        'CSV': False,               \n        'OUTPUT': output_path\n    }\n\n                                         \n    processing.run(\"gdal:gdal2xyz\", parameters)\n\n                      \nconvert_raster_to_xyz()"
    },
    {
        "tool_id": "gdal:gdalinfo",
        "toolname": "gdalinfo",
        "tool_description": "The gdalinfo program lists various information about a GDAL supported raster dataset.\nThis algorithm is derived from the GDAL info utility .\nDefault menu: Raster \u25ba Miscellaneous",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nMIN_MAX: Force computation of the actual min/max values for each band. Forces computation of the actual min/max values for each band inthe dataset. Type: [boolean] Default: False \nSTATS: Read and display image statistics (force computation if necessary). Reads and displays image statistics. Forces computation if nostatistics are stored in an image.. Type: [boolean] Default: False \nNO_GCP: Suppress \nGCP info. Suppresses ground control points list printing.It may be useful for datasets with huge amount of GCPs, such asL1B \nAVHRR or \nHDF4 \nMODIS which contain thousands of them.. Type: [boolean] Default: False \nNO_METADATA: Suppress metadata info. Suppresses metadata printing.Some datasets may contain a lot of metadata strings.. Type: [boolean] Default: False \nOUTPUT: Layer information. Specify the \nHTML file for output.One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Layer information. The \nHTML file containing information about the input rasterlayer. Type: [html]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef gdal_info(input_raster_path, output_path):\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n    \n                                      \n    parameters = {\n        'INPUT': input_raster_path,\n        'MIN_MAX': False,                                  \n        'STATS': False,                                     \n        'NO_GCP': False,                                    \n        'NO_METADATA': False,                                 \n        'OUTPUT': output_path,\n        'EXTRA': None\n    }\n    \n                            \n    result = processing.run(\"gdal:gdalinfo\", parameters)\n    \n                                           \n                                                                       \n                                                     \n\n               \ninput_raster_path = \"D:/workspace/input_raster.tif\"\noutput_html_path = \"D:/workspace/output_info.html\"\ngdal_info(input_raster_path, output_html_path)"
    },
    {
        "tool_id": "gdal:gridaverage",
        "toolname": "gridaverage",
        "tool_description": "The Moving Average is a simple data averaging algorithm. It uses a moving window of elliptic form to search values and averages all data points within the window. Search ellipse can be rotated by specified angle, the center of ellipse located at the grid node. Also the minimum number of data points to average can be set, if there are not enough points in window, the grid node considered empty and will be filled with specified NoData value.\nThis algorithm is derived from the GDAL grid utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Point layer. Input point vector layer. Type: [vector: point]\nRADIUS_1: The first radius of search ellipse. The first radius \n(X axis if rotation angle is 0) ofthe search ellipse. Type: [number] Default: 0.0 \nRADIUS_2: The second radius of search ellipse. The second radius \n(Y axis if rotation angle is 0)of the search ellipse. Type: [number] Default: 0.0 \nANGLE: Angle of search ellipse rotation in degrees (counter clockwise). Angle of ellipse rotation in degrees.Ellipse rotated counter clockwise.. Type: [number] Default: 0.0 \nMIN_POINTS: Minimum number of data points to use. Minimum number of data points to average.If less amount of points found the grid nodeconsidered empty and will be filled withNoData marker.. Type: [number] Default: 0.0 \nNODATA: NoData. NoData marker to fill empty points. Type: [number] Default: 0.0 \nOUTPUT: Interpolated (moving average). Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nZ_FIELD: \nZ value from field Optional. Field for the interpolation. Type: [tablefield: numeric] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Interpolated (moving average). Output raster with interpolated values. Type: [raster]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef run_gdal_gridaverage():\n    # Define input and output paths\n    input_path = 'D:/Data/points.shp'\n    output_path = 'C:/output_path/interpolated.tif'\n  \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Points', 'ogr')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_path,\n        'RADIUS_1': 50.0,\n        'RADIUS_2': 50.0,\n        'ANGLE': 0.0,\n        'MIN_POINTS': 1,\n        'NODATA': -9999,\n        'OUTPUT': output_path,\n        'Z_FIELD': 'elevation', \n        'OPTIONS': '',\n        'EXTRA': '',\n        'DATA_TYPE': 5  # Options: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n    }\n    \n    # Run the grid average algorithm\n    result = processing.run('gdal:gridaverage', parameters)\n\n    # Load the result layer to QGIS\n    interpolated_layer = QgsVectorLayer(result['OUTPUT'], 'Interpolated (Moving Average)', 'ogr')\n    QgsProject.instance().addMapLayer(interpolated_layer)\n\n# Execute the function\nrun_gdal_gridaverage()"
    },
    {
        "tool_id": "gdal:griddatametrics",
        "toolname": "griddatametrics",
        "tool_description": "Computes some data metrics using the specified window and output grid geometry.\nThis algorithm is derived from the GDAL grid utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Point layer. Input point vector layer. Type: [vector: point]\nMETRIC: Data metric to use. One of: 0 \u2014 Minimum, minimum value found in grid node searchellipse 1 \u2014 Maximum, maximum value found in grid node searchellipse 2 \u2014 Range, a difference between the minimum and maximumvalues found in grid node search ellipse 3 \u2014 Count, a number of data points found in grid nodesearch ellipse 4 \u2014 Average distance, an average distance between the gridnode (center of the search ellipse) and all of the datapoints found in grid node search ellipse 5 \u2014 Average distance between points, an average distancebetween the data points found in grid node search ellipse.The distance between each pair of points within ellipseis calculated and average of all distances is set as agrid node value. Type: [enumeration] Default: 0 \nRADIUS_1: The first radius of search ellipse. The first radius \n(X axis if rotation angle is 0) ofthe search ellipse. Type: [number] Default: 0.0 \nRADIUS_2: The second radius of search ellipse. The second radius \n(Y axis if rotation angle is 0)of the search ellipse. Type: [number] Default: 0.0 \nANGLE: Angle of search ellipse rotation in degrees (counter clockwise). Angle of ellipse rotation in degrees.Ellipse rotated counter clockwise.. Type: [number] Default: 0.0 \nMIN_POINTS: Minimum number of data points to use. Minimum number of data points to average.If less amount of points found the grid nodeconsidered empty and will be filled withNoData marker.. Type: [number] Default: 0.0 \nNODATA: NoData. NoData marker to fill empty points. Type: [number] Default: 0.0 \nOUTPUT: Interpolated (data metrics). Specify the output raster layer with interpolated values.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nZ_FIELD: \nZ value from field Optional. Field for the interpolation. Type: [tablefield: numeric] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Interpolated (data metrics). Output raster with interpolated values. Type: [raster]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_data_metrics():\n    # Define input and output paths\n    input_path = 'D:/Data/Points.shp'\n    output_path = 'C:/output_path/output_raster.tif'\n    \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Point Layer', 'ogr')\n\n    # Run the Gridded Data Metrics algorithm\n    result = processing.run('gdal:griddatametrics', {\n        'INPUT': input_layer,\n        'METRIC': 0,  # Minimum, other options: ['0': 'Minimum', '1': 'Maximum', '2': 'Range', '3': 'Count', '4': 'Average distance', '5': 'Average distance between points']\n        'RADIUS_1': 0.0,\n        'RADIUS_2': 0.0,\n        'ANGLE': 0.0,\n        'MIN_POINTS': 0.0,\n        'NODATA': 0.0,\n        'OUTPUT': output_path,\n        'Z_FIELD': None,\n        'OPTIONS': '',\n        'EXTRA': '',\n        'DATA_TYPE': 5   # Float32, other options: ['0': 'Byte', '1': 'Int16', '2': 'UInt16', '3': 'UInt32', '4': 'Int32', '5': 'Float32', '6': 'Float64', '7': 'CInt16', '8': 'CInt32', '9': 'CFloat32', '10': 'CFloat64', '11': 'Int8']\n    })\n\n    # Load the output raster to QGIS\n    output_raster = QgsRasterLayer(result['OUTPUT'], 'Interpolated Metrics', 'gdal')\n    QgsProject.instance().addMapLayer(output_raster)\n\n# Execute the function\ncalculate_data_metrics()"
    },
    {
        "tool_id": "gdal:gridinversedistance",
        "toolname": "gridinversedistance",
        "tool_description": "The Inverse Distance to a Power gridding method is a weighted average interpolator.\nYou should supply the input arrays with the scattered data values including coordinates of every data point and output grid geometry. The function will compute interpolated value for the given position in output grid.\nThis algorithm is derived from the GDAL grid utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Point layer. Input point vector layer. Type: [vector: point]\nPOWER: Weighting power. Weighting power. Type: [number] Default: 2.0 \nSMOOTHING: Smothing. Smoothing parameter. Type: [number] Default: 0.0 \nRADIUS_1: The first radius of search ellipse. The first radius \n(X axis if rotation angle is 0) ofthe search ellipse. Type: [number] Default: 0.0 \nRADIUS_2: The second radius of search ellipse. The second radius \n(Y axis if rotation angle is 0)of the search ellipse. Type: [number] Default: 0.0 \nANGLE: Angle of search ellipse rotation in degrees (counter clockwise). Angle of ellipse rotation in degrees.Ellipse rotated counter clockwise.. Type: [number] Default: 0.0 \nMAX_POINTS: Maximum number of data points to use. Do not search for more points than this number.. Type: [number] Default: 0 \nMIN_POINTS: Minimum number of data points to use. Minimum number of data points to average.If less amount of points found the grid nodeconsidered empty and will be filled withNoData marker.. Type: [number] Default: 0 \nNODATA: NoData. NoData marker to fill empty points. Type: [number] Default: 0.0 \nOUTPUT: Interpolated \n(IDW). Specify the output raster layer with interpolated values.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nZ_FIELD: \nZ value from field Optional. Field for the interpolation. Type: [tablefield: numeric] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Interpolated \n(IDW). Output raster with interpolated values. Type: [raster]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef idw_interpolation():\n    input_path = 'C:/path_to_input_point_layer.shp'\n    output_path = 'C:/path_to_output_raster.tif'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Point Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'POWER': 2.0,\n        'SMOOTHING': 0.0,\n        'RADIUS_1': 0.0,\n        'RADIUS_2': 0.0,\n        'ANGLE': 0.0,\n        'MAX_POINTS': 0,\n        'MIN_POINTS': 0,\n        'NODATA': 0.0,\n        'OUTPUT': output_path,\n        'Z_FIELD': None,\n        'OPTIONS': '',\n        'EXTRA': None,\n        'DATA_TYPE': 5  # Float32\n    }\n\n    result = processing.run('gdal:gridinversedistance', parameters)\n    interpolated_layer = QgsRasterLayer(result['OUTPUT'], 'Interpolated IDW')\n    QgsProject.instance().addMapLayer(interpolated_layer)\n\nidw_interpolation()"
    },
    {
        "tool_id": "gdal:gridinversedistancenearestneighbor",
        "toolname": "gridinversedistancenearestneighbor",
        "tool_description": "Computes the Inverse Distance to a Power gridding combined to the nearest neighbor method. Ideal when a maximum number of data points to use is required.\nThis algorithm is derived from the GDAL grid utility .",
        "parameters": "INPUT: Point layer. Input point vector layer. Type: [vector: point]\nPOWER: Weighting power. Weighting power. Type: [number] Default: 2.0 \nSMOOTHING: Smoothing. Smoothing parameter. Type: [number] Default: 0.0 \nRADIUS: The radius of the search circle. The radius of the search circle. Type: [number] Default: 1.0 \nMAX_POINTS: Maximum number of data points to use. Do not search for more points than this number.. Type: [number] Default: 12 \nMIN_POINTS: Minimum number of data points to use. Minimum number of data points to average.If less amount of points found the grid nodeconsidered empty and will be filled withNoData marker.. Type: [number] Default: 0 \nNODATA: NoData. NoData marker to fill empty points. Type: [number] Default: 0.0 \nOUTPUT: Interpolated \n(IDW with \nNN search). Specify the output raster layer with interpolated values.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nZ_FIELD: \nZ value from field Optional. Field for the interpolation. Type: [tablefield: numeric] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Interpolated \n(IDW with \nNN search). Output raster with interpolated values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef perform_idw_interpolation():\n    # Define input and output paths\n    input_path = 'D:/Data/PointData.shp'\n    output_path = 'C:/output_path/interpolated_layer.tif'\n\n    # Load the point layer as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Point Layer', 'ogr')\n\n    # Define the parameters for the IDW interpolation using Nearest Neighbor search\n    parameters = {\n        'INPUT': input_layer,\n        'POWER': 2.0, \n        'SMOOTHING': 0.0,\n        'RADIUS': 1.0,\n        'MAX_POINTS': 12,\n        'MIN_POINTS': 0,\n        'NODATA': 0.0,\n        'OUTPUT': output_path,\n        'Z_FIELD': '',  # Optional\n        'OPTIONS': '',  # Optional\n        'EXTRA': None,  # Optional\n        'DATA_TYPE': 5  # Options: 0 \u2014 Byte, 1 \u2014 Int16, 2 \u2014 UInt16, 3 \u2014 UInt32, 4 \u2014 Int32, 5 \u2014 Float32, 6 \u2014 Float64, 7 \u2014 CInt16, 8 \u2014 CInt32, 9 \u2014 CFloat32, 10 \u2014 CFloat64, 11 \u2014 Int8\n    }\n\n    # Perform the IDW interpolation\n    result = processing.run(\"\"\"gdal:gridinversedistancenearestneighbor\", parameters)\n    \n                                         \n    interpolated_layer = QgsVectorLayer(result['OUTPUT'], 'Interpolated Layer', 'ogr')\n    QgsProject.instance().addMapLayer(interpolated_layer)\n\n                      \nperform_idw_interpolation()"
    },
    {
        "tool_id": "gdal:gridlinear",
        "toolname": "gridlinear",
        "tool_description": "The Linear method perform linear interpolation by computing a Delaunay triangulation of the point cloud, finding in which triangle of the triangulation the point is, and by doing linear interpolation from its barycentric coordinates within the triangle. If the point is not in any triangle, depending on the radius, the algorithm will use the value of the nearest point or the NoData value.\nThis algorithm is derived from the GDAL grid utility .",
        "parameters": "INPUT: Point layer. Input point vector layer. Type: [vector: point]\nRADIUS: Search distance. In case the point to be interpolated does not fit into atriangle of the Delaunay triangulation, use that maximumdistance to search a nearest neighbour, or use NoDataotherwise.If set to -1 , the search distance is infinite.If set to 0 , NoData value will be used.. Type: [number] Default: -1.0 \nNODATA: NoData. NoData marker to fill empty points. Type: [number] Default: 0.0 \nOUTPUT: Interpolated (Linear). Specify the output raster layer with interpolated values.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nZ_FIELD: \nZ value from field Optional. Field for the interpolation. Type: [tablefield: numeric] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Interpolated (Linear). Output raster with interpolated values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef interpolate_linear():\n    input_path = 'D:/Data/Points.shp'\n    output_path = 'C:/output_path/interpolated_raster.tif'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n    \n    parameters = {\n        'INPUT': input_path,\n        'RADIUS': -1.0,\n        'NODATA': 0.0,\n        'OUTPUT': output_path,\n        'Z_FIELD': '',  # Optional: Choose the appropriate field for Z value if needed\n        'OPTIONS': '',  # Optional: Add any additional creation options\n        'EXTRA': '',  # Optional: Add any additional GDAL command-line options\n        'DATA_TYPE': 5  # Data type: Available options: 0 \u2014 Byte, 1 \u2014 Int16, 2 \u2014 UInt16, 3 \u2014 UInt32, 4 \u2014 Int32, 5 \u2014 Float32, 6 \u2014 Float64, 7 \u2014 CInt16, 8 \u2014 CInt32, 9 \u2014 CFloat32, 10 \u2014 CFloat64, 11 \u2014 Int8\n    }\n\n    result = processing.run('gdal:gridlinear', parameters)\n    \n    interpolated_layer = QgsProject.instance().addRasterLayer(result['OUTPUT'], 'Interpolated (Linear)')\n\ninterpolate_linear()"
    },
    {
        "tool_id": "gdal:gridnearestneighbor",
        "toolname": "gridnearestneighbor",
        "tool_description": "The Nearest Neighbor method doesn\u2019t perform any interpolation or smoothing, it just takes the value of nearest point found in grid node search ellipse and returns it as a result. If there are no points found, the specified NoData value will be returned.\nThis algorithm is derived from the GDAL grid utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Point layer. Input point vector layer. Type: [vector: point]\nRADIUS_1: The first radius of search ellipse. The first radius \n(X axis if rotation angle is 0) ofthe search ellipse. Type: [number] Default: 0.0 \nRADIUS_2: The second radius of search ellipse. The second radius \n(Y axis if rotation angle is 0)of the search ellipse. Type: [number] Default: 0.0 \nANGLE: Angle of search ellipse rotation in degrees (counter clockwise). Angle of ellipse rotation in degrees.Ellipse rotated counter clockwise.. Type: [number] Default: 0.0 \nNODATA: NoData. NoData marker to fill empty points. Type: [number] Default: 0.0 \nOUTPUT: Interpolated (Nearest neighbour). Specify the output raster layer with interpolated values.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nZ_FIELD: \nZ value from field Optional. Field for the interpolation. Type: [tablefield: numeric] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Interpolated (Nearest neighbour). Output raster with interpolated values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef nearest_neighbor_interpolation(input_path, output_path):\n    # Load the input point layer\n    input_layer = QgsVectorLayer(input_path, 'Input Point Layer', 'ogr')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_layer,\n        'RADIUS_1': 0.0,\n        'RADIUS_2': 0.0,\n        'ANGLE': 0.0,\n        'NODATA': 0.0,\n        'OUTPUT': output_path,\n        'Z_FIELD': None,\n        'OPTIONS': '',\n        'EXTRA': None,\n        'DATA_TYPE': 5  # Options are: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    }\n\n    # Perform the nearest neighbor interpolation\n    result = processing.run(\"\"\"gdal:gridnearestneighbor\", parameters)\n\n                                          \n    interpolated_layer = QgsRasterLayer(result['OUTPUT'], 'Interpolated (Nearest neighbour)')\n    QgsProject.instance().addMapLayer(interpolated_layer)\n\n                      \ninput_path = \"D:/Data/InputPoints.shp\"\noutput_path = \"C:/output_path/interpolated_raster.tif\"\nnearest_neighbor_interpolation(input_path, output_path)"
    },
    {
        "tool_id": "gdal:hillshade",
        "toolname": "hillshade",
        "tool_description": "Outputs a raster with a nice shaded relief effect. It\u2019s very useful for visualizing the terrain. You can optionally specify the azimuth and altitude of the light source, a vertical exaggeration factor and a scaling factor to account for differences between vertical and horizontal units.\nThis algorithm is derived from the GDAL DEM utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input Elevation raster layer. Type: [raster]\nBAND: Band number. Band containing the elevation information. Type: [raster band] Default: 1 \nZ_FACTOR: \nZ factor (vertical exaggeration). The factor exaggerates the height of the output elevationraster. Type: [number] Default: 1.0 \nSCALE: Scale (ratio of vert. units to horiz.). The ratio of vertical units to horizontal units. Type: [number] Default: 1.0 \nAZIMUTH: Azimuth of the light. Defines the azimuth of the light shining on the elevationraster in degrees.If it comes from the top of the raster the value is 0, if itcomes from the east it is 90 a.s.o.. Type: [number] Default: 315.0 \nALTITUDE: Altitude of the light. Defines the altitude of the light, in degrees.90 if the light comes from above the elevation raster, 0 if itis raking light.. Type: [number] Default: 45.0 \nCOMPUTE_EDGES: Compute edges. Generates edges from the elevation raster. Type: [boolean] Default: False \nZEVENBERGEN: Use Zevenbergen&Thorne formula (instead of the Horn\u2019s one). Activates Zevenbergen&Thorne formula for smooth landscapes. Type: [boolean] Default: False \nCOMBINED: Combined shading. . Type: [boolean] Default: False \nMULTIDIRECTIONAL: Multidirectional shading. . Type: [boolean] Default: False \nOUTPUT: Hillshade. Specify the output raster layer with interpolated values.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Hillshade. Output raster with interpolated values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef generate_hillshade():\n    # Define input and output paths\n    input_path = 'D:/Data/Elevation.tif'\n    output_path = 'D:/workspace_directory/Hillshade.tif'\n\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, 'Elevation Raster')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_path,\n        'BAND': 1,\n        'Z_FACTOR': 1.0,\n        'SCALE': 1.0,\n        'AZIMUTH': 315.0,\n        'ALTITUDE': 45.0,\n        'COMPUTE_EDGES': False,\n        'ZEVENBERGEN': False,\n        'COMBINED': False,\n        'MULTIDIRECTIONAL': False,\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'EXTRA': None\n    }\n\n    # Perform the hillshade operation\n    result = processing.run('gdal:hillshade', parameters)\n\n    # Load the hillshade layer to QGIS\n    hillshade_layer = QgsRasterLayer(result['OUTPUT'], 'Hillshade')\n    QgsProject.instance().addMapLayer(hillshade_layer)\n\n# Execute the function\ngenerate_hillshade()"
    },
    {
        "tool_id": "gdal:importvectorintopostgisdatabaseavailableconnections",
        "toolname": "importvectorintopostgisdatabaseavailableconnections",
        "tool_description": "Imports vector layers inside a PostgreSQL database on the basis of an available connection. The connection has to be defined properly beforehand. Be aware that the checkboxes \u2018Save Username\u2019 and \u2018Save Password\u2019 are activated. Then you can use the algorithm.\nThis algorithm is derived from the GDAL ogr2ogr utility .",
        "parameters": "DATABASE: Database (connection name). The PostgreSQL database to connect to. Type: [string]\nINPUT: Input layer. OGR-supported vector layer to export to the database. Type: [vector: any] \nSHAPE_ENCODING: Shape encoding Optional. Sets the encoding to apply to the data. Type: [string] Default: \u2018\u2019 \nGTYPE: Output geometry type. Defines the output geometry type. One of: 0 \u2014 1 \u2014 \nNONE 2 \u2014 \nGEOMETRY 3 \u2014 \nPOINT 4 \u2014 \nLINESTRING 5 \u2014 \nPOLYGON 6 \u2014 \nGEOMETRYCOLLECTION 7 \u2014 \nMULTIPOINT 8 \u2014 \nMULTIPOLYGON 9 \u2014 \nMULTILINESTRING. Type: [enumeration] Default: 0 \nA_SRS: Assign an output \nCRS Optional. Defines the output \nCRS of the database table. Type: [crs] Default: None \nT_SRS: Reproject to this \nCRS on output Optional. Reprojects/transforms to this \nCRS on output. Type: [crs] Default: None \nS_SRS: Override source \nCRS Optional. Overrides the input layer \nCRS. Type: [crs] Default: None \nSCHEMA: Schema (schema name) Optional. Defines the schema for the database table. Type: [string] Default: \u2018public\u2019 \nTABLE: Table to export to (leave blank to use layer name) Optional. Defines a name for the table that will be imported into thedatabase.By default the table name is the name of the input vectorfile.. Type: [string] Default: \u2018\u2019 \nPK: Primary Key (new field) Optional. Defines which attribute field will be the primary key of thedatabase table. Type: [string] Default: \u2018id\u2019 \nPRIMARY_KEY: Primary Key (existing field, used if the above option isleft empty) Optional. Defines which attribute field in the exported layer will bethe primary key of the database table. Type: [tablefield: any] Default: None \nGEOCOLUMN: Geometry column name Optional. Defines in which attribute field of the database there will bethe geometry information. Type: [string] Default: \u2018geom\u2019 \nDIM: Vector dimensions Optional. Defines if the vector file to be imported has \n2D or \n3D data.One of: 0 \u2014 2 1 \u2014 3. Type: [enumeration] Default: 0 \n(2D) \nSIMPLIFY: Distance tolerance for simplification Optional. Defines a distance tolerance for the simplification of thevector geometries to be imported.By default there is no simplification.. Type: [string] Default: \u2018\u2019 \nSEGMENTIZE: Maximum distance between 2 nodes (densification) Optional. The maximum distance between two nodes.Used to create intermediate points.By default there is no densification.. Type: [string] Default: \u2018\u2019 \nSPAT: Select features by extent (defined in input layer \nCRS) Optional. You can select features from a given extent that will be inthe output table. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] Default: None \nCLIP: Clip the input layer using the above (rectangle) extent Optional. The input layer will be clipped by the extent you definedbefore. Type: [boolean] Default: False \nWHERE: Select features using a \nSQL \n\u201cWHERE\u201d statement (Ex: column=\u201dvalue\u201d) Optional. Defines with a \nSQL \n\u201cWHERE\u201d statement which features should beselected from the input layer. Type: [string] Default: \u2018\u2019 \nGT: Group \nN features per transaction (Default: 2000) Optional. You can group the input features in transactions where Ndefines the size.By default \nN limits the transaction size to 20000 features.. Type: [string] Default: \u2018\u2019 \nOVERWRITE: Overwrite existing table Optional. If there is a table with the same name in the database,and if this option is set to True, the table will beoverwritten.. Type: [boolean] Default: True \nAPPEND: Append to existing table Optional. If checked / True the vector data will be appended to anexisting table.New fields found in the input layer are ignored.By default a new table will be created.. Type: [boolean] Default: False \nADDFIELDS: Append and add new fields to existing table Optional. If activated the vector data will be appended to anexisting table, there won\u2019t be a new table created.New fields found in input layer are added to thetable.By default a new table will be created.. Type: [boolean] Default: False \nLAUNDER: Do not launder columns/table names Optional. With this option checked you can prevent the defaultbehaviour (converting column names to lowercase,removing spaces and other invalid characters).. Type: [boolean] Default: False \nINDEX: Do not create Spatial Index Optional. Prevents a spatial index for the output table from beingcreated.By default, a spatial index is added.. Type: [boolean] Default: False \nSKIPFAILURES: Continue after a failure, skipping the failed feature Optional. . Type: [boolean] Default: False \nPROMOTETOMULTI: Promote to Multipart Optional. Casts features geometry type to multipart in the output table. Type: [boolean] Default: True \nPRECISION: Keep width and precision of input attributes Optional. Avoids modifying column attributes to comply with input data. Type: [boolean] Default: True \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs =\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef import_vector_to_postgis():\n    input_layer_path = 'path/to/your/vectorfile.shp'\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'DATABASE': '',                                     \n        'INPUT': input_layer_path,\n        'SHAPE_ENCODING': '',\n        'GTYPE': 0,                                                                                                                                                      \n        'A_SRS': None,\n        'T_SRS': None,\n        'S_SRS': None,\n        'SCHEMA': '',\n        'TABLE': '',\n        'PK': '',\n        'PRIMARY_KEY': None,\n        'GEOCOLUMN': '',\n        'DIM': 0,                         \n        'SIMPLIFY': '',\n        'SEGMENTIZE': '',\n        'SPAT': None,\n        'CLIP': False,\n        'WHERE': '',\n        'GT': '',\n        'OVERWRITE': True,\n        'APPEND': False,\n        'ADDFIELDS': False,\n        'LAUNDER': False,\n        'INDEX': False,\n        'SKIPFAILURES': False,\n        'PROMOTETOMULTI': True,\n        'PRECISION': True,\n        'OPTIONS': '',\n        'OUTPUT': ''                                     \n    }\n\n    result = processing.run(\"gdal:importvectorintopostgisdatabaseavailableconnections\", parameters)\n\n                      \nimport_vector_to_postgis()"
    },
    {
        "tool_id": "gdal:importvectorintopostgisdatabasenewconnection",
        "toolname": "importvectorintopostgisdatabasenewconnection",
        "tool_description": "Imports vector layers inside a PostgreSQL database. A new connection to the PostGIS database must be created.\nThis algorithm is derived from the GDAL ogr2ogr utility .",
        "parameters": "INPUT: Input layer. OGR-supported vector layer to export to the database. Type: [vector: any]\nSHAPE_ENCODING: Shape encoding Optional. Sets the encoding to apply to the data. Type: [string] Default: \u2018\u2019 \nGTYPE: Output geometry type. Defines the output geometry type. One of: 0 \u2014 1 \u2014 \nNONE 2 \u2014 \nGEOMETRY 3 \u2014 \nPOINT 4 \u2014 \nLINESTRING 5 \u2014 \nPOLYGON 6 \u2014 \nGEOMETRYCOLLECTION 7 \u2014 \nMULTIPOINT 8 \u2014 \nMULTIPOLYGON 9 \u2014 \nMULTILINESTRING. Type: [enumeration] Default: 0 \nA_SRS: Assign an output \nCRS Optional. Defines the output \nCRS of the database table. Type: [crs] Default: None \nT_SRS: Reproject to this \nCRS on output Optional. Reprojects/transforms to this \nCRS on output. Type: [crs] Default: None \nS_SRS: Override source \nCRS Optional. Overrides the input layer \nCRS. Type: [crs] Default: None \nHOST: Host Optional. Name of the database host. Type: [string] Default: \u2018localhost\u2019 \nPORT: Port Optional. Port number the PostgreSQL database server listens on. Type: [string] Default: \u20185432\u2019 \nUSER: Username Optional. User name used to log in to the database. Type: [string] Default: \u2018\u2019 \nDBNAME: Database name Optional. Name of the database. Type: [string] Default: \u2018\u2019 \nPASSWORD: Password Optional. Password used with Username to connect to the database. Type: [string] Default: \u2018\u2019 \nSCHEMA: Schema (schema name) Optional. Defines the schema for the database table. Type: [string] Default: \u2018public\u2019 \nTABLE: Table name, leave blank to use input name Optional. Defines a name for the table that will be imported into thedatabase.By default the table name is the name of the input vectorfile.. Type: [string] Default: \u2018\u2019 \nPK: Primary Key (new field) Optional. Defines which attribute field will be the primary key of thedatabase table. Type: [string] Default: \u2018id\u2019 \nPRIMARY_KEY: Primary Key (existing field, used if the above option is left empty) Optional. Defines which attribute field in the exported layer will bethe primary key of the database table. Type: [tablefield: any] Default: None \nGEOCOLUMN: Geometry column name Optional. Defines in which attribute field to store the geometryinformation. Type: [string] Default: \u2018geom\u2019 \nDIM: Vector dimensions Optional. Defines if the vector file to be imported has \n2D or \n3D data.One of: 0 \u2014 \n2D 1 \u2014 \n3D. Type: [enumeration] Default: 0 \n(2D) \nSIMPLIFY: Distance tolerance for simplification Optional. Defines a distance tolerance for the simplification of thevector geometries to be imported.By default there is no simplification.. Type: [string] Default: \u2018\u2019 \nSEGMENTIZE: Maximum distance between 2 nodes (densification) Optional. The maximum distance between two nodes.Used to create intermediate points.By default there is no densification.. Type: [string] Default: \u2018\u2019 \nSPAT: Select features by extent (defined in input layer \nCRS) Optional. You can select features from a given extent that will be inthe output table. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] Default: None \nCLIP: Clip the input layer using the above (rectangle) extent Optional. The input layer will be clipped by the extent you definedbefore. Type: [boolean] Default: False \nFIELDS: Fields to include (leave empty to use all fields) Optional. Defines fields to keep from the imported vector file.If none is selected, all the fields are imported.. Type: [string] [list] Default: [] \nWHERE: Select features using a \nSQL \n\u201cWHERE\u201d statement (Ex: column=\u201dvalue\u201d) Optional. Defines with a \nSQL \n\u201cWHERE\u201d statement which features should beselected for the output table. Type: [string] Default: \u2018\u2019 \nGT: Group \nN features per transaction (Default: 2000) Optional. You can group the input features in transactions where Ndefines the size.By default \nN limits the transaction size to 20000 features.. Type: [string] Default: \u2018\u2019 \nOVERWRITE: Overwrite existing table Optional. If there is a table with the same name in the database,and if this option is set to True, the table will beoverwritten.. Type: [boolean] Default: True \nAPPEND: Append to existing table Optional. If checked / True the vector data will be appended to anexisting table.New fields found in the input layer are ignored.By default a new table will be created.. Type: [boolean] Default: False \nADDFIELDS: Append and add new fields to existing table Optional. If activated the vector data will be appended to anexisting table, there won\u2019t be created a new table.New fields found in input layer are added to thetable.By default a new table will be created.. Type: [boolean] Default: False \nLAUNDER: Do not launder columns/table names Optional. With this option checked you can prevent the defaultbehaviour (converting column names to lowercase,removing spaces and other invalid characters).. Type: [boolean] Default: False \nINDEX: Do not create Spatial Index Optional. Prevents a spatial index for the output table from beingcreated.By default, a spatial index is added.. Type: [boolean] Default: False \nSKIPFAILURES: Continue after a failure, skipping the failed feature Optional. . Type: [boolean] Default: False \nPROMOTETOMULTI: Promote to Multipart Optional. Casts features geometry type to multipart in the output table. Type: [boolean] Default: True \nPRECISION: Keep width and precision of input attributes Optional. Avoids modifying column attributes to comply with input data. Type: [boolean] Default: True \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs =\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef import_vector_to_postgis():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_path = 'database_table_name'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n                                  \n    parameters = {\n        'INPUT': input_path,\n        'SHAPE_ENCODING': '',\n        'GTYPE': 0,                                                                                                                                                                                        \n        'A_SRS': None,\n        'T_SRS': None,\n        'S_SRS': None,\n        'HOST': 'localhost',\n        'PORT': '5432',\n        'USER': '',\n        'DBNAME': '',\n        'PASSWORD': '',\n        'SCHEMA': 'public',\n        'TABLE': '',\n        'PK': 'id',\n        'PRIMARY_KEY': None,\n        'GEOCOLUMN': 'geom',\n        'DIM': 0,                                        \n        'SIMPLIFY': '',\n        'SEGMENTIZE': '',\n        'SPAT': None,\n        'CLIP': False,\n        'FIELDS': [],\n        'WHERE': '',\n        'GT': '',\n        'OVERWRITE': True,\n        'APPEND': False,\n        'ADDFIELDS': False,\n        'LAUNDER': False,\n        'INDEX': False,\n        'SKIPFAILURES': False,\n        'PROMOTETOMULTI': True,\n        'PRECISION': True,\n        'OPTIONS': '',\n        'OUTPUT': output_path\n    }\n    \n                                  \n    result = processing.run(\"gdal:importvectorintopostgisdatabasenewconnection\", parameters)\n    \n                      \nimport_vector_to_postgis()"
    },
    {
        "tool_id": "gdal:merge",
        "toolname": "merge",
        "tool_description": "Merges raster files in a simple way. Here you can use a pseudocolor table from an input raster and define the output raster type. All the images must be in the same coordinate system.\nThis algorithm is derived from the GDAL merge utility .\nDefault menu: Raster \u25ba Miscellaneous",
        "parameters": "INPUT: Input layers. Input raster layers. Type: [raster] [list]\nPCT: Grab pseudocolor table from first layer. The pseudocolor table from the first layer will be usedfor the coloring. Type: [boolean] Default: False \nSEPARATE: Place each input file into a separate band. Place each input file into a separate band. Type: [boolean] Default: False \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 \nOUTPUT: Merged. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nNODATA_INPUT: Input pixel value to treat as \u201cNoData\u201d Optional. Ignores pixels from files being merged in with this pixel value. Type: [number] Default: None \nNODATA_OUTPUT: Assign specified \u201cNoData\u201d value to output Optional. Assigns the specified NoData value to output bands.. Type: [number] Default: None \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Merged. Output raster layer. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef merge_rasters():\n    input_rasters = ['path/to/input1.tif', 'path/to/input2.tif']  # List of input raster paths\n    output_path = 'path/to/output/merged.tif'\n    \n    parameters = {\n        'INPUT': input_rasters,\n        'PCT': False,\n        'SEPARATE': False,\n        'DATA_TYPE': 5,  # 0: Byte, 1: Int16, 2: UInt16, 3: UInt32, 4: Int32, 5: Float32, 6: Float64, 7: CInt16, 8: CInt32, 9: CFloat32, 10: CFloat64, 11: Int8\n        'OUTPUT': output_path,\n        'NODATA_INPUT': None,\n        'NODATA_OUTPUT': None,\n        'OPTIONS': '',\n        'EXTRA': None\n    }\n    \n    result = processing.run(\"\"\"gdal:merge\", parameters)\n\n    merged_layer = QgsRasterLayer(output_path, 'Merged_Raster')\n    QgsProject.instance().addMapLayer(merged_layer)\n\nmerge_rasters()"
    },
    {
        "tool_id": "gdal:nearblack",
        "toolname": "nearblack",
        "tool_description": "Converts nearly black/white borders to black.\nThis algorithm will scan an image and try to set all pixels that are nearly or exactly black, white or one or more custom colors around the collar to black or white. This is often used to \u201cfix up\u201d lossy compressed airphotos so that color pixels can be treated as transparent when mosaicking.\nThis algorithm is derived from the GDAL nearblack utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input Elevation raster layer. Type: [raster]\nNEAR: How far from black (white). Select how far from black, white or custom colors the pixelvalues can be and still considered near black, white or customcolor.. Type: [number] Default: 15 \nWHITE: Search for nearly white pixels instead of nearly black. Search for nearly white (255) pixels instead of nearly blackpixels. Type: [boolean] Default: False \nOUTPUT: Nearblack. Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Nearblack. Output raster. Type: [raster]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef find_nearblack():\n    input_path = 'path/to/your/input_elevation_raster.tif'\n    output_path = 'path/to/your/output_nearblack_raster.tif'\n\n    input_layer = QgsRasterLayer(input_path, 'Elevation')\n\n    parameters = {\n        'INPUT': input_layer,\n        'NEAR': 15,\n        'WHITE': False,  # True\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'EXTRA': '''    }\n\n    result = processing.run('gdal:nearblack', parameters)\n\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Nearblack')\n    QgsProject.instance().addMapLayer(output_layer)\n\nfind_nearblack()"
    },
    {
        "tool_id": "gdal:offsetcurve",
        "toolname": "offsetcurve",
        "tool_description": "Offsets lines by a specified distance. Positive distances will offset lines to the left, and negative distances will offset them to the right.",
        "parameters": "INPUT: Input layer. The input line layer. Type: [vector: line]\nGEOMETRY: Geometry column name. The name of the input layer geometry column to use. Type: [string] Default: \u2018geometry\u2019 \nDISTANCE: Offset distance (left-sided: positive, right-sided: negative). . Type: [number] Default: 10.0 \nOUTPUT: Offset curve. Specify the output line layer. One of: Save to a Temporary File Save to File\u2026. Type: [vector: line] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: Offset curve. The output offset curve layer. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef create_offset_curve():\n    input_path = \"\"\"D:/input_line_layer.shp\"\n    output_path = \"D:/output_curve.shp\"\n    \n                          \n    input_layer = QgsVectorLayer(input_path, \"Input Line Layer\", \"ogr\")\n\n                                                \n    parameters = {\n        'INPUT': input_path,\n        'GEOMETRY': 'geometry',\n        'DISTANCE': 10.0,\n        'OUTPUT': output_path,\n        'OPTIONS': '''    }\n    \n                                    \n    result = processing.run(\"gdal:offsetcurve\", parameters)\n    \n                                           \n    offset_curve_layer = QgsVectorLayer(result['OUTPUT'], 'Offset Curve', 'ogr')\n    QgsProject.instance().addMapLayer(offset_curve_layer)\n\n                      \ncreate_offset_curve()"
    },
    {
        "tool_id": "gdal:ogrinfo",
        "toolname": "ogrinfo",
        "tool_description": "Creates an information file that lists information about an OGR-supported data source. The output will be shown in a \u2018Result\u2019 window and can be written into a HTML-file. The information includes the geometry type, feature count, the spatial extent, the projection information and many more.\nThis algorithm is derived from the GDAL ogrinfo utility .",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSUMMARY_ONLY: Summary output only Optional. . Type: [boolean] Default: True \nNO_METADATA: Suppress metadata info Optional. . Type: [boolean] Default: False \nOUTPUT: Layer information. Specify the output \nHTML file that includes the fileinformation. One of: Save to a Temporary File Save to File\u2026 If no HTML-file is defined the output will be writtento a temporary file. Type: [html] Default: [Save to temporary file] outputs = \nOUTPUT: Layer information. The output HTML-file that includes the file information.. Type: [html]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef layer_information():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_path = 'C:/Users/Output/layer_information.html'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SUMMARY_ONLY': '',               \n        'NO_METADATA': '',                \n        'OUTPUT': output_path\n    }\n    \n                       \n    processing.run(\"gdal:ogrinfo\", parameters)\n\n                      \nlayer_information()"
    },
    {
        "tool_id": "gdal:onesidebuffer",
        "toolname": "onesidebuffer",
        "tool_description": "Creates a buffer on one side (right or left) of the lines in a line vector layer.",
        "parameters": "INPUT: Input layer. The input line layer. Type: [vector: line]\nGEOMETRY: Geometry column name. The name of the input layer geometry column to use. Type: [string] Default: \u2018geometry\u2019 \nDISTANCE: Buffer distance. . Type: [number] Default: 10.0 \nBUFFER_SIDE: Buffer side. One of: 0 \u2014 Right 1 \u2014 Left. Type: [enumeration] Default: 0 \nFIELD: Dissolve by attribute Optional. Field to use for dissolving. Type: [tablefield: any] Default: None \nDISSOLVE: Dissolve all results. If set, the result is dissolved. If no field is set for dissolving, all the buffers aredissolved into one feature.. Type: [boolean] Default: False \nEXPLODE_COLLECTIONS: Produce one feature for each geometry in any kind ofgeometry collection in the source file. . Type: [boolean] Default: False \nOUTPUT: One-sided buffer. Specify the output buffer layer. One of: Save to a Temporary File Save to File\u2026. Type: [vector: polygon] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: One-sided buffer. The output buffer layer. Type: [vector: polygon]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_one_sided_buffer():\n    # Define the input and output paths\n    input_path = 'D:/input_line_layer.shp'\n    output_path = 'D:/output_one_sided_buffer.shp'\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Line Layer\", \"ogr\")\n    \n                                      \n    buffer_params = {\n        'INPUT': input_path,\n        'GEOMETRY': 'geometry',\n        'DISTANCE': 10.0,\n        'BUFFER_SIDE': 0,                                          \n        'FIELD': '',\n        'DISSOLVE': False,\n        'EXPLODE_COLLECTIONS': False,\n        'OUTPUT': output_path,\n        'OPTIONS': '''    }\n    \n                          \n    result = processing.run(\"gdal:onesidebuffer\", buffer_params)\n    \n                                       \n    buffer_layer = QgsVectorLayer(result['OUTPUT'], 'One_sided_buffer', 'ogr')\n    QgsProject.instance().addMapLayer(buffer_layer)\n\n                      \ncreate_one_sided_buffer()"
    },
    {
        "tool_id": "gdal:overviews",
        "toolname": "overviews",
        "tool_description": "To speed up rendering time of raster layers overviews (pyramids) can be created. Overviews are lower resolution copies of the data which QGIS uses depending of the level of zoom.\nThis algorithm is derived from the GDAL addo utility .\nDefault menu: Raster \u25ba Miscellaneous",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nCLEAN: Remove all existing overviews. Removes existing overviews from the raster.By default these are not removed.. Type: [boolean] Default: False \nLEVELS: Overview levels. Defines the number of overview levels calculated by theoriginal resolution of the input raster layer.By default 4 levels will be taken into consideration.. Type: [string] Default: \u20182 4 8 16\u2019 \nRESAMPLING: Resampling method Optional. Calculates the overviews with a defined resampling method.Possible resampling methods are: 0 \u2013 Nearest Neighbour ( nearest ) 1 \u2013 Average ( average ) 2 \u2013 Gaussian ( gauss ) 3 \u2013 Cubic (4x4 kernel) ( cubic ) 4 \u2013 Cubic B-Spline (4x4 kernel) ( cubicspline ) 5 \u2013 Lanczos (6x6 kernel) ( lanczos ) 6 \u2013 Average \nMP ( average_mp ) 7 \u2013 Average in Mag/Phase Space ( average_magphase ) 8 \u2013 Mode ( mode ). Type: [enumeration] Default: 0 \nFORMAT: Overviews format Optional. The overviews can be stored internally, or externally as GTiffor \nERDAS Imagine file.By default the overviews are stored in the output raster.Possible formats methods are: 0 \u2013 Internal (if possible) 1 \u2013 External (GTiff .ovr) 2 \u2013 External \n(ERDAS Imagine .aux). Type: [enumeration] Default: 0 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Pyramidized. Output raster layer with overviews. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef create_overviews():\n    # Define the input and output paths\n    input_raster_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster_with_overviews.tif'\n\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n\n                                   \n    parameters = {\n        'INPUT': input_raster_path,\n        'CLEAN': False,\n        'LEVELS': '2 4 8 16',\n        'RESAMPLING': 0,                                                                                                                                         \n        'FORMAT': 0,                                                                    \n        'EXTRA': '',\n        'OUTPUT': output_path\n    }\n\n                                      \n    result = processing.run(\"gdal:overviews\", parameters)\n\n                                                    \n    output_layer = QgsRasterLayer(output_path, 'Raster with Overviews')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \ncreate_overviews()"
    },
    {
        "tool_id": "gdal:pansharp",
        "toolname": "pansharp",
        "tool_description": "Performs a pan-sharpening operation. It can create a \u201cclassic\u201d output dataset (such as GeoTIFF), or a VRT dataset describing the pan-sharpening operation.\nSee GDAL Pansharpen .",
        "parameters": "SPECTRAL: Spectral dataset. Input (spectral) raster layer. Type: [raster]\nPANCHROMATIC: Panchromatic dataset. Input (panchromatic) raster layer. Type: [raster] \nOUTPUT: Output. Specify the output (sharpened) raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nRESAMPLING: Resampling algorithm. The resampling algorithm to use.Options: 0 \u2014 Nearest Neighbour ( nearest ) 1 \u2014 Bilinear (2x2 kernel) ( bilinear ) 2 \u2014 Cubic (4x4 kernel) ( cubic ) 3 \u2014 Cubic B-Spline (4x4 kernel) ( cubicspline ) 4 \u2014 Lanczos (6x6 kernel) ( lanczos ) 5 \u2014 Average ( average ). Type: [enumeration] Default: 2 \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Output. Output (sharpened) raster layer. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef pansharp_spectral_resample():\n    spectral_path = 'D:/input_spectral.tif'\n    panchromatic_path = 'D:/input_panchromatic.tif'\n    output_path = 'D:/sharpened_output.tif'\n\n    spectral_layer = QgsRasterLayer(spectral_path, \"\"\"Spectral Layer\")\n    panchromatic_layer = QgsRasterLayer(panchromatic_path, \"Panchromatic Layer\")\n    \n    params = {\n        'SPECTRAL': spectral_path,\n        'PANCHROMATIC': panchromatic_path,\n        'OUTPUT': output_path,\n        'RESAMPLING': 2,                                                                                                                    \n        'OPTIONS': '',\n        'EXTRA': '''    }\n    \n    result = processing.run(\"gdal:pansharp\", params)\n    \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Sharpened Output')\n    QgsProject.instance().addMapLayer(output_layer)\n\npansharp_spectral_resample()"
    },
    {
        "tool_id": "gdal:pcttorgb",
        "toolname": "pcttorgb",
        "tool_description": "Converts an 8 bit paletted image to a 24 bit RGB. It will convert a pseudocolor band from the input file to an RGB file of the desired format.\nThis algorithm is derived from the GDAL pct2rgb utility .\nDefault menu: Raster \u25ba Conversion",
        "parameters": "INPUT: Input layer. Input 8 bit raster image. Type: [raster]\nBAND: Band number. If the raster is multiband, choose the band you want toconvert. Type: [raster band] Default: The first band of the input layer \nRGBA: Generate a \nRGBA file. Sets whether the output file should be of type \nRGBA.. Type: [boolean] Default: False \nOUTPUT: \nPCT to \nRGB. Specification of the output file.One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nOUTPUT: \nPCT to \nRGB. 24 bit \nRGB raster image. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef pct_to_rgb(input_raster_path, output_path):\n    # Define the input raster\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n    \n                                                           \n    parameters = {\n        'INPUT': input_raster_path,\n        'BAND': 1,                                               \n        'RGBA': False,                          \n        'OUTPUT': output_path\n    }\n    \n                                   \n    result = processing.run(\"gdal:pcttorgb\", parameters)\n    \n                                  \n    rgb_layer = QgsRasterLayer(result['OUTPUT'], 'RGB_Output')\n    QgsProject.instance().addMapLayer(rgb_layer)\n    \n               \ninput_raster_path = \"D:/Input/8bit_raster.tif\"\noutput_path = \"D:/Output/rgb_output.tif\"\npct_to_rgb(input_raster_path, output_path)"
    },
    {
        "tool_id": "gdal:pointsalonglines",
        "toolname": "pointsalonglines",
        "tool_description": "Generates a point on each line of a line vector layer at a distance from start. The distance is provided as a fraction of the line length.",
        "parameters": "INPUT: Input layer. The input line layer. Type: [vector: line]\nGEOMETRY: Geometry column name. The name of the input layer geometry column to use. Type: [string] Default: \u2018geometry\u2019 \nDISTANCE: Distance from line start represented as a fraction of line length. . Type: [number] Default: 0.5 (middle of the line) \nOUTPUT: Points along lines. Specify the output point layer.One of: Save to a Temporary File Save to File\u2026. Type: [vector: point] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. Additional GDAL creation options.. Type: [string] Default: \u2018\u2019 (no additional options) outputs = \nOUTPUT: Points along line. The output point layer. Type: [vector: point]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef points_along_lines():\n    # Define input and output paths\n    input_path = 'D:/input_line_layer.shp'\n    output_path = 'D:/output_points.shp'\n    \n    # Load the input line layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Line Layer\", \"ogr\")\n    \n                                 \n    parameters = {\n        'INPUT': input_path,\n        'GEOMETRY': 'geometry',                               \n        'DISTANCE': 0.5,                                         \n        'OUTPUT': output_path,                                                        \n        'OPTIONS': ''                                                 \n    }\n    \n                                                         \n    result = processing.run(\"gdal:pointsalonglines\", parameters)\n    \n                                  \n    output_layer = QgsVectorLayer(output_path, 'Points Along Lines', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \npoints_along_lines()"
    },
    {
        "tool_id": "gdal:polygonize",
        "toolname": "polygonize",
        "tool_description": "Creates vector polygons for all connected regions of pixels in the raster sharing a common pixel value. Each polygon is created with an attribute indicating the pixel value of that polygon.\nThis algorithm is derived from the GDAL polygonize utility .\nDefault menu: Raster \u25ba Conversion",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nBAND: Band number. If the raster is multiband, choose the band you want to use. Type: [raster band] Default: The first band of the input layer \nFIELD: Name of the field to create. Specify the field name for the attributes of the connectedregions.. Type: [string] Default: \n\u2018DN\u2019 \nEIGHT_CONNECTEDNESS: Use 8-connectedness. If not set, raster cells must have a common border to beconsidered connected ( 4-connected ).If set, touching raster cells are also considered connected( 8-connected ).. Type: [boolean] Default: False \nOUTPUT: Vectorized. Specification of the output (polygon) vector layer.One of: Save to a Temporary File Save to File\u2026. Type: [vector: polygon] Default: [Save to temporary file] \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Vectorized. Output vector layer. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef polygonize_raster(input_raster_path, output_path):\n    # Load the input raster layer\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n\n                           \n    parameters = {\n        'INPUT': input_raster_path,\n        'BAND': 1,                                                      \n        'FIELD': 'DN',\n        'EIGHT_CONNECTEDNESS': False,\n        'OUTPUT': output_path,\n        'EXTRA': '''    }\n\n                                  \n    result = processing.run(\"gdal:polygonize\", parameters)\n\n                                      \n    polygon_layer = QgsVectorLayer(result['OUTPUT'], 'Polygonized_output', 'ogr')\n    QgsProject.instance().addMapLayer(polygon_layer)\n\n                                   \ninput_raster_path = \"D:/Data/InputRaster.tif\"\noutput_path = \"D:/workspace_directory/Polygonized_output.shp\"\n\n                      \npolygonize_raster(input_raster_path, output_path)"
    },
    {
        "tool_id": "gdal:proximity",
        "toolname": "proximity",
        "tool_description": "Generates a raster proximity map indicating the distance from the center of each pixel to the center of the nearest pixel identified as a target pixel. Target pixels are those in the source raster for which the raster pixel value is in the set of target pixel values.\nThis algorithm is derived from the GDAL proximity utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input Elevation raster layer. Type: [raster]\nBAND: Band number. Band containing the elevation information. Type: [raster band] Default: 1 \nVALUES: \nA list of pixel values in the source image to be considered target pixels Optional. \nA list of target pixel values in the source imageto be considered target pixels.If not specified, all non-zero pixels will beconsidered target pixels.. Type: [string] Default: \u2018\u2019 \nUNITS: Distance units. Indicate whether distances generated should be in pixelor georeferenced coordinates. One of: 0 \u2014 Georeferenced coordinates 1 \u2014 Pixel coordinates. Type: [enumeration] Default: 1 \nMAX_DISTANCE: The maximum distance to be generated Optional. The maximum distance to be generated.The NoData value will be used for pixels beyondthis distance.If a NoData value is not provided, the outputband will be queried for its NoData value.If the output band does not have a NoData value,then the value 65535 will be used.Distance is interpreted according to the value of Distance units .. Type: [number] Default: 0.0 \nREPLACE: Value to be applied to all pixels that are within the maxdist of target pixels Optional. Specify a value to be applied to all pixels thatare closer than the maximum distance from targetpixels (including the target pixels) instead ofa distance value.. Type: [number] Default: 0.0 \nNODATA: NoData value to use for the destination proximity raster Optional. Specify the NoData value to use for the output raster. Type: [number] Default: 0.0 \nOUTPUT: Proximity map. Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Proximity map. Output raster. Type: [raster]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef generate_proximity_map():\n    # Define input and output paths\n    input_path = 'D:/Data/InputElevation.tif' # Input must be a raster ( so if the inputh is vector, you need to rasterize the vector layer)\n    output_path = 'C:/output_path/proximity_map.tif'\n\n    # Load the raster as a raster layer\n    input_layer = QgsRasterLayer(input_path, 'Input Elevation')\n\n    # Run the Proximity algorithm\n    result = processing.run('gdal:proximity', {\n        'INPUT': input_layer, # Input must be a raster ( so if the inputh is vector, you need to rasterize the vector layer)\n        'BAND': 1,\n        'VALUES': '',  # Optional\n        'UNITS': 1,  # 0 \u2014 Georeferenced coordinates, 1 \u2014 Pixel coordinates\n        'MAX_DISTANCE': 0.0,  # Optional\n        'REPLACE': 0.0,  # Optional\n        'NODATA': 0.0,  # Optional\n        'OUTPUT': output_path,\n        'OPTIONS': '',  # Optional\n        'EXTRA': None,  # Optional\n        'DATA_TYPE': 5  # 0 \u2014 Byte, 1 \u2014 Int16, 2 \u2014 UInt16, 3 \u2014 UInt32, 4 \u2014 Int32, 5 \u2014 Float32, 6 \u2014 Float64, 7 \u2014 CInt16, 8 \u2014 CInt32, 9 \u2014 CFloat32, 10 \u2014 CFloat64, 11 \u2014 Int8\n    })\n\n    # Load the proximity map layer to QGIS\n    proximity_layer = QgsRasterLayer(result['OUTPUT'], 'Proximity Map')\n    QgsProject.instance().addMapLayer(proximity_layer)\n\n# Execute the function\ngenerate_proximity_map()"
    },
    {
        "tool_id": "gdal:rastercalculator",
        "toolname": "rastercalculator",
        "tool_description": "Command line raster calculator with numpy syntax. Use any basic arithmetic supported by numpy arrays, such as +, -, *, and / along with logical operators, such as >. Note that all input rasters must have the same dimensions, but no projection checking is performed.\nSee the GDAL Raster Calculator utility docs .",
        "parameters": "INPUT_A: Input layer\nA. First input raster layer (mandatory). Type: [raster] \nBAND_A: Number of raster band for \nA. Band for input layer \nA (mandatory). Type: [raster band] \nINPUT_B: Input layer \nB Optional. Second input raster layer. Type: [raster] Default: None \nBAND_B: Number of raster band for \nB Optional. Band for input layer \nB. Type: [raster band] \nINPUT_C: Input layer \nC Optional. Third input raster layer. Type: [raster] Default: None \nBAND_C: Number of raster band for \nC Optional. Band for input layer \nC. Type: [raster band] \nINPUT_D: Input layer \nD Optional. Fourth input raster layer. Type: [raster] Default: None \nBAND_D: Number of raster band for \nD Optional. Band for input layer \nD. Type: [raster band] \nINPUT_E: Input layer \nE Optional. Fifth input raster layer. Type: [raster] Default: None \nBAND_E: Number of raster band for \nE Optional. Band for input layer \nE. Type: [raster band] \nINPUT_F: Input layer \nF Optional. Sixth input raster layer. Type: [raster] \nBAND_F: Number of raster band for \nF Optional. Band for input layer \nF. Type: [raster band] Default: None \nFORMULA: Calculation in gdalnumeric syntax using +-/* or any numpy array functions (i.e. logical_and()). The calculation formula.Examples: \nA*(A>0) \u2014 outputs the value of the raster \nA ifthe value of \nA is greater than 0.If not, outputs 0. \nA*(A>0 and \nA>B) \u2014 outputs the value of \nA if that valueis bigger than 0 and bigger than the value of B.If not, outputs 0. A*logical_or(A<=177,A>=185) \u2014 outputs the value of Aif \nA <= 177 or \nA >= 185.If not, outputs 0. sqrt(A*A+B*B) \u2014 Outputs the square root of the sum ofthe value of \nA squared and the value of \nB squared.. Type: [string] Default: \u2018\u2019 \nNO_DATA: Set output NoData value Optional. Value to use for NoData. Type: [number] Default: None \nEXTENT_OPT: Handling of extent differences. Determines how to handle rasters with different extents. Only available with GDAL 3.3+. Supported options are: 0 \u2014 Ignore 1 \u2014 Fail 2 \u2014 Union 3 \u2014 Intersect. Type: [enumeration] Default: 0 \nINPUT: Output extent Optional. Custom extent of the output raster. Only available with GDAL 3.3+. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nRTYPE: Output raster type. Defines the data type of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 \nOUTPUT: Calculated. Specify the output (calculated) raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: \u2018\u2019 outputs = \nOUTPUT: Calculated. Output (calculated) raster layer. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef raster_calculator():\n    input_a_path = 'D:/input_a.tif'\n    output_path = 'D:/output_calculated.tif'\n    \n    input_a = QgsRasterLayer(input_a_path, \"\"\"Input A\", \"gdal\")\n    \n    parameters = {\n        'INPUT_A': input_a_path,\n        'BAND_A': 1,\n        'INPUT_B': '',                          \n        'BAND_B': '',            \n        'INPUT_C': '',                          \n        'BAND_C': '',            \n        'INPUT_D': '',                          \n        'BAND_D': '',            \n        'INPUT_E': '',                          \n        'BAND_E': '',            \n        'INPUT_F': '',            \n        'BAND_F': '',                          \n        'FORMULA': 'A > 0',                       \n        'NO_DATA': '',                          \n        'EXTENT_OPT': 0,                                                                                  \n        'INPUT': '',                           \n        'RTYPE': 5,                                                                                                                                                                        \n        'OUTPUT': output_path,\n        'OPTIONS': '',            \n        'EXTRA': ''            \n    }\n    \n                           \n    result = processing.run(\"gdal:rastercalculator\", parameters)\n    \n                              \n    calculated_layer = QgsRasterLayer(result['OUTPUT'], 'Calculated Output', 'gdal')\n    QgsProject.instance().addMapLayer(calculated_layer)\n\n                      \nraster_calculator()"
    },
    {
        "tool_id": "gdal:rasterize",
        "toolname": "rasterize",
        "tool_description": "Converts vector geometries (points, lines and polygons) into a raster image.\nThis algorithm is derived from the GDAL rasterize utility .\nDefault menu: Raster \u25ba Conversion",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nFIELD: Field to use for a burn-in value Optional. Defines the attribute field from which the attributes forthe pixels should be chosen. Type: [tablefield: numeric] \nBURN: \nA fixed value to burn Optional. \nA fixed value to burn into a band for all features.. Type: [number] Default: 0.0 \nUSE_Z: Burn value extracted from the \n\u201cZ\u201d values of the feature Optional. Indicates that a burn value should be extracted from the \n\u201cZ\u201d values of the feature.Works with points and lines (linear interpolation along each segment).For polygons, works properly only if they are flat (same \nZ value for all vertices). Type: [boolean] Default: False \nUNITS: Output raster size units. Units to use when defining the output raster size/resolution.One of: 0 \u2014 Pixels 1 \u2014 Georeferenced units. Type: [enumeration] Default: 0 \nWIDTH: Width/Horizontal resolution. Sets the width (if size units is \u201cPixels\u201d) or horizontalresolution (if size units is \u201cGeoreferenced units\u201d) of theoutput raster. Minimum value: 0.0.. Type: [number] Default: 0.0 \nHEIGHT: Height/Vertical resolution. Sets the height (if size units is \u201cPixels\u201d) or verticalresolution (if size units is \u201cGeoreferenced units\u201d) of theoutput raster.. Type: [number] Default: 0.0 \nEXTENT: Output extent Optional. Extent of the output raster layer.If the extent is not specified, the minimum extent that coversthe selected reference layer(s) will be used. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nNODATA: Assign a specified NoData value to output bands Optional. Assigns a specified NoData value to output bands. Type: [number] Default: 0.0 \nOUTPUT: Rasterized. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026 For Save to File , the output format has to be specified.All GDAL raster formats are supported.For Save to a Temporary File the \nQGIS default raster formatwill be used.. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file. Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 \nINIT: Pre-initialize the output image with value Optional. Pre-initializes the output image bands with this value.Not marked as the NoData value in the output file.The same value is used in all the bands.. Type: [number] \nINVERT: Invert rasterization. Burns the fixed burn value, or the burn value associatedwith the first feature into all parts of the image notinside the provided polygon.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: \u2018\u2019 outputs = \nOUTPUT: Rasterized. Output raster layer. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef rasterize_layer():\n    # Define the input and output paths\n    input_path = 'D:/input_vector_layer.shp'\n    output_path = 'C:/Users/Output/rasterized_output.tif'\n\n    # Load the input vector layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n\n                           \n    parameters = {\n        'INPUT': input_path,\n        'FIELD': '',\n        'BURN': 0.0,\n        'USE_Z': False,\n        'UNITS': 0,                                       \n        'WIDTH': 0.0,\n        'HEIGHT': 0.0,\n        'EXTENT': '',\n        'NODATA': 0.0,\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 5,                                                                                                                                                    \n        'INIT': '',\n        'INVERT': False,\n        'EXTRA': '''    }\n\n                                 \n    result = processing.run(\"gdal:rasterize\", parameters)\n\nrasterize_layer()"
    },
    {
        "tool_id": "gdal:rasterize_over",
        "toolname": "rasterize_over",
        "tool_description": "Overwrites a raster layer with values from a vector layer. New values are assigned based on the attribute value of the overlapping vector feature.\nThis algorithm is derived from the GDAL rasterize utility .",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nINPUT_RASTER: Input raster layer. Input raster layer. Type: [raster] \nFIELD: Field to use for a burn-in value Optional. Defines the attribute field to use to set the pixels values. Type: [tablefield: numeric] \nADD: Add burn in values to existing raster values. If False, pixels are assigned the selected field\u2019s value.If True, the selected field\u2019s value is added to the valueof the input raster layer.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: \u2018\u2019 outputs = \nOUTPUT: Rasterized. The overwritten input raster layer. Type: [raster]\n",
        "code_example": "import processing\n\ndef rasterize_over():\n    input_vector_path = 'D:/input_vector.shp'\n    input_raster_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    \n    parameters = {\n        'INPUT': input_vector_path,  # Input vector layer\n        'INPUT_RASTER': input_raster_path,  # Input raster layer\n        'FIELD': '',  # Field to use for a burn-in value Optional, leave empty\n        'ADD': False,  # Add burn in values to existing raster values. Options: [True, False]\n        'EXTRA': '',  # Additional command-line parameters Optional, leave empty\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"\"\"gdal:rasterize_over\", parameters)\n\nrasterize_over()"
    },
    {
        "tool_id": "gdal:rasterize_over_fixed_value",
        "toolname": "rasterize_over_fixed_value",
        "tool_description": "Overwrites parts of a raster layer with a fixed value. The pixels to overwrite are chosen based on the supplied (overlapping) vector layer.\nThis algorithm is derived from the GDAL rasterize utility .",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nINPUT_RASTER: Input raster layer. Input raster layer. Type: [raster] \nBURN: \nA fixed value to burn. The value to burn. Type: [number] Default: 0.0 \nADD: Add burn in values to existing raster values. If False, pixels are assigned the fixed value.If True, the fixed value is added to the value ofthe input raster layer.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: \u2018\u2019 outputs = \nOUTPUT: Rasterized. The overwritten input raster layer. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\n\ndef rasterize_over_fixed_value():\n    input_vector_path = \"\"\"D:/Data/InputVectorLayer.shp\"    \n    input_raster_path = \"D:/Data/InputRasterLayer.tif\"\n    output_path = \"D:/Output/BurnedRaster.tif\"\n\n                             \n    input_vector = QgsVectorLayer(input_vector_path, \"Input Vector Layer\", \"ogr\")\n    input_raster = QgsRasterLayer(input_raster_path, \"Input Raster Layer\")\n\n                                   \n    parameters = {\n        'INPUT': input_vector_path,\n        'INPUT_RASTER': input_raster_path,\n        'BURN': 0.0,\n        'ADD': False,                          \n        'EXTRA': '',\n        'OUTPUT': output_path\n    }\n    \n                       \n    result = processing.run(\"gdal:rasterize_over_fixed_value\", parameters)\n\n                               \n    burned_raster = QgsRasterLayer(result['OUTPUT'], 'Burned Raster')\n    QgsProject.instance().addMapLayer(burned_raster)\n\nrasterize_over_fixed_value()"
    },
    {
        "tool_id": "gdal:rearrange_bands",
        "toolname": "rearrange_bands",
        "tool_description": "Creates a new raster using selected band(s) from a given raster layer. The algorithm also makes it possible to reorder the bands for the newly-created raster.\nThis algorithm is derived from the GDAL translate utility .",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nBANDS: Selected band(s). Ordered list of the bands to use to create the new raster. Type: [raster band] [list] Default: None \nOUTPUT: Converted. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 outputs = \nOUTPUT: Converted. Output raster layer with rearranged bands.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef rearrange_bands():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"rearranged_bands_raster.tif\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n    \n                           \n    input_layer = QgsRasterLayer(input_path, \"Input Raster\")\n\n                                   \n    parameters = {\n        'INPUT': input_path,\n        'BANDS': [1, 2],                                \n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0                                 \n    }\n\n                                       \n    result = processing.run(\"gdal:rearrange_bands\", parameters)\n\n                               \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Rearranged Bands', 'gdal')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nrearrange_bands()"
    },
    {
        "tool_id": "gdal:retile",
        "toolname": "retile",
        "tool_description": "Retiles a set of input tiles. All the input tiles must be georeferenced in the same coordinate system and have a matching number of bands. Optionally pyramid levels are generated.\nThis algorithm is derived from the GDAL Retile utility .",
        "parameters": "INPUT: Input files. The input raster files. Type: [raster] [list]\nTILE_SIZE_X: Tile width. Width of the tiles in pixels (minimum 0). Type: [number] Default: 256 \nTILE_SIZE_Y: Tile height. Height of the tiles in pixels (minimum 0). Type: [number] Default: 256 \nOVERLAP: Overlap in pixels between consecutive tiles. . Type: [number] Default: 0 \nLEVELS: Number of pyramid levels to build. Minimum: 0. Type: [number] Default: 1 \nOUTPUT: Output directory. Specify the output folder for the tiles.One of: Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Save to temporary folder] \nOUTPUT_CSV: \nCSV file containing the tile(s) georeferencing information. Specify the output file for the tiles. One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [file] Default: [Skip output] \nSOURCE_CRS: Source coordinate reference system Optional. . Type: [crs] Default: None \nRESAMPLING: Resampling method. The resampling algorithm to use.Options: 0 \u2014 Nearest Neighbour ( nearest ) 1 \u2014 Bilinear (2x2 kernel) ( bilinear ) 2 \u2014 Cubic (4x4 kernel) ( cubic ) 3 \u2014 Cubic B-Spline (4x4 kernel) ( cubicspline ) 4 \u2014 Lanczos (6x6 kernel) ( lanczos ). Type: [enumeration] Default: 0 \nDELIMITER: Column delimiter used in the \nCSV file Optional. Delimiter to use in the \nCSV file containing the tile(s)georeferencing information. Type: [string] Default: \u2018;\u2019 \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 4 \u2014 Int32 (Thirty two bit signed integer (qint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 \nONLY_PYRAMIDS: Build only the pyramids. . Type: [boolean] Default: False \nDIR_FOR_ROW: Use separate directory for each tile row. . Type: [boolean] Default: False outputs = \nOUTPUT: Output directory. The output folder for the tiles.. Type: [folder] \nOUTPUT_CSV: \nCSV file containing the tile(s) georeferencing information. The \nCSV file with georeferencing information for the tiles.. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef re_tile_layers():\n    # Define the input and output paths\n    input_files = ['path/to/input1.tif', 'path/to/input2.tif']\n    output_path = '/path/to/output/directory'\n\n    # Set retile processing parameters\n    params = {\n        'INPUT': input_files,\n        'TILE_SIZE_X': 256,\n        'TILE_SIZE_Y': 256,\n        'OVERLAP': 0,\n        'LEVELS': 1,\n        'OUTPUT': output_path,\n        'OUTPUT_CSV': '',\n        'SOURCE_CRS': '',\n        'RESAMPLING': 0,  # Options: [0:'nearest', 1:'bilinear', 2:'cubic', 3:'cubicspline', 4:'lanczos']\n        'DELIMITER': ';',\n        'OPTIONS': '',\n        'EXTRA': '',\n        'DATA_TYPE': 5,  # Options: [0:'Byte', 1:'Int16', 2:'UInt16', 3:'UInt32', 4:'Int32', 5:'Float32', 6:'Float64', 7:'CInt16', 8:'CInt32', 9:'CFloat32', 10:'CFloat64', 11:'Int8']\n        'ONLY_PYRAMIDS': False,\n        'DIR_FOR_ROW': False\n    }\n\n    # Run the retile algorithm\n    processing.run(\"\"\"gdal:retile\", params)\n\n                      \nre_tile_layers()"
    },
    {
        "tool_id": "gdal:rgbtopct",
        "toolname": "rgbtopct",
        "tool_description": "Converts a 24 bit RGB image into a 8 bit paletted. Computes an optimal pseudo-color table for the given RGB-image using a median cut algorithm on a downsampled RGB histogram. Then it converts the image into a pseudo-colored image using the color table. This conversion utilizes Floyd-Steinberg dithering (error diffusion) to maximize output image visual quality.\nIf you want to classify a raster map and want to reduce the number of classes it can be helpful to downsample your image with this algorithm before.\nThis algorithm is derived from the GDAL rgb2pct utility .\nDefault menu: Raster \u25ba Conversion",
        "parameters": "INPUT: Input layer. Input\n(RGB) raster layer. Type: [raster] \nNCOLORS: Number of colors. The number of colors the resulting image will contain.A value from 2-256 is possible.. Type: [number] Default: 2 \nOUTPUT: \nRGB to \nPCT. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] outputs = \nOUTPUT: \nRGB to \nPCT. Output raster layer.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer\n\ndef rgb_to_pct():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'C:/Users/Output/RGB_to_PCT.tif'\n    \n    # Load the input layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input RGB Raster\")\n    \n                                          \n    parameters = {\n        'INPUT': input_path,\n        'NCOLORS': 2,                                  \n        'OUTPUT': output_path\n    }\n    \n                              \n    result = processing.run(\"gdal:rgbtopct\", parameters)\n    \n                                                                           \n\n                      \nrgb_to_pct()"
    },
    {
        "tool_id": "gdal:roughness",
        "toolname": "roughness",
        "tool_description": "Outputs a single-band raster with values computed from the elevation. Roughness is the degree of irregularity of the surface. It\u2019s calculated by the largest inter-cell difference of a central pixel and its surrounding cell. The determination of the roughness plays a role in the analysis of terrain elevation data, it\u2019s useful for calculations of the river morphology, in climatology and physical geography in general.\nThis algorithm is derived from the GDAL DEM utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input elevation raster layer. Type: [raster]\nBAND: Band number. The number of the band to use as elevation. Type: [raster band] Default: 1 \nCOMPUTE_EDGES: Compute edges. Generates edges from the elevation raster. Type: [boolean] Default: False \nOUTPUT: Roughness. Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 outputs = \nOUTPUT: Roughness. Single-band output roughness raster.The value -9999 is used as NoData value.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef compute_roughness(input_raster_path, output_path):\n    # Load the raster layer\n    input_layer = QgsRasterLayer(input_raster_path, \"\"\"Input Elevation\")\n\n                                                     \n    parameters = {\n        'INPUT': input_raster_path,\n        'BAND': 1,                            \n        'COMPUTE_EDGES': False,                    \n        'OPTIONS': '',\n        'OUTPUT': output_path\n    }\n\n                                     \n    result = processing.run(\"gdal:roughness\", parameters)\n\n                                      \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Roughness')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \ninput_raster_path = \"D:/Data/ElevationData.tif\"                                  \noutput_path = 'D:/workspace_directory/output_roughness.tif'\ncompute_roughness(input_raster_path, output_path)"
    },
    {
        "tool_id": "gdal:sieve",
        "toolname": "sieve",
        "tool_description": "Removes raster polygons smaller than a provided threshold size (in pixels) and replaces them with the pixel value of the largest neighbour polygon. It is useful if you have a large amount of small areas on your raster map.\nThis algorithm is derived from the GDAL sieve utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input elevation raster layer. Type: [raster]\nTHRESHOLD: Threshold. Only raster polygons smaller than this sizewill be removed. Type: [number] Default: 10 \nEIGHT_CONNECTEDNESS: Use 8-connectedness. Use eight connectedness instead of four connectedness. Type: [boolean] Default: False \nNO_MASK: Do not use the default validity mask for the input band. . Type: [boolean] Default: False \nMASK_LAYER: Validity mask Optional. Validity mask to use instead of the default. Type: [raster] \nOUTPUT: Sieved. Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Sieved. Output raster layer.. Type: [raster]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef sieve_raster():\n    input_path = 'D:/Data/elevation.tif'\n    output_path = 'C:/output_path/sieved_raster.tif'\n    mask_layer_path = 'D:/Data/mask_layer.tif'\n    \n    input_layer = QgsRasterLayer(input_path, 'Elevation Raster')\n    mask_layer = QgsRasterLayer(mask_layer_path, 'Mask Layer')\n\n    parameters = {\n        'INPUT': input_layer,\n        'THRESHOLD': 10,\n        'EIGHT_CONNECTEDNESS': False,\n        'NO_MASK': False,\n        'MASK_LAYER': mask_layer,\n        'OUTPUT': output_path,\n        'EXTRA': None  # Optional extra command line options\n    }\n\n    result = processing.run('gdal:sieve', parameters)\n    \n    sieved_layer = QgsRasterLayer(result['OUTPUT'], 'Sieved Raster')\n    QgsProject.instance().addMapLayer(sieved_layer)\n\nsieve_raster()"
    },
    {
        "tool_id": "gdal:slope",
        "toolname": "slope",
        "tool_description": "Generates a slope map from any GDAL-supported elevation raster. Slope is the angle of inclination to the horizontal. You have the option of specifying the type of slope value you want: degrees or percent slope.\nThis algorithm is derived from the GDAL DEM utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input Elevation raster layer. Type: [raster]\nBAND: Band number. Band containing the elevation information. Type: [raster band] Default: 1 \nSCALE: Ratio of vertical units to horizontal. The ratio of vertical units to horizontal units. Type: [number] Default: 1.0 \nAS_PERCENT: Slope expressed as percent (instead of degrees). Express slope as percent instead of degrees. Type: [boolean] Default: False \nCOMPUTE_EDGES: Compute edges. Generates edges from the elevation raster. Type: [boolean] Default: False \nZEVENBERGEN: Use Zevenbergen&Thorne formula (instead of the Horn\u2019s one). Activates Zevenbergen&Thorne formula for smooth landscapes. Type: [boolean] Default: False \nOUTPUT: Slope. Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Slope. Output raster. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef compute_slope():\n    input_path = 'D:/Data/Elevation.tif'\n    output_path = 'C:/output_path/slope.tif'\n\n    input_layer = QgsRasterLayer(input_path, 'Elevation')\n\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,  # Band index (1-based)\n        'SCALE': 1.0,\n        'AS_PERCENT': False,\n        'COMPUTE_EDGES': False,\n        'ZEVENBERGEN': False,\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'EXTRA': '''    }\n\n    result = processing.run('gdal:slope', parameters)\n\n    slope_layer = QgsRasterLayer(result['OUTPUT'], 'Slope')\n    QgsProject.instance().addMapLayer(slope_layer)\n\ncompute_slope()"
    },
    {
        "tool_id": "gdal:tileindex",
        "toolname": "tileindex",
        "tool_description": "Builds a vector layer with a record for each input raster file, an attribute containing the filename, and a polygon geometry outlining the raster. This output is suitable for use with MapServer as a raster tileindex.\nThis algorithm is derived from the GDAL Tile Index utility .\nDefault menu: Raster \u25ba Miscellaneous",
        "parameters": "LAYERS: Input files. The input raster files. Can be multiple files.. Type: [raster] [list]\nPATH_FIELD_NAME Optional: Field name to hold the file path to the indexed rasters. The output field name to hold the file path/location to theindexed rasters.. Type: [string] Default: \u2018location\u2019 \nABSOLUTE_PATH: Store absolute path to the indexed rasters. Set whether the absolute path to the raster files isstored in the tile index file.By default the raster filenames will be put in thefile exactly as they are specified in the command.. Type: [boolean] Default: False \nPROJ_DIFFERENCE: Skip files with different projection reference. Only files with same projection as files already insertedin the tile index will be inserted.Default does not check projection and accepts all inputs.. Type: [boolean] Default: False \nOUTPUT: Tile index. Specify the polygon vector layer to write the index to.One of: Save to a Temporary File Save to File\u2026. Type: [vector: polygon] Default: [Save to temporary file] \nTARGET_CRS: Transform geometries to the given \nCRS Optional. Geometries of input files will be transformed to the specifiedtarget coordinate reference system.Default creates simple rectangular polygons in the samecoordinate reference system as the input rasters.. Type: [crs] \nCRS_FIELD_NAME: The name of the field to store the \nSRS of each tile Optional. The name of the field to store the \nSRS of each tile. Type: [string] \nCRS_FORMAT: The format in which the \nCRS of each tile must be written. Format for the \nCRS. One of: 0 \u2013 Auto ( \nAUTO ) 1 \u2013 Well-known text ( \nWKT ) 2 \u2013 \nEPSG ( \nEPSG ) 3 \u2013 Proj.4 ( \nPROJ ). Type: [enumeration] Default: 0 outputs = \nOUTPUT: Tile index. The polygon vector layer with the tile index.. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef create_tile_index():\n    input_rasters = ['D:/raster1.tif', 'D:/raster2.tif']\n    output_path = 'D:/tile_index.shp'\n    \n    parameters = {\n        'LAYERS': input_rasters,\n        'PATH_FIELD_NAME': '',  # Default: 'location'\n        'ABSOLUTE_PATH': False,\n        'PROJ_DIFFERENCE': False,\n        'OUTPUT': output_path,\n        'TARGET_CRS': '',\n        'CRS_FIELD_NAME': '',\n        'CRS_FORMAT': 0  # 0: 'AUTO', 1: 'WKT', 2: 'EPSG', 3: 'PROJ'\n    }\n    \n    result = processing.run(\"\"\"gdal:tileindex\", parameters)\n    tile_index_layer = QgsVectorLayer(result['OUTPUT'], 'Tile Index', 'ogr')\n    QgsProject.instance().addMapLayer(tile_index_layer)\n\ncreate_tile_index()"
    },
    {
        "tool_id": "gdal:tpitopographicpositionindex",
        "toolname": "tpitopographicpositionindex",
        "tool_description": "Outputs a single-band raster with values computed from the elevation. TPI stands for Topographic Position Index, which is defined as the difference between a central pixel and the mean of its surrounding cells.\nThis algorithm is derived from the GDAL DEM utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input elevation raster layer. Type: [raster]\nBAND: Band number. The number of the band to use for elevation values. Type: [raster band] Default: 1 \nCOMPUTE_EDGES: Compute edges. Generates edges from the elevation raster. Type: [boolean] Default: False \nOUTPUT: Terrain Ruggedness Index. Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 outputs = \nOUTPUT: Terrain Ruggedness Index. Output raster.. Type: [raster]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef calculate_terrain_ruggedness_index():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/ElevationData.tif'\n    output_path = 'C:/output_path/terrain_ruggedness_index.tif'\n  \n\n    # Load the raster file as a raster layer\n    input_layer = QgsRasterLayer(input_layer_path, 'Elevation Data')\n\n    # Run the Terrain Ruggedness Index algorithm\n    result = processing.run('gdal:tpitopographicpositionindex', {\n        'INPUT': input_layer_path,\n        'BAND': 1,  # Specify the band number (default is 1)\n        'COMPUTE_EDGES': False,  # Generate edges or not (default is False)\n        'OUTPUT': output_path,\n        'OPTIONS': ''  # Additional options (default is empty)\n    })\n\n    # Load the result layer to QGIS\n    ruggedness_layer = QgsRasterLayer(result['OUTPUT'], 'Terrain Ruggedness Index')\n    QgsProject.instance().addMapLayer(ruggedness_layer)\n\n# Execute the function\ncalculate_terrain_ruggedness_index()"
    },
    {
        "tool_id": "gdal:translate",
        "toolname": "translate",
        "tool_description": "Converts raster data between different formats.\nThis algorithm is derived from the GDAL translate utility .\nDefault menu: Raster \u25ba Conversion",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nTARGET_CRS: Override the projection of the output file Optional. Specify a projection for the output file. Type: [crs] \nNODATA: Assign a specified NoData value to output bands Optional. Defines the value to use for NoData in the output raster. Type: [number] Default: Not set \nCOPY_SUBDATASETS: Copy all subdatasets of this file to individual output files. Create individual files for subdatasets. Type: [boolean] Default: False \nOUTPUT: Converted. Specification of the output (translated) raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None \nDATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 outputs = \nOUTPUT: Converted. Output (translated) raster layer.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef translate_raster():\n    input_layer_path = '/path/to/input_raster.tif'\n    output_path = '/path/to/output_raster.tif'\n    \n    input_layer = QgsRasterLayer(input_layer_path, \"\"\"Input Raster Layer\")\n    \n    parameters = {\n        'INPUT': input_layer_path,\n        'TARGET_CRS': '',                               \n        'NODATA': '',                                 \n        'COPY_SUBDATASETS': '',                 \n        'OUTPUT': output_path,\n        'OPTIONS': '',                                                      \n        'EXTRA': '',                                        \n        'DATA_TYPE': ''                                                        \n    }\n    \n    result = processing.run(\"gdal:translate\", parameters)\n    \n    output_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Converted Raster', 'gdal')\n    QgsProject.instance().addMapLayer(output_raster_layer)\n\ntranslate_raster()"
    },
    {
        "tool_id": "gdal:triterrainruggednessindex",
        "toolname": "triterrainruggednessindex",
        "tool_description": "Outputs a single-band raster with values computed from the elevation. TRI stands for Terrain Ruggedness Index, which is defined as the mean difference between a central pixel and its surrounding cells.\nThis algorithm is derived from the GDAL DEM utility .\nDefault menu: Raster \u25ba Analysis",
        "parameters": "INPUT: Input layer. Input elevation raster layer. Type: [raster]\nBAND: Band number. The number of the band to use as elevation. Type: [raster band] Default: 1 \nCOMPUTE_EDGES: Compute edges. Generates edges from the elevation raster. Type: [boolean] Default: False \nOUTPUT: Terrain Ruggedness Index. Specify the output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 outputs = \nOUTPUT: Terrain Ruggedness Index. Output ruggedness raster.The value -9999 is used as NoData value.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef calculate_terrain_ruggedness_index():\n    input_layer_path = \"\"\"D:/Data/Elevation.tif\"\n    output_path = \"D:/workspace_directory/output_terrain_ruggedness_index.tif\"\n    \n    input_layer = QgsRasterLayer(input_layer_path, \"Input Elevation Layer\")\n    \n    parameters = {\n        'INPUT': input_layer_path,                                \n        'BAND': 1,                           \n        'COMPUTE_EDGES': False,                                 \n        'OUTPUT': output_path,                                                             \n        'OPTIONS': ''                                            \n    }\n    \n    result = processing.run(\"gdal:triterrainruggednessindex\", parameters)\n    \n    terrain_ruggedness_index_layer = QgsRasterLayer(result['OUTPUT'], 'Terrain Ruggedness Index')\n    QgsProject.instance().addMapLayer(terrain_ruggedness_index_layer)\n\ncalculate_terrain_ruggedness_index()"
    },
    {
        "tool_id": "gdal:viewshed",
        "toolname": "viewshed",
        "tool_description": "Calculates a viewshed raster from an input raster DEM using method defined in Wang2000 for a user defined point.",
        "parameters": "INPUT: Input layer. Input elevation raster layer. Type: [raster]\nBAND: Band number. The number of the band to use as elevation. Type: [raster band] Default: 1 \nOBSERVER: Observer location. The location of the observer. Type: [point] \nOBSERVER_HEIGHT: Observer height. The altitude of the observer, in the \nDEM units. Type: [number] Default: 1.0 \nTARGET_HEIGHT: Target height. The altitude of the target element, in the \nDEM units. Type: [number] Default: 1.0 \nMAX_DISTANCE: Maximum distance from observer to compute visibility. Maximum distance from observer to compute visibility,in the \nDEM units. Type: [number] Default: 100.0 \nOUTPUT: Output. Output raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nEXTRA: Additional command-line parameters. Add extra GDAL command line options. Type: [string] Default: None outputs = \nOUTPUT: Output. The raster layer displaying the viewshed.. Type: [raster]\n",
        "code_example": "from qgis.core import QgsProject, QgsRasterLayer, QgsPointXY\nimport processing\n\ndef compute_viewshed():\n    # Define input and output paths\n    input_raster_path = 'D:/input_elevation.tif'\n    output_path = 'D:/output_viewshed.tif'\n    \n    # Load the input raster layer\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Elevation Raster\")\n\n                              \n    observer_location = QgsPointXY(500000, 2000000)                       \n    \n                               \n    parameters = {\n        'INPUT': input_raster_path,\n        'BAND': 1,              \n        'OBSERVER': observer_location,\n        'OBSERVER_HEIGHT': 1.0,                \n        'TARGET_HEIGHT': 1.0,                \n        'MAX_DISTANCE': 100.0,                  \n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'EXTRA': None\n    }\n    \n                               \n    result = processing.run(\"gdal:viewshed\", parameters)\n    \n                                       \n    viewshed_layer = QgsRasterLayer(result['OUTPUT'], 'Viewshed Output')\n    QgsProject.instance().addMapLayer(viewshed_layer)\n\n                      \ncompute_viewshed()"
    },
    {
        "tool_id": "gdal:warpreproject",
        "toolname": "warpreproject",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:g.extension.list",
        "toolname": "g.extension.list",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:g.extension.manage",
        "toolname": "g.extension.manage",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.albedo",
        "toolname": "i.albedo",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.aster.toar",
        "toolname": "i.aster.toar",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.atcorr",
        "toolname": "i.atcorr",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.biomass",
        "toolname": "i.biomass",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.cca",
        "toolname": "i.cca",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.cluster",
        "toolname": "i.cluster",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.colors.enhance",
        "toolname": "i.colors.enhance",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.eb.eta",
        "toolname": "i.eb.eta",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.eb.evapfr",
        "toolname": "i.eb.evapfr",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.eb.hsebal01.coords",
        "toolname": "i.eb.hsebal01.coords",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.eb.netrad",
        "toolname": "i.eb.netrad",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.eb.soilheatflux",
        "toolname": "i.eb.soilheatflux",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.emissivity",
        "toolname": "i.emissivity",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.evapo.mh",
        "toolname": "i.evapo.mh",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.evapo.pm",
        "toolname": "i.evapo.pm",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.evapo.pt",
        "toolname": "i.evapo.pt",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.evapo.time",
        "toolname": "i.evapo.time",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.fft",
        "toolname": "i.fft",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.gensig",
        "toolname": "i.gensig",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.gensigset",
        "toolname": "i.gensigset",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.group",
        "toolname": "i.group",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.his.rgb",
        "toolname": "i.his.rgb",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.ifft",
        "toolname": "i.ifft",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.image.mosaic",
        "toolname": "i.image.mosaic",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.in.spotvgt",
        "toolname": "i.in.spotvgt",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.landsat.acca",
        "toolname": "i.landsat.acca",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.landsat.toar",
        "toolname": "i.landsat.toar",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.maxlik",
        "toolname": "i.maxlik",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.modis.qc",
        "toolname": "i.modis.qc",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.oif",
        "toolname": "i.oif",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.pansharpen",
        "toolname": "i.pansharpen",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.pca",
        "toolname": "i.pca",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.rgb.his",
        "toolname": "i.rgb.his",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.segment",
        "toolname": "i.segment",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.smap",
        "toolname": "i.smap",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.tasscap",
        "toolname": "i.tasscap",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.topo.coor.ill",
        "toolname": "i.topo.coor.ill",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.topo.corr",
        "toolname": "i.topo.corr",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.vi",
        "toolname": "i.vi",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:i.zc",
        "toolname": "i.zc",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:m.cogo",
        "toolname": "m.cogo",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:nviz",
        "toolname": "nviz",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.basins.fill",
        "toolname": "r.basins.fill",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.blend.combine",
        "toolname": "r.blend.combine",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.blend.rgb",
        "toolname": "r.blend.rgb",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.buffer",
        "toolname": "r.buffer",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.buffer.lowmem",
        "toolname": "r.buffer.lowmem",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.carve",
        "toolname": "r.carve",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.category",
        "toolname": "r.category",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.category.out",
        "toolname": "r.category.out",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.circle",
        "toolname": "r.circle",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.clump",
        "toolname": "r.clump",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.coin",
        "toolname": "r.coin",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.colors",
        "toolname": "r.colors",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.colors.out",
        "toolname": "r.colors.out",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.colors.stddev",
        "toolname": "r.colors.stddev",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.composite",
        "toolname": "r.composite",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.contour",
        "toolname": "r.contour",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.cost",
        "toolname": "r.cost",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.covar",
        "toolname": "r.covar",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.cross",
        "toolname": "r.cross",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.describe",
        "toolname": "r.describe",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.distance",
        "toolname": "r.distance",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.drain",
        "toolname": "r.drain",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.fill.dir",
        "toolname": "r.fill.dir",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.fill.stats",
        "toolname": "r.fill.stats",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.fillnulls",
        "toolname": "r.fillnulls",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.flow",
        "toolname": "r.flow",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.geomorphon",
        "toolname": "r.geomorphon",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.grow",
        "toolname": "r.grow",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.grow.distance",
        "toolname": "r.grow.distance",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.gwflow",
        "toolname": "r.gwflow",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.his",
        "toolname": "r.his",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.horizon",
        "toolname": "r.horizon",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.horizon.height",
        "toolname": "r.horizon.height",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.in.lidar",
        "toolname": "r.in.lidar",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.in.lidar.info",
        "toolname": "r.in.lidar.info",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.info",
        "toolname": "r.info",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.kappa",
        "toolname": "r.kappa",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.lake",
        "toolname": "r.lake",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.latlong",
        "toolname": "r.latlong",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.cwed",
        "toolname": "r.li.cwed",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.cwed.ascii",
        "toolname": "r.li.cwed.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.dominance",
        "toolname": "r.li.dominance",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.dominance.ascii",
        "toolname": "r.li.dominance.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.edgedensity",
        "toolname": "r.li.edgedensity",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.edgedensity.ascii",
        "toolname": "r.li.edgedensity.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.mpa",
        "toolname": "r.li.mpa",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.mpa.ascii",
        "toolname": "r.li.mpa.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.mps",
        "toolname": "r.li.mps",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.mps.ascii",
        "toolname": "r.li.mps.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.padcv",
        "toolname": "r.li.padcv",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.padcv.ascii",
        "toolname": "r.li.padcv.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.padrange",
        "toolname": "r.li.padrange",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.padrange.ascii",
        "toolname": "r.li.padrange.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.padsd",
        "toolname": "r.li.padsd",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.padsd.ascii",
        "toolname": "r.li.padsd.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.patchdensity",
        "toolname": "r.li.patchdensity",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.patchdensity.ascii",
        "toolname": "r.li.patchdensity.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.patchnum",
        "toolname": "r.li.patchnum",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.patchnum.ascii",
        "toolname": "r.li.patchnum.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.pielou",
        "toolname": "r.li.pielou",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.pielou.ascii",
        "toolname": "r.li.pielou.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.renyi",
        "toolname": "r.li.renyi",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.renyi.ascii",
        "toolname": "r.li.renyi.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.richness",
        "toolname": "r.li.richness",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.richness.ascii",
        "toolname": "r.li.richness.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.shannon",
        "toolname": "r.li.shannon",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.shannon.ascii",
        "toolname": "r.li.shannon.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.shape",
        "toolname": "r.li.shape",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.shape.ascii",
        "toolname": "r.li.shape.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.simpson",
        "toolname": "r.li.simpson",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.li.simpson.ascii",
        "toolname": "r.li.simpson.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.mapcalc.simple",
        "toolname": "r.mapcalc.simple",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.mask.rast",
        "toolname": "r.mask.rast",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.mask.vect",
        "toolname": "r.mask.vect",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.mfilter",
        "toolname": "r.mfilter",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.mode",
        "toolname": "r.mode",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.neighbors",
        "toolname": "r.neighbors",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.null",
        "toolname": "r.null",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.ascii",
        "toolname": "r.out.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.gridatb",
        "toolname": "r.out.gridatb",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.mat",
        "toolname": "r.out.mat",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.mpeg",
        "toolname": "r.out.mpeg",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.png",
        "toolname": "r.out.png",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.pov",
        "toolname": "r.out.pov",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.ppm",
        "toolname": "r.out.ppm",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.ppm3",
        "toolname": "r.out.ppm3",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.vrml",
        "toolname": "r.out.vrml",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.vtk",
        "toolname": "r.out.vtk",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.out.xyz",
        "toolname": "r.out.xyz",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.param.scale",
        "toolname": "r.param.scale",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.patch",
        "toolname": "r.patch",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.path",
        "toolname": "r.path",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.path.coordinate.txt",
        "toolname": "r.path.coordinate.txt",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.plane",
        "toolname": "r.plane",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.profile",
        "toolname": "r.profile",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.proj",
        "toolname": "r.proj",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.quant",
        "toolname": "r.quant",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.quantile",
        "toolname": "r.quantile",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.quantile.plain",
        "toolname": "r.quantile.plain",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.random",
        "toolname": "r.random",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.random.cells",
        "toolname": "r.random.cells",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.random.surface",
        "toolname": "r.random.surface",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.reclass",
        "toolname": "r.reclass",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.reclass.area",
        "toolname": "r.reclass.area",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.recode",
        "toolname": "r.recode",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.regression.line",
        "toolname": "r.regression.line",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.regression.multi",
        "toolname": "r.regression.multi",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.relief",
        "toolname": "r.relief",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.relief.scaling",
        "toolname": "r.relief.scaling",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.report",
        "toolname": "r.report",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.resamp.bspline",
        "toolname": "r.resamp.bspline",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.resamp.filter",
        "toolname": "r.resamp.filter",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.resamp.interp",
        "toolname": "r.resamp.interp",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.resamp.rst",
        "toolname": "r.resamp.rst",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.resamp.stats",
        "toolname": "r.resamp.stats",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.resample",
        "toolname": "r.resample",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.rescale",
        "toolname": "r.rescale",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.rescale.eq",
        "toolname": "r.rescale.eq",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.rgb",
        "toolname": "r.rgb",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.ros",
        "toolname": "r.ros",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.series",
        "toolname": "r.series",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.series.accumulate",
        "toolname": "r.series.accumulate",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.series.interp",
        "toolname": "r.series.interp",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.shade",
        "toolname": "r.shade",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.sim.sediment",
        "toolname": "r.sim.sediment",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.sim.water",
        "toolname": "r.sim.water",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.slope.aspect",
        "toolname": "r.slope.aspect",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.solute.transport",
        "toolname": "r.solute.transport",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.spread",
        "toolname": "r.spread",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.spreadpath",
        "toolname": "r.spreadpath",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.statistics",
        "toolname": "r.statistics",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.stats",
        "toolname": "r.stats",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.stats.quantile.out",
        "toolname": "r.stats.quantile.out",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.stats.quantile.rast",
        "toolname": "r.stats.quantile.rast",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.stats.zonal",
        "toolname": "r.stats.zonal",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.stream.extract",
        "toolname": "r.stream.extract",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.sun.incidout",
        "toolname": "r.sun.incidout",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.sun.insoltime",
        "toolname": "r.sun.insoltime",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.sunhours",
        "toolname": "r.sunhours",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.sunmask.datetime",
        "toolname": "r.sunmask.datetime",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.sunmask.position",
        "toolname": "r.sunmask.position",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.surf.area",
        "toolname": "r.surf.area",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.surf.contour",
        "toolname": "r.surf.contour",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.surf.fractal",
        "toolname": "r.surf.fractal",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.surf.gauss",
        "toolname": "r.surf.gauss",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.surf.idw",
        "toolname": "r.surf.idw",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.surf.random",
        "toolname": "r.surf.random",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.terraflow",
        "toolname": "r.terraflow",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.texture",
        "toolname": "r.texture",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.thin",
        "toolname": "r.thin",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.tile",
        "toolname": "r.tile",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.tileset",
        "toolname": "r.tileset",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.to.vect",
        "toolname": "r.to.vect",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.topidx",
        "toolname": "r.topidx",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.topmodel",
        "toolname": "r.topmodel",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.topmodel.topidxstats",
        "toolname": "r.topmodel.topidxstats",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.transect",
        "toolname": "r.transect",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.univar",
        "toolname": "r.univar",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.uslek",
        "toolname": "r.uslek",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.usler",
        "toolname": "r.usler",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.viewshed",
        "toolname": "r.viewshed",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.volume",
        "toolname": "r.volume",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.walk.coords",
        "toolname": "r.walk.coords",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.walk.points",
        "toolname": "r.walk.points",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.walk.rast",
        "toolname": "r.walk.rast",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.water.outlet",
        "toolname": "r.water.outlet",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.watershed",
        "toolname": "r.watershed",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.what.color",
        "toolname": "r.what.color",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.what.coords",
        "toolname": "r.what.coords",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:r.what.points",
        "toolname": "r.what.points",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.buffer",
        "toolname": "v.buffer",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.build.check",
        "toolname": "v.build.check",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.build.polylines",
        "toolname": "v.build.polylines",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.class",
        "toolname": "v.class",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.clean",
        "toolname": "v.clean",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.cluster",
        "toolname": "v.cluster",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.db.select",
        "toolname": "v.db.select",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.decimate",
        "toolname": "v.decimate",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.delaunay",
        "toolname": "v.delaunay",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.dissolve",
        "toolname": "v.dissolve",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.distance",
        "toolname": "v.distance",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.drape",
        "toolname": "v.drape",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.edit",
        "toolname": "v.edit",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.extract",
        "toolname": "v.extract",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.extrude",
        "toolname": "v.extrude",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.generalize",
        "toolname": "v.generalize",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.hull",
        "toolname": "v.hull",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.ascii",
        "toolname": "v.in.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.dxf",
        "toolname": "v.in.dxf",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.e00",
        "toolname": "v.in.e00",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.geonames",
        "toolname": "v.in.geonames",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.lidar",
        "toolname": "v.in.lidar",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.lines",
        "toolname": "v.in.lines",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.mapgen",
        "toolname": "v.in.mapgen",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.in.wfs",
        "toolname": "v.in.wfs",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.info",
        "toolname": "v.info",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.kcv",
        "toolname": "v.kcv",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.kernel.rast",
        "toolname": "v.kernel.rast",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.kernel.vector",
        "toolname": "v.kernel.vector",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.lidar.correction",
        "toolname": "v.lidar.correction",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.lidar.edgedetection",
        "toolname": "v.lidar.edgedetection",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.lidar.growing",
        "toolname": "v.lidar.growing",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.mkgrid",
        "toolname": "v.mkgrid",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.neighbors",
        "toolname": "v.neighbors",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net",
        "toolname": "v.net",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.alloc",
        "toolname": "v.net.alloc",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.allpairs",
        "toolname": "v.net.allpairs",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.bridge",
        "toolname": "v.net.bridge",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.centrality",
        "toolname": "v.net.centrality",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.components",
        "toolname": "v.net.components",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.connectivity",
        "toolname": "v.net.connectivity",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.distance",
        "toolname": "v.net.distance",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.flow",
        "toolname": "v.net.flow",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.iso",
        "toolname": "v.net.iso",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.nreport",
        "toolname": "v.net.nreport",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.path",
        "toolname": "v.net.path",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.report",
        "toolname": "v.net.report",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.salesman",
        "toolname": "v.net.salesman",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.spanningtree",
        "toolname": "v.net.spanningtree",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.steiner",
        "toolname": "v.net.steiner",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.timetable",
        "toolname": "v.net.timetable",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.net.visibility",
        "toolname": "v.net.visibility",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.normal",
        "toolname": "v.normal",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.out.ascii",
        "toolname": "v.out.ascii",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.out.dxf",
        "toolname": "v.out.dxf",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.out.postgis",
        "toolname": "v.out.postgis",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.out.pov",
        "toolname": "v.out.pov",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.out.svg",
        "toolname": "v.out.svg",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.out.vtk",
        "toolname": "v.out.vtk",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.outlier",
        "toolname": "v.outlier",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.overlay",
        "toolname": "v.overlay",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.pack",
        "toolname": "v.pack",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.parallel",
        "toolname": "v.parallel",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.patch",
        "toolname": "v.patch",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.perturb",
        "toolname": "v.perturb",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.proj",
        "toolname": "v.proj",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.qcount",
        "toolname": "v.qcount",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.random",
        "toolname": "v.random",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.rast.stats",
        "toolname": "v.rast.stats",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.reclass",
        "toolname": "v.reclass",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.rectify",
        "toolname": "v.rectify",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.report",
        "toolname": "v.report",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.sample",
        "toolname": "v.sample",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.segment",
        "toolname": "v.segment",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.select",
        "toolname": "v.select",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.split",
        "toolname": "v.split",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.surf.bspline",
        "toolname": "v.surf.bspline",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.surf.idw",
        "toolname": "v.surf.idw",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.surf.rst",
        "toolname": "v.surf.rst",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.surf.rst.cvdev",
        "toolname": "v.surf.rst.cvdev",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.to.3d",
        "toolname": "v.to.3d",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.to.lines",
        "toolname": "v.to.lines",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.to.points",
        "toolname": "v.to.points",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.to.rast",
        "toolname": "v.to.rast",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.transform",
        "toolname": "v.transform",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.type",
        "toolname": "v.type",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.univar",
        "toolname": "v.univar",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.vect.stats",
        "toolname": "v.vect.stats",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.voronoi",
        "toolname": "v.voronoi",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.voronoi.skeleton",
        "toolname": "v.voronoi.skeleton",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.what.rast",
        "toolname": "v.what.rast",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "grass7:v.what.vect",
        "toolname": "v.what.vect",
        "tool_description": "Reprojects a raster layer into another Coordinate Reference System (CRS). The output file resolution and the resampling method can be chosen.\nThis algorithm is derived from the GDAL warp utility .\nDefault menu: Raster \u25ba Projections",
        "parameters": "INPUT: Input layer. Input raster layer to reproject. Type: [raster]\nSOURCE_CRS: Source \nCRS Optional. Defines the \nCRS of the input raster layer. Type: [crs] \nTARGET_CRS: Target \nCRS Optional. The \nCRS of the output layer. Type: [crs] Default: \nEPSG:4326 \nRESAMPLING: Resampling method to use. Pixel value resampling method to use.Options: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nNODATA: NoData value for output bands Optional. Sets NoData value for output bands.If not provided, then NoData values will be copied fromthe source dataset.. Type: [number] Default: None \nTARGET_RESOLUTION: Output file resolution in target georeferenced units Optional. Defines the output file resolution of reprojection result. Type: [number] Default: None \nOUTPUT: Reprojected. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression\u2026).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: \u2018\u2019 \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Use Input Layer Data Type 1 \u2014 Byte (Eight bit unsigned integer (quint8)) 2 \u2014 Int16 (Sixteen bit signed integer (qint16)) 3 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Int32 (Thirty two bit signed integer (qint32)) 6 \u2014 Float32 (Thirty two bit floating point (float)) 7 \u2014 Float64 (Sixty four bit floating point (double)) 8 \u2014 CInt16 (Complex Int16) 9 \u2014 CInt32 (Complex Int32) 10 \u2014 CFloat32 (Complex Float32) 11 \u2014 CFloat64 (Complex Float64) 12 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 0 \nTARGET_EXTENT: Georeferenced extents of output file to be created Optional. Sets the georeferenced extent of the output file to becreated (in the Target \nCRS by default.In the \nCRS of the target raster extent , ifspecified). Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nTARGET_EXTENT_CRS: \nCRS of the target raster extent Optional. Specifies the \nCRS in which to interpret the coordinates givenfor the extent of the output file.This must not be confused with the target \nCRS of the outputdataset.It is instead a convenience e.g. when knowing the outputcoordinates in a geodetic long/lat \nCRS, but wanting a resultin a projected coordinate system.. Type: [crs] \nMULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of the image andperform input/output operations simultaneously.Note that the computation itself is not multithreaded.. Type: [boolean] Default: False \nEXTRA: Additional command-line parameters Optional. Add extra GDAL command line options.. Type: [string] Default: None outputs = \nOUTPUT: Reprojected. Reprojected output raster layer. Type: [raster] Default: [Save to temporary file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef reproject_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_raster.tif'\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n    \n                           \n    parameters = {\n        'INPUT': input_path,\n        'SOURCE_CRS': '',\n        'TARGET_CRS': 'EPSG:4326',\n        'RESAMPLING': 0,                                                                                                                                                                                                                                                              \n        'NODATA': '',\n        'TARGET_RESOLUTION': '',\n        'OUTPUT': output_path,\n        'OPTIONS': '',\n        'DATA_TYPE': 0,                                                                                                                                                                                                                                                \n        'TARGET_EXTENT': '',\n        'TARGET_EXTENT_CRS': '',\n        'MULTITHREADING': '',\n        'EXTRA': '''    }\n                                      \n    result = processing.run(\"gdal:warpreproject\", parameters)\n                                       \n    output_layer = QgsRasterLayer(output_path, 'Reprojected Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nreproject_raster()"
    },
    {
        "tool_id": "native:addautoincrementalfield",
        "toolname": "addautoincrementalfield",
        "tool_description": "Adds a new integer field to a vector layer, with a sequential value for each feature.\nThis field can be used as a unique ID for features in the layer. The new attribute is not added to the input layer but a new layer is generated instead.\nThe initial starting value for the incremental series can be specified. Optionally, the incremental series can be based on grouping fields and a sort order for features can also be specified.",
        "parameters": "INPUT: Input layer. The input vector layer.. Type: [vector: any]\nFIELD_NAME: Field name. Name of the field with autoincremental values. Type: [string] Default: \n\u2018AUTO\u2019 \nSTART: Start values at Optional. Choose the initial number of the incremental count. Type: [number] Default: 0 \nMODULUS: Modulus value Optional. Specifying an optional modulus value will restart the count to STARTwhenever the field value reaches the modulus value. 0 means no restart.. Type: [number] Default: 0 \nGROUP_FIELDS: Group values by Optional. Select grouping field(s): instead of a single countrun for the whole layer, a separate count is processedfor each value returned by the combination of thesefields.. Type: [tablefield: any] [list] \nSORT_EXPRESSION: Sort expression Optional. Use an expression to sort the features in the layereither globally or if set, based on group fields.. Type: [expression] \nSORT_ASCENDING: Sort ascending. When a sort expression is set, use this optionto control the order in which features are assignedvalues.. Type: [boolean] Default: True \nSORT_NULLS_FIRST: Sort nulls first. When a sort expression is set, use this optionto set whether Null values are counted first orlast.. Type: [boolean] Default: False \nOUTPUT: Incremented. Specify the output vector layer with the auto incrementfield.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Incremented. Vector layer with auto incremental field. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef add_auto_incremental_field():\n    input_path = 'D:/input_vector_layer.shp'\n    output_path = 'D:/output_layer.shp'\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'FIELD_NAME': 'AUTO',\n        'START': 0,\n        'MODULUS': 0,\n        'GROUP_FIELDS': [],\n        'SORT_EXPRESSION': '',\n        'SORT_ASCENDING': True,\n        'SORT_NULLS_FIRST': False,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"native:addautoincrementalfield\", parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Incremented Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nadd_auto_incremental_field()"
    },
    {
        "tool_id": "native:addfieldtoattributestable",
        "toolname": "addfieldtoattributestable",
        "tool_description": "Adds a new field to a vector layer.\nThe name and characteristics of the attribute are defined as parameters.\nThe new attribute is not added to the input layer but a new layer is generated instead.",
        "parameters": "INPUT: Input layer. The input layer. Type: [vector: any]\nFIELD_NAME: Field name. Name of the new field. Type: [string] \nFIELD_TYPE: Field type. Type of the new field. You can choose between: 0 \u2014 Integer (32 bit) 1 \u2014 Decimal (double) 2 \u2014 Text (string) 3 \u2014 Boolean 4 \u2014 Date 5 \u2014 Time 6 \u2014 Date & Time 7 \u2014 Binary Object \n(BLOB) 8 \u2014 String List 9 \u2014 Integer List 10 \u2014 Decimal (double) List. Type: [enumeration] Default: 0 \nFIELD_LENGTH: Field length. Length of the field. Type: [number] Default: 10 \nFIELD_PRECISION: Field precision. Precision of the field. Useful with Float field type.. Type: [number] Default: 0 \nFIELD_ALIAS: Field alias \nNEW in 3.32 Optional. Set a name to use as alias for the field. Not supported by all format types.. Type: [string] \nFIELD_COMMENT: Field comment \nNEW in 3.32 Optional. Store a comment describing the field. Not supported by all format types.. Type: [string] \nOUTPUT: Added. Specify the output vector layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Added. Vector layer with new field added. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef add_field_to_attribute_table():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"output_layer_with_new_field.shp\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n                          \n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n                                         \n    add_field_params = {\n        'INPUT': input_path,\n        'FIELD_NAME': 'NewField',\n        'FIELD_TYPE': 0,                    \n        'FIELD_LENGTH': 10,\n        'FIELD_PRECISION': 0,\n        'FIELD_ALIAS': '',\n        'FIELD_COMMENT': '',\n        'OUTPUT': output_path\n    }\n                                       \n    result = processing.run(\"native:addfieldtoattributestable\", add_field_params)\n                              \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Layer_with_new_field', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n                      \nadd_field_to_attribute_table()"
    },
    {
        "tool_id": "native:adduniquevalueindexfield",
        "toolname": "adduniquevalueindexfield",
        "tool_description": "Takes a vector layer and an attribute and adds a new numeric field.\nValues in this field correspond to values in the specified attribute, so features with the same value for the attribute will have the same value in the new numeric field.\nThis creates a numeric equivalent of the specified attribute, which defines the same classes.\nThe new attribute is not added to the input layer but a new layer is generated instead.",
        "parameters": "INPUT: Input layer. The input layer.. Type: [vector: any]\nFIELD: Class field. Features that have the same value for this field will get thesame index.. Type: [tablefield: any] \nFIELD_NAME: Output field name. Name of the new field containing the indexes.. Type: [string] Default: \n\u2018NUM_FIELD\u2019 \nOUTPUT: Layer with index field. Vector layer with the numeric field containing indexes.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer] \nSUMMARY_OUTPUT: Class summary. Specify the table to contain the summary of the class fieldmapped to the corresponding unique value.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Skip output] outputs = \nOUTPUT: Layer with index field. Vector layer with the numeric field containing indexes.. Type: [same as input] \nSUMMARY_OUTPUT: Class summary. Table with summary of the class field mapped to thecorresponding unique value.. Type: [table]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef add_unique_value_index(input_layer_path, output_path):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELD': 'SampleField',                          \n        'FIELD_NAME': 'NUM_FIELD',                        \n        'OUTPUT': output_path,                                      \n        'SUMMARY_OUTPUT': ''                          \n    }\n    result = processing.run(\"native:adduniquevalueindexfield\", parameters)\n    output_layer = QgsVectorLayer(output_path, 'Layer_with_Index', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = \"D:/Data/InputData.shp\"                               \noutput_layer_path = \"D:/workspace_directory/output_layer.shp\"\nadd_unique_value_index(input_layer_path, output_layer_path)"
    },
    {
        "tool_id": "native:addxyfields",
        "toolname": "addxyfields",
        "tool_description": "Takes a vector layer and an attribute and adds a new numeric field.\nValues in this field correspond to values in the specified attribute, so features with the same value for the attribute will have the same value in the new numeric field.\nThis creates a numeric equivalent of the specified attribute, which defines the same classes.\nThe new attribute is not added to the input layer but a new layer is generated instead.",
        "parameters": "INPUT: Input layer. The input layer.. Type: [vector: any]\nFIELD: Class field. Features that have the same value for this field will get thesame index.. Type: [tablefield: any] \nFIELD_NAME: Output field name. Name of the new field containing the indexes.. Type: [string] Default: \n\u2018NUM_FIELD\u2019 \nOUTPUT: Layer with index field. Vector layer with the numeric field containing indexes.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer] \nSUMMARY_OUTPUT: Class summary. Specify the table to contain the summary of the class fieldmapped to the corresponding unique value.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Skip output] outputs = \nOUTPUT: Layer with index field. Vector layer with the numeric field containing indexes.. Type: [same as input] \nSUMMARY_OUTPUT: Class summary. Table with summary of the class field mapped to thecorresponding unique value.. Type: [table]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef add_unique_value_index(input_layer_path, output_path):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELD': 'SampleField',                          \n        'FIELD_NAME': 'NUM_FIELD',                        \n        'OUTPUT': output_path,                                      \n        'SUMMARY_OUTPUT': ''                          \n    }\n    result = processing.run(\"native:adduniquevalueindexfield\", parameters)\n    output_layer = QgsVectorLayer(output_path, 'Layer_with_Index', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = \"D:/Data/InputData.shp\"                               \noutput_layer_path = \"D:/workspace_directory/output_layer.shp\"\nadd_unique_value_index(input_layer_path, output_layer_path)"
    },
    {
        "tool_id": "native:affinetransform",
        "toolname": "affinetransform",
        "tool_description": "Applies an affine transformation to the layer geometries. Affine transformations can include translation, scaling and rotation. The operations are performed in the following order: scale, rotation, and translation.\nZ and M values (if present) can be translated and scaled.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nDELTA_X: Translation (x-axis). Displacement to apply on the X axis.. Type: [number ] Default: 0\nDELTA_Y: Translation (y-axis). Displacement to apply on the Y axis.. Type: [number ] Default: 0\nDELTA_Z: Translation (z-axis). Displacement to apply on the Z axis.. Type: [number ] Default: 0\nDELTA_M: Translation (m-values). Offset to apply on m values.. Type: [number ] Default: 0\nSCALE_X: Scale factor (x-axis). Scaling value (expansion or contraction) to apply on the X axis.. Type: [number ] Default: 1\nSCALE_Y: Scale factor (y-axis). Scaling value (expansion or contraction) to apply on the Y axis.. Type: [number ] Default: 1\nSCALE_Z: Scale factor (z-axis). Scaling value (expansion or contraction) to apply on the Z axis.. Type: [number ] Default: 1\nSCALE_M: Scale factor (m-values). Scaling value (expansion or contraction) to apply on m values.. Type: [number ] Default: 1\nROTATION_Z: Rotation around z-axis (degrees counter-clockwise). Angle of the rotation in degrees.. Type: [number ] Default: 0\nOUTPUT: Transformed. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef apply_affine_transform():\n    input_path = 'path/to/your/input_layer.shp'\n    output_path = 'path/to/your/output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'DELTA_X': 0,\n        'DELTA_Y': 0,\n        'DELTA_Z': 0,\n        'DELTA_M': 0,\n        'SCALE_X': 1,\n        'SCALE_Y': 1,\n        'SCALE_Z': 1,\n        'SCALE_M': 1,\n        'ROTATION_Z': 0,\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:affinetransform', parameters)\n    transformed_layer = QgsVectorLayer(result['OUTPUT'], 'Transformed Layer', 'ogr')\n    QgsProject.instance().addMapLayer(transformed_layer)\n\napply_affine_transform()"
    },
    {
        "tool_id": "native:aggregate",
        "toolname": "aggregate",
        "tool_description": "Takes a vector or table layer and creates a new layer by aggregating features based on a groupby expression.\nFeatures for which groupby expression returns the same value are grouped together.\nIt is possible to group all source features together using constant value in groupby parameter, example: NULL.\nIt is also possible to group features by multiple fields using Array function, example: Array(\u201cField1\u201d, \u201cField2\u201d).\nGeometries (if present) are combined into one multipart geometry for each group. Output attributes are computed depending on each given aggregate definition.\nThis algorithm allows to use the default aggregates functions of the QGIS Expression engine.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nGROUP_BY: Group by expression. Choose the grouping field.If \nNULL all features will be grouped.. Type: [tablefield: any] Default: \n\u2018NULL\u2019 \nAGGREGATES: Aggregates. List of output layer field definitions.Example of a field definition: {\u2018aggregate\u2019: \u2018sum\u2019, \u2018delimiter\u2019: \u2018,\u2019, \u2018input\u2019: \u2018 $area\u2019,\u2018length\u2019: 10, \u2018name\u2019: \u2018totarea\u2019, \u2018precision\u2019: 0, \u2018type\u2019: 6} By default, the list contains all the fields of the input layer.In the \nGUI, you can edit these fields and their definitions,and you can also: Click the button to add a new field. Click to delete the selected field. Use and to change order of the fields. Click to reset to the default (the fields of theinput layer). For each of the fields you\u2019d like to retrieve information from,you need to define the following: Input expression [expression] ( input ) Field or expression from the input layer. Aggregate function [enumeration] ( aggregate ) Function to use on the inputexpression to return the aggregated value. Default: concatenate (for string data type), sum (fornumeric data type) Delimiter [string] ( delimiter ) Text string to separate aggregated values, for example incase of concatenation. Default: , Output field name [string] ( name ) Name of the aggregated field in the output layer.By default input field name is kept. Type [enumeration] ( type ) Data type of the output field. One of: 1 \u2014 Boolean 2 \u2014 Integer 4 \u2014 Integer64 6 \u2014 Double 10 \u2014 String 14 \u2014 Date 16 \u2014 DateTime Length [number] ( length ) Length of the output field. Precision [number] ( precision ) Precision of the output field.. Type: [list] \nGUI only: Load fields from layer. You can load fields from another layer and use them for theaggregation. Type: [vector: any] \nOUTPUT: Aggregated. Specify the output (aggregate) layerOne of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Aggregated. Multigeometry vector layer with the aggregated values. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef aggregate_geometry(input_layer_path, output_path):\n    # Define the parameters\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'GROUP_BY': 'NULL',                                  \n        'AGGREGATES': [\n            {\n                'aggregate': 'sum',  \n                'delimiter': ',',  \n                'input': '$area',  \n                'length': 10,  \n                'name': 'totarea',  \n                'precision': 0,  \n                'type': 6  \n            }\n        ],\n        'OUTPUT': output_path\n    }\n\n                                     \n    result = processing.run(\"native:aggregate\", parameters)\n\n                                     \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Aggregated Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                               \ninput_layer_path = 'D:/Data/InputLayer.shp'\noutput_path = 'D:/workspace_directory/output_aggregated.shp'\n\n                      \naggregate_geometry(input_layer_path, output_path)"
    },
    {
        "tool_id": "native:alignrasters",
        "toolname": "alignrasters",
        "tool_description": "NEWin3.34\nAligns rasters by resampling them to the same cell size and reprojecting to the same CRS as a reference raster.",
        "parameters": "INPUT: Input layers. List of input raster layers with resampling options associated(filled as a QgsProcessingParameterAlignRasterLayers item \u2014done in\nGUI by pressing Configure Raster\u2026 buttonfor each selected layer): Input layer [string] ( inputFile ) Full path of the input layer to align Output file [string] ( outputFile ) Full path of the corresponding aligned output layer Resampling method [enumeration] ( resampleMethod ) Method to use for input layer resampling. Available options are: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3) Rescale values according to the cell size [boolean] ( rescale ). Type: [raster] [list] \nREFERENCE_LAYER: Reference layer. \nA raster layer that will be used to fetch extent, cell size and CRSthat will be applied to input layers.. Type: [raster] \nCRS: Override reference \nCRS Optional. \nCRS to be used instead of the reference layer\u2019s. Type: [crs] \nCELL_SIZE_X: Override reference cell size \nX Optional. Cell size in \nX direction to be used instead of the reference layer\u2019s. Type: [number] \nCELL_SIZE_Y: Override reference cell size \nY Optional. Cell size in \nY direction to be used instead of the reference layer\u2019s. Type: [number] \nGRID_OFFSET_X: Override reference grid offset \nX Optional. Offset in \nX direction to apply to cells grid. Type: [number] \nGRID_OFFSET_Y: Override reference grid offset \nY Optional. Offset in \nY direction to apply to cells grid. Type: [number] \nEXTENT: Clip to extent Optional. Specify the extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] outputs = \nOUTPUT_LAYERS: Aligned rasters. output rasters with pixels resampled. Type: [raster] [list]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef align_rasters(output_path):\n    input_layers = ['path/to/raster1.tif', 'path/to/raster2.tif']  # List of input raster layer paths\n    reference_layer_path = 'path/to/reference_raster.tif'\n    reference_layer = QgsRasterLayer(reference_layer_path, \"\"\"Reference Layer\")\n    \n                                                                \n    parameters = {\n        'INPUT': [(input_layers[0], 'output/aligned_raster1.tif', 0),                                                    \n                  (input_layers[1], 'output/aligned_raster2.tif', 0)],                                   \n        'REFERENCE_LAYER': reference_layer_path,\n        'CRS': '',\n        'CELL_SIZE_X': '',\n        'CELL_SIZE_Y': '',\n        'GRID_OFFSET_X': '',\n        'GRID_OFFSET_Y': '',\n        'EXTENT': '',\n        'OUTPUT': output_path\n    }\n\n                               \n    result = processing.run(\"native:alignrasters\", parameters)\n\n                                   \n    aligned_raster_layer = QgsRasterLayer(result['OUTPUT'], \"Aligned Rasters\")\n    QgsProject.instance().addMapLayer(aligned_raster_layer)\n\noutput_raster_path = \"path/to/aligned_raster_output.tif\"\nalign_rasters(output_raster_path)"
    },
    {
        "tool_id": "native:alignsingleraster",
        "toolname": "alignsingleraster",
        "tool_description": "NEWin3.34\nAligns raster by resampling it to the same cell size and reprojecting to the same CRS as a reference raster.",
        "parameters": "INPUT: Input layer. Input raster layer to align. Type: [raster]\nRESAMPLING_METHOD: Resampling method. Method to use for input layer resampling. Available options are: 0 \u2014 Nearest Neighbour 1 \u2014 Bilinear (2x2 kernel) 2 \u2014 Cubic (4x4 kernel) 3 \u2014 Cubic B-Spline (4x4 kernel) 4 \u2014 Lanczos (6x6 kernel) 5 \u2014 Average 6 \u2014 Mode 7 \u2014 Maximum 8 \u2014 Minimum 9 \u2014 Median 10 \u2014 First quartile \n(Q1) 11 \u2014 Third quartile \n(Q3). Type: [enumeration] Default: 0 \nRESCALE: Rescale values according to the cell size. . Type: [boolean] Default: No \nREFERENCE_LAYER: Reference layer. \nA raster layer that will be used to fetch extent, cell size and CRSthat will be applied to input layers.. Type: [raster] \nCRS: Override reference \nCRS Optional. \nCRS to be used instead of the reference layer\u2019s. Type: [crs] \nCELL_SIZE_X: Override reference cell size \nX Optional. Cell size in \nX direction to be used instead of the reference layer\u2019s. Type: [number] \nCELL_SIZE_Y: Override reference cell size \nY Optional. Cell size in \nY direction to be used instead of the reference layer\u2019s. Type: [number] \nGRID_OFFSET_X: Override reference grid offset \nX Optional. Offset in \nX direction to apply to cells grid. Type: [number] \nGRID_OFFSET_Y: Override reference grid offset \nY Optional. Offset in \nY direction to apply to cells grid. Type: [number] \nEXTENT: Clip to extent Optional. Specify the extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nOUTPUT: Aligned raster. output raster with pixels resampled. Type: [raster] outputs = \nOUTPUT: Aligned raster. output raster with pixels resampled. Type: [raster]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef align_single_raster():\n    # Define the input and output paths\n    input_path = 'D:/input_raster.tif'\n    reference_layer_path = 'D:/reference_layer.tif'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"aligned_raster.tif\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n    \n                          \n    input_layer = QgsRasterLayer(input_path, \"Input Raster\")\n    reference_layer = QgsRasterLayer(reference_layer_path, \"Reference Layer\")\n\n                               \n    parameters = {\n        'INPUT': input_path,\n        'RESAMPLING_METHOD': 0,                                                                                     \n        'RESCALE': False,\n        'REFERENCE_LAYER': reference_layer_path,\n        'CRS': '',\n        'CELL_SIZE_X': '',\n        'CELL_SIZE_Y': '',\n        'GRID_OFFSET_X': '',\n        'GRID_OFFSET_Y': '',\n        'EXTENT': '',\n        'OUTPUT': output_path\n    }\n\n                                  \n    result = processing.run(\"native:alignsingleraster\", parameters)\n                                             \n    aligned_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Aligned Raster')\n    QgsProject.instance().addMapLayer(aligned_raster_layer)\n\n                      \nalign_single_raster()"
    },
    {
        "tool_id": "native:angletonearest",
        "toolname": "angletonearest",
        "tool_description": "Calculates the rotation required to align point features with their nearest feature from another reference layer. A new field is added to the output layer which is filled with the angle (in degrees, clockwise) to the nearest reference feature.\nOptionally, the output layer\u2019s symbology can be set to automatically use the calculated rotation field to rotate marker symbols. If desired, a maximum distance to use when aligning points can be set, to avoid aligning isolated points to distant features.\nAllows features in-place modification of point features",
        "parameters": "INPUT: Input layer. Point features to calculate the rotation for. Type: [vector: point]\nREFERENCE_LAYER: Reference layer. Layer to find the closest feature from for rotation calculation. Type: [vector: any] \nMAX_DISTANCE: Maximum distance to consider Optional. If no reference feature is found within this distance, no rotationis assigned to the point feature.. Type: [number] Default: Not set \nFIELD_NAME: Angle field name. Field in which to store the rotation value.. Type: [string] Default: \u2018rotation\u2019 \nAPPLY_SYMBOLOGY: Automatically apply symbology. Rotates the symbol marker of the features using the angle field value. Type: [boolean] Default: True \nOUTPUT: Aligned layer. Specify the rotated output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Save to temporary file] outputs = \nOUTPUT: Aligned layer. The point layer appended with a rotation field.If loaded to \nQGIS, it is applied by default the input layer symbology,with a data-defined rotation of its marker symbol.. Type: [vector: point]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef rotate_points_to_nearest():\n    input_path = 'D:/input_points.shp'\n    reference_path = 'D:/reference_layer.shp'\n    output_path = 'D:/output_aligned.shp'\n\n    # Load input and reference layers\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Points\", \"ogr\")\n    reference_layer = QgsVectorLayer(reference_path, \"Reference Layer\", \"ogr\")\n    \n                                                     \n    parameters = {\n        'INPUT': input_path,\n        'REFERENCE_LAYER': reference_path,\n        'MAX_DISTANCE': None,\n        'FIELD_NAME': 'rotation',\n        'APPLY_SYMBOLOGY': True,\n        'OUTPUT': output_path                                                    \n    }\n    \n                  \n    result = processing.run(\"native:angletonearest\", parameters)\n    \n                                      \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Aligned Output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                       \nrotate_points_to_nearest()\n```"
    },
    {
        "tool_id": "native:antimeridiansplit",
        "toolname": "antimeridiansplit",
        "tool_description": "Splits a line into multiple geodesic segments, whenever the line crosses the antimeridian (\u00b1180 degrees longitude).\nSplitting at the antimeridian helps the visual display of the lines in some projections. The returned geometry will always be a multi-part geometry.\nWhenever line segments in the input geometry cross the antimeridian, they will be split into two segments, with the latitude of the breakpoint being determined using a geodesic line connecting the points either side of this segment. The current project ellipsoid setting will be used when calculating this breakpoint.\nIf the input geometry contains M or Z values, these will be linearly interpolated for the new vertices created at the antimeridian.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nOUTPUT: Split. Specify the output line vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] outputs = \nOUTPUT: Split. The output line vector layer split at the antimeridian.. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef split_line_at_antimeridian(input_layer_path, output_path):\n    # Load the input line vector layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Line Layer\", \"ogr\")\n\n                                                                \n    parameters = {\n        'INPUT': input_layer,\n        'OUTPUT': output_path                                                                                                                       \n    }\n\n                       \n    result = processing.run(\"native:antimeridiansplit\", parameters)\n\n                           \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Antimeridian Split', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = \"D:/Data/InputLines.shp\"                               \noutput_path = \"D:/workspace_directory/split_lines_output.shp\"                                \nsplit_line_at_antimeridian(input_layer_path, output_path)"
    },
    {
        "tool_id": "native:arrayoffsetlines",
        "toolname": "arrayoffsetlines",
        "tool_description": "Creates copies of line features in a layer, by creating multiple offset versions of each feature. Each new version is incrementally offset by a specified distance.\nPositive distance will offset lines to the left, and negative distances will offset them to the right.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer to use for the offsets.. Type: [vector: line]\nCOUNT: Number of features to create. Number of offset copies to generate for each feature. Type: [number ] Default: 10 \nOFFSET: Offset step distance. Distance between two consecutive offset copies. Type: [number ] Default: 1.0 \nOUTPUT: Offset lines. Specify the output line layer with offset features. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] \nSEGMENTS: Segments. Number of line segments to use to approximate a quartercircle when creating rounded offsets. Type: [number] Default: 8 \nJOIN_STYLE: Join style. Specify whether round, miter or beveled joins should beused when offsetting corners in a line. One of: 0 \u2014 Round 1 \u2014 Miter 2 \u2014 Bevel Fig. 28.46 Round, miter, and bevel join styles \uf0c1. Type: [enumeration] Default: 0 \nMITER_LIMIT: Miter limit. Sets the maximum distance from the offset geometry to usewhen creating a mitered join as a factor of the offset distance (only applicable for miterjoin styles).Minimum: 1.0 Fig. 28.47 \nA 10m buffer with a limit of 2 and a 10m buffer with a limit of 1 \uf0c1. Type: [number] Default: 2.0 outputs = \nOUTPUT: Offset lines. Output line layer with offset features.The original features are also copied.. Type: [vector: line]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef offset_lines():\n    input_path = 'D:/input_line_layer.shp'\n    output_path = 'D:/output_directory/offset_lines.shp'\n\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Line Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_path,\n        'COUNT': 10,\n        'OFFSET': 1.0,\n        'OUTPUT': output_path,\n        'SEGMENTS': 8,\n        'JOIN_STYLE': 0,                                   \n        'MITER_LIMIT': 2.0\n    }\n\n    result = processing.run(\"native:arrayoffsetlines\", parameters)\n\n    offset_layer = QgsVectorLayer(result['OUTPUT'], 'Offset Lines', 'ogr')\n    QgsProject.instance().addMapLayer(offset_layer)\n\noffset_lines()"
    },
    {
        "tool_id": "native:arraytranslatedfeatures",
        "toolname": "arraytranslatedfeatures",
        "tool_description": "Creates copies of features in a layer by creating multiple translated versions of each. Each copy is incrementally displaced by a preset amount in the X, Y and/or Z axis.\nM values present in the geometry can also be translated.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer to translate. Type: [vector: any]\nCOUNT: Number of features to create. Number of copies to generate for each feature. Type: [number ] Default: 10 \nDELTA_X: Step distance (x-axis). Displacement to apply on the \nX axis. Type: [number ] Default: 0.0 \nDELTA_Y: Step distance (y-axis). Displacement to apply on the \nY axis. Type: [number ] Default: 0.0 \nDELTA_Z: Step distance (z-axis). Displacement to apply on the \nZ axis. Type: [number ] Default: 0.0 \nDELTA_M: Step distance (m values). Displacement to apply on \nM. Type: [number ] Default: 0.0 \nOUTPUT: Translated. Output vector layer with translated (moved) copiesof the features.The original features are also copied. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Translated. Output vector layer with translated (moved)copies of the features.The original features are also copied.. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef translate_features():\n    input_layer_path = 'D:/path_to_input_layer.shp'\n    output_path = 'C:/Users/Output/translated_features.shp'\n    \n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_layer_path,\n        'COUNT': 10,\n        'DELTA_X': 0.0,\n        'DELTA_Y': 0.0,\n        'DELTA_Z': 0.0,\n        'DELTA_M': 0.0,\n        'OUTPUT': output_path                                                                                                                         \n    }\n    \n    result = processing.run(\"native:arraytranslatedfeatures\", parameters)\n    \n    translated_layer = QgsVectorLayer(result['OUTPUT'], 'Translated Features', 'ogr')\n    QgsProject.instance().addMapLayer(translated_layer)\n\ntranslate_features()"
    },
    {
        "tool_id": "native:aspect",
        "toolname": "aspect",
        "tool_description": "Creates copies of features in a layer by creating multiple translated versions of each. Each copy is incrementally displaced by a preset amount in the X, Y and/or Z axis.\nM values present in the geometry can also be translated.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer to translate. Type: [vector: any]\nCOUNT: Number of features to create. Number of copies to generate for each feature. Type: [number ] Default: 10 \nDELTA_X: Step distance (x-axis). Displacement to apply on the \nX axis. Type: [number ] Default: 0.0 \nDELTA_Y: Step distance (y-axis). Displacement to apply on the \nY axis. Type: [number ] Default: 0.0 \nDELTA_Z: Step distance (z-axis). Displacement to apply on the \nZ axis. Type: [number ] Default: 0.0 \nDELTA_M: Step distance (m values). Displacement to apply on \nM. Type: [number ] Default: 0.0 \nOUTPUT: Translated. Output vector layer with translated (moved) copiesof the features.The original features are also copied. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Translated. Output vector layer with translated (moved)copies of the features.The original features are also copied.. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef translate_features():\n    input_layer_path = 'D:/path_to_input_layer.shp'\n    output_path = 'C:/Users/Output/translated_features.shp'\n    \n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_layer_path,\n        'COUNT': 10,\n        'DELTA_X': 0.0,\n        'DELTA_Y': 0.0,\n        'DELTA_Z': 0.0,\n        'DELTA_M': 0.0,\n        'OUTPUT': output_path                                                                                                                         \n    }\n    \n    result = processing.run(\"native:arraytranslatedfeatures\", parameters)\n    \n    translated_layer = QgsVectorLayer(result['OUTPUT'], 'Translated Features', 'ogr')\n    QgsProject.instance().addMapLayer(translated_layer)\n\ntranslate_features()"
    },
    {
        "tool_id": "native:assignprojection",
        "toolname": "assignprojection",
        "tool_description": "Assigns a new projection to a vector layer.\nIt creates a new layer with the exact same features and geometries as the input one, but assigned to a new CRS. The geometries are not reprojected, they are just assigned to a different CRS.\nThis algorithm can be used to repair layers which have been assigned an incorrect projection.\nAttributes are not modified by this algorithm.",
        "parameters": "INPUT: Input layer. Vector layer with wrong or missing CRS. Type: [vector: any]\nCRS: Assigned CRS. Select the new CRS to assign to the vector layer. Type: [crs] Default: EPSG:4326 - WGS84\nOUTPUT: Assigned CRS Optional. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef assign_crs():\n    # Define input and output paths\n    input_path = 'D:/Data/layer_without_crs.shp'\n    output_path = 'C:/output_path/layer_with_crs.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Layer Without CRS', 'ogr')\n\n    # Run the Assign Projection algorithm\n    result = processing.run('native:assignprojection', {\n        'INPUT': input_layer,\n        'CRS': 'EPSG:4326',  # Assign to EPSG:4326 - WGS84\n        'OUTPUT': output_path\n    })\n\n    # Load the layer with the assigned CRS to QGIS\n    assigned_crs_layer = QgsVectorLayer(result['OUTPUT'], 'Layer With CRS', 'ogr')\n    QgsProject.instance().addMapLayer(assigned_crs_layer)\n\n# Execute the function\nassign_crs()"
    },
    {
        "tool_id": "native:atlaslayouttoimage",
        "toolname": "atlaslayouttoimage",
        "tool_description": "Exports the atlas of a print layout as image files (e.g. PNG or JPEG images).\nIf a coverage layer is set, the selected layout\u2019s atlas settings exposed in this algorithm will be overwritten. In this case, an empty filter or sort by expression will turn those settings off.",
        "parameters": "LAYOUT: Atlas layout. Layout to export. Type: [layout]\nCOVERAGE_LAYER: Coverage layer Optional. Layer to use to generate the atlas. Type: [vector: any] \nFILTER_EXPRESSION: Filter expression. Expression to use to filter out atlas features. Type: [expression] \nSORTBY_EXPRESSION: Sort expression Optional. Expression to use to sort the atlas features. Type: [expression] \nSORTBY_REVERSE: Reverse sort order Optional. Determines if sorting should be inverted.Used when a sort expression is provided.. Type: [boolean] \nFILENAME_EXPRESSION: Output filename expression. Expression for use to generate filenames. Type: [expression] Default: \u2018output_\u2019||@atlas_featurenumber \nFOLDER: Output folder. Destination folder where the images will be generated. Type: [folder] \nLAYERS: Map layers to assign to unlocked map item(s) Optional. Layers to display in the map item(s) whose contents are not locked. Type: [enumeration] [layer] \nEXTENSION: Image format. File format of the generated output(s).The list of available formats varies depending on \nOS and installed drivers.. Type: [enumeration] Default: png \nDPI Default: Not set: \nDPI Optional. \nDPI of the output file(s). If not set, the value in the print layout settings will be used.. Type: [number] \nGEOREFERENCE: Generate world file. Determines if a world file should be generated. Type: [boolean] Default: True \nINCLUDE_METADATA: Export \nRDF metadata. Determines if \nRDF metadata (title, author, \u2026) should be generated. Type: [boolean] Default: True \nANTIALIAS: Enable antialiasing. Determines if antialiasing should be enabled. Type: [boolean] Default: True outputs = \nOUTPUT: Image file. Image files generated by the atlas layout. Type: [file]\n",
        "code_example": "import processing\n\ndef export_atlas_to_image():\n    # Set output path\n    output_folder = 'C:/Users/Output'\n\n    # Define parameters for atlas layout to image tool\n    parameters = {\n        'LAYOUT': '',  # provide the layout name or object\n        'COVERAGE_LAYER': '',  # provide the coverage layer if needed\n        'FILTER_EXPRESSION': '',\n        'SORTBY_EXPRESSION': '',\n        'SORTBY_REVERSE': False,\n        'FILENAME_EXPRESSION': '',  # Use default if not specified: \u2018output_\u2019||@atlas_featurenumber\n        'FOLDER': output_folder,\n        'LAYERS': 0,  # provide actual index or name if needed, [options: {0, 1, ...}]\n        'EXTENSION': 0,  # [options: {\"\"\"png\", \"jpg\", \"tiff\", ...}]\n        'DPI': None,\n        'GEOREFERENCE': True,\n        'INCLUDE_METADATA': True,\n        'ANTIALIAS': True,\n        'OUTPUT': output_folder\n    }\n\n                                        \n    result = processing.run(\"native:atlaslayouttoimage\", parameters)\n\n                   \nexport_atlas_to_image()"
    },
    {
        "tool_id": "native:atlaslayouttomultiplepdf",
        "toolname": "atlaslayouttomultiplepdf",
        "tool_description": "Exports the atlas of a print layout to multiple PDF files.\nIf a coverage layer is set, the selected layout\u2019s atlas settings exposed in this algorithm will be overwritten. In this case, an empty filter or sort by expression will turn those settings off.",
        "parameters": "LAYOUT: Atlas layout. Layout to export. Type: [layout]\nCOVERAGE_LAYER: Coverage layer Optional. Layer to use to generate the atlas. Type: [vector: any] \nFILTER_EXPRESSION: Filter expression. Expression to use to filter out atlas features. Type: [expression] \nSORTBY_EXPRESSION: Sort expression Optional. Expression to use to sort the atlas features. Type: [expression] \nSORTBY_REVERSE: Reverse sort order Optional. Determines if sorting should be inverted.Used when a sort expression is provided.. Type: [boolean] \nOUTPUT_FILENAME: Output filename Optional. Name pattern of the \nPDF output files.. Type: [expression] \nOUTPUT_FOLDER: Output folder. Destination folder for the output \nPDF files.. Type: [folder] \nLAYERS: Map layers to assign to unlocked map item(s) Optional. Layers to display in the map item(s) whose contents are not locked. Type: [enumeration] [layer] \nDPI Default: Not set: \nDPI Optional. \nDPI of the output file(s). If not set, the value in the print layout settings will be used.. Type: [number] \nFORCE_VECTOR: Always export as vectors. Determines if vectorial data should be left as vectors. Type: [boolean] Default: False \nFORCE_RASTER: Always export as raster. Forces all the items in the map to be rasterized.This parameter takes precedence over the \nFORCE_VECTOR parameter.. Type: [boolean] Default: False \nGEOREFERENCE: Append georeference information. Determines if a world file should be generated. Type: [boolean] Default: True \nINCLUDE_METADATA: Export \nRDF metadata. Determines if \nRDF metadata (title, author, \u2026) should be generated. Type: [boolean] Default: True \nDISABLE_TILED: Disable tiled raster layer exports. Determines if raster should be tiled. Type: [boolean] Default: False \nSIMPLIFY: Simplify geometries to reduce output file size. Determines if geometries should be simplified to reduce output file size. Type: [boolean] Default: True \nTEXT_FORMAT: Text export. Determines if text should be exported as path or text objects.Possible options are: 0 - Always export text as paths (recommended) 1 - Always export texts as text objects. Type: [enumeration] Default: 0 \nIMAGE_COMPRESSION: Image compression. Determines compression level of the image and how suitable the file could befor printing outputs or post-production in external applications.Possible options are: 0 - Lossy \n(JPEG) 1 - Lossless. Type: [enumeration] Default: 0 outputs = \nOUTPUT: \nPDF file. \nPDF file corresponding to the exported atlas layout. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef export_atlas_to_pdf():\n    output_folder = 'D:/output_folder'\n\n    parameters = {\n        'LAYOUT': 'my_layout',\n        'COVERAGE_LAYER': '', \n        'FILTER_EXPRESSION': '',\n        'SORTBY_EXPRESSION': '',\n        'SORTBY_REVERSE': '',  # False, True\n        'OUTPUT_FILENAME': '',\n        'OUTPUT_FOLDER': output_folder,\n        'LAYERS': '',  # [layer1, layer2, ...]\n        'DPI': '',  # Not set\n        'FORCE_VECTOR': '',  # False (Default), True\n        'FORCE_RASTER': '',  # False (Default), True\n        'GEOREFERENCE': '',  # True (Default), False\n        'INCLUDE_METADATA': '',  # True (Default), False\n        'DISABLE_TILED': '',  # False (Default), True\n        'SIMPLIFY': '',  # True (Default), False\n        'TEXT_FORMAT': '',  # 0 (Default) - Always export text as paths, 1 - Always export texts as text objects\n        'IMAGE_COMPRESSION': '',  # 0 (Default) - Lossy (JPEG), 1 - Lossless\n        'OUTPUT': '' \n    }\n\n    result = processing.run(\"\"\"native:atlaslayouttomultiplepdf\", parameters)\n\nexport_atlas_to_pdf()"
    },
    {
        "tool_id": "native:atlaslayouttopdf",
        "toolname": "atlaslayouttopdf",
        "tool_description": "Exports the atlas of a print layout as a single PDF file.\nIf a coverage layer is set, the selected layout\u2019s atlas settings exposed in this algorithm will be overwritten. In this case, an empty filter or sort by expression will turn those settings off.",
        "parameters": "LAYOUT: Atlas layout. Layout to export. Type: [layout]\nCOVERAGE_LAYER: Coverage layer Optional. Layer to use to generate the atlas. Type: [vector: any] \nFILTER_EXPRESSION: Filter expression. Expression to use to filter out atlas features. Type: [expression] \nSORTBY_EXPRESSION: Sort expression Optional. Expression to use to sort the atlas features. Type: [expression] \nSORTBY_REVERSE: Reverse sort order Optional. Determines if sorting should be inverted.Used when a sort expression is provided.. Type: [boolean] \nOUTPUT: \nPDF file. Name (including path) of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] \nLAYERS: Map layers to assign to unlocked map item(s) Optional. Layers to display in the map item(s) whose contents are not locked. Type: [enumeration] [layer] \nDPI Default: Not set: \nDPI Optional. \nDPI of the output file(s). If not set, the value in the print layout settings will be used.. Type: [number] \nFORCE_VECTOR: Always export as vectors. Determines if vectorial data should be left as vectors. Type: [boolean] Default: False \nFORCE_RASTER: Always export as raster. Forces all the items in the map to be rasterized.This parameter takes precedence over the \nFORCE_VECTOR parameter.. Type: [boolean] Default: False \nGEOREFERENCE: Append georeference information. Determines if a world file should be generated. Type: [boolean] Default: True \nINCLUDE_METADATA: Export \nRDF metadata. Determines if \nRDF metadata (title, author, \u2026) should be generated. Type: [boolean] Default: True \nDISABLE_TILED: Disable tiled raster layer exports. Determines if raster should be tiled. Type: [boolean] Default: False \nSIMPLIFY: Simplify geometries to reduce output file size. Determines if geometries should be simplified to reduce output file size. Type: [boolean] Default: True \nTEXT_FORMAT: Text export. Determines if text should be exported as path or text objects.Possible options are: 0 - Always export text as paths (recommended) 1 - Always export texts as text objects. Type: [enumeration] Default: 0 \nIMAGE_COMPRESSION: Image compression. Determines compression level of the image and how suitable the file could befor printing outputs or post-production in external applications.Possible options are: 0 - Lossy \n(JPEG) 1 - Lossless. Type: [enumeration] Default: 0 outputs = \nOUTPUT: \nPDF file. \nPDF file corresponding to the exported atlas layout. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef export_atlas_layout_to_pdf():\n    output_path = 'C:/Users/Output/atlas_layout.pdf'\n\n    parameters = {\n        'LAYOUT': 'Atlas Layout',  # example layout name\n        'COVERAGE_LAYER': '',  # Optional\n        'FILTER_EXPRESSION': '',\n        'SORTBY_EXPRESSION': '',\n        'SORTBY_REVERSE': False,  # [True|False]\n        'OUTPUT': output_path,  # PDF file\n        'LAYERS': '',  # Optional\n        'DPI': 300,  # Optional\n        'FORCE_VECTOR': False,  # [True|False]\n        'FORCE_RASTER': False,  # [True|False]\n        'GEOREFERENCE': True,  # [True|False]\n        'INCLUDE_METADATA': True,  # [True|False]\n        'DISABLE_TILED': False,  # [True|False]\n        'SIMPLIFY': True,  # [True|False]\n        'TEXT_FORMAT': 0,  # [0 - Always export text as paths, 1 - Always export texts as text objects]\n        'IMAGE_COMPRESSION': 0  # [0 - Lossy (JPEG), 1 - Lossless]\n    }\n\n    result = processing.run(\"\"\"native:atlaslayouttopdf\", parameters)\n\nexport_atlas_layout_to_pdf()"
    },
    {
        "tool_id": "native:b3dmtogltf",
        "toolname": "b3dmtogltf",
        "tool_description": "Converts files from the legacy .B3DM format to .GLTF or .GLB .",
        "parameters": "INPUT: Input\nB3DM. Input file to convert.. Type: \n[3D Tile] \nOUTPUT: Output file. Specify the output \n3D tile file. One of: Save to a Temporary File Save to File\u2026. Type: \n[3D Tile] Default: [Save to temporary file] outputs = \nOUTPUT: Output file. Output layer in \n.GLTF format.. Type: \n[3D Tile]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef convert_b3dm_to_gltf():\n    # Define the input and output paths\n    input_path = 'D:/input_data.b3dm'\n    output_path = 'C:/Users/Output/output_data.gltf'\n    \n    # Set the processing parameters\n    parameters = {\n        'INPUT': input_path,  # Type: [3D Tile]\n        'OUTPUT': output_path  # Type: [3D Tile] Options: ['Save to a Temporary File', 'Save to File...']\n    }\n    \n    # Run the 3D Tile conversion\n    result = processing.run(\"\"\"native:b3dmtogltf\", parameters)\n    \n                      \nconvert_b3dm_to_gltf()"
    },
    {
        "tool_id": "native:batchnominatimgeocoder",
        "toolname": "batchnominatimgeocoder",
        "tool_description": "Performs batch geocoding using the Nominatim service against an input layer string field. The output layer will have a point geometry reflecting the geocoded location as well as a number of attributes associated to the geocoded location.\nAllows features in-place modification of point features",
        "parameters": "INPUT: Input layer. Vector layer to geocode the features. Type: [vector: any]\nFIELD: Address field. Field containing the addresses to geocode. Type: [tablefield: string] \nOUTPUT: Geocoded. Specify the output layer containing only the geocoded addresses.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Geocoded. Vector layer with point features corresponding to the geocoded addresses. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef geocode_addresses():\n    input_path = 'path_to_input_layer.shp'\n    output_path = 'path_to_output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer,\n        'FIELD': 'address_field',\n        'OUTPUT': output_path\n                                                                                                                                                                  \n    }\n\n    result = processing.run(\"native:batchnominatimgeocoder\", parameters)\n\n    geocoded_layer = QgsVectorLayer(result['OUTPUT'], 'Geocoded', 'ogr')\n    QgsProject.instance().addMapLayer(geocoded_layer)\n\ngeocode_addresses()"
    },
    {
        "tool_id": "native:bookmarkstolayer",
        "toolname": "bookmarkstolayer",
        "tool_description": "Creates a new layer containing polygon features for stored spatial bookmarks. The export can be filtered to only bookmarks belonging to the current project, to all user bookmarks, or a combination of both.",
        "parameters": "SOURCE: Bookmark source. Select the source(s) of the bookmarks.One or more of: 0 \u2014 Project bookmarks 1 \u2014 User bookmarks. Type: [enumeration] [list] Default: [0,1]\nCRS: Output CRS. The CRS of the output layer. Type: [crs] Default: EPSG:4326 - WGS 84\nOUTPUT: Output. Specify the output layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsCoordinateReferenceSystem\n\ndef bookmarks_to_layer(output_path):\n    # Set parameters for the processing algorithm\n    parameters = {\n        'SOURCE': [0, 1],  # 0: Project bookmarks, 1: User bookmarks\n        'CRS': QgsCoordinateReferenceSystem('EPSG:4326'),\n        'OUTPUT': output_path\n    }\n\n    # Execute the processing algorithm\n    result = processing.run('native:bookmarkstolayer', parameters)\n    \n    # Load the output layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Bookmark Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Set the output path\noutput_layer_path = 'C:/output_path/output_layer.shp'\nbookmarks_to_layer(output_layer_path)"
    },
    {
        "tool_id": "native:boundary",
        "toolname": "boundary",
        "tool_description": "Returns the closure of the combinatorial boundary of the input geometries (i.e. the topological boundary of the geometry).\nOnly for polygon and line layers.\nFor polygon geometries , the boundary consists of all the lines making up the rings of the polygon.\nFor lines geometries, the boundaries are their end points.",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nOUTPUT: Boundary. Specify the output (boundary) layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point, line] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef generate_boundary():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/boundary_output.shp'\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Layer', 'ogr')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_layer,\n        'OUTPUT': output_path  # One of: Create Temporary Layer (TEMPORARY_OUTPUT), Save to File, Save to Geopackage, Save to Database Table, Append to Layer\n    }\n\n    # Run the boundary algorithm\n    result = processing.run('native:boundary', parameters)\n\n    # Load the boundary layer to QGIS\n    boundary_layer = QgsVectorLayer(result['OUTPUT'], 'Boundary', 'ogr')\n    QgsProject.instance().addMapLayer(boundary_layer)\n\n# Execute the function\ngenerate_boundary()"
    },
    {
        "tool_id": "native:boundingboxes",
        "toolname": "boundingboxes",
        "tool_description": "Calculates the bounding box (envelope) of each feature in an input layer. Polygon and line geometries are supported.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nOUTPUT: Bounds. Specify the output (bounding box) layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_bounding_boxes():\n    input_layer_path = 'D:/Data/LinesOrPolygons.shp'\n    output_path = 'C:/output_path/bounding_boxes.shp'\n\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'OUTPUT': output_path  # Options: TEMPORARY_OUTPUT, Save to File\u2026, Save to Geopackage\u2026 etc.\n    }\n\n    result = processing.run('native:boundingboxes', parameters)\n\n    bounding_boxes_layer = QgsVectorLayer(result['OUTPUT'], 'Bounding Boxes', 'ogr')\n    QgsProject.instance().addMapLayer(bounding_boxes_layer)\n\ngenerate_bounding_boxes()"
    },
    {
        "tool_id": "native:buffer",
        "toolname": "buffer",
        "tool_description": "Computes a buffer area for all the features in an input layer, using a fixed or data defined distance.",
        "parameters": "INPUT: Layer to analyze\nDISTANCE: Buffer distance (from the boundary of each feature).\nSEGMENTS: Controls the number of line segments to use to approximate a quarter circle when creating rounded offsets.\nEND_CAP_STYLE: Controls how line endings are handled in the buffer. One of: 0 \u2014 Round, 1 \u2014 Flat, 2 \u2014 Square.\nJOIN_STYLE: Specifies whether round, miter or beveled joins should be used when offsetting corners in a line. Options are: 0 \u2014 Round, 1 \u2014 Miter, 2 \u2014 Bevel.\nMITER_LIMIT: Sets the maximum distance from the offset geometry to use when creating a mitered join as a factor of the offset distance (only applicable for miter join styles). Minimum: 1.0.\nDISSOLVE: Dissolve the final buffer. If True (checked), overlapping buffers will be dissolved (combined) into a single multipart feature.\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef buffer():\n    # Paths to input layers\n    data_path = \"D:/SpatialAnalysisAgent/Data/Point_data.shp\"\n    output_path = \"D:/Output_Directory/Output_layer.shp\"\n    data_layer = QgsVectorLayer(data_path, 'dataLayer', 'ogr')\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT': data_layer,\n        'DISTANCE':10,\n        'SEGMENTS':5,\n        'END_CAP_STYLE':0, # Available values - 0:Round, 1:Flat, 2:Square\n        'JOIN_STYLE':0, #Available values-  0: Round, 1: Miter, 2: Bevel\n        'MITER_LIMIT':2,\n        'DISSOLVE':False,\n        'SEPARATE_DISJOINT':False,\n        'OUTPUT':output_path}\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:buffer\", parameters)\n    ## Load the selected features as a new layer\n     output_layer = QgsVectorLayer(result['OUTPUT'], 'Buffer Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\nbuffer()"
    },
    {
        "tool_id": "native:bufferbym",
        "toolname": "bufferbym",
        "tool_description": "Creates variable width buffers along lines, using the M value of the line geometries as the diameter of the buffer at each vertex.",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nSEGMENTS: Segments. Number of the buffer segments per quarter circle.It can be a unique value (same value for all the features),or it can be taken from features data (the value candepend on feature attributes).. Type: [number ] Default: 16\nOUTPUT: Buffered. Specify the output (buffer) layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef buffer_by_segments():\n    # Define input and output paths\n    input_path = 'path/to/your/input_line_layer.shp'\n    output_path = 'path/to/your/output_buffer_layer.shp'\n    \n    # Load the input shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Line Layer', 'ogr')\n    \n    # Run the BufferByM algorithm\n    result = processing.run('native:bufferbym', {\n        'INPUT': input_path,\n        'SEGMENTS': 16,\n        'OUTPUT': output_path\n    })\n    \n    # Load the buffered layer to QGIS\n    buffered_layer = QgsVectorLayer(result['OUTPUT'], 'Buffered Layer', 'ogr')\n    QgsProject.instance().addMapLayer(buffered_layer)\n\n# Execute the function\nbuffer_by_segments()"
    },
    {
        "tool_id": "native:calculateexpression",
        "toolname": "calculateexpression",
        "tool_description": "NEWin3.34\nIt calculates the result of a QGIS expression and eliminates the need to use the same expression multiple times throughout a model when the same result is required more than once. Additionally, it enables use cases that would otherwise not be possible. For instance, you can generate a timestamp value once and use it multiple times within the model, if the timestamp were recalculated every time, the values would vary during the model\u2019s runtime.",
        "parameters": "INPUT: Input. Expression to calculate. Type: [expression] outputs =\nOUTPUT: Value. Calculated result value, the data type of theoutput will vary based on the specific expression usedin the algorithm.. Type: [Result Value]\n",
        "code_example": "import processing\nfrom qgis.core import QgsExpression, QgsProject, QgsVectorLayer\n\ndef calculate_expression(input_layer_path, output_path):\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n                                  \n    parameters = {\n        'INPUT': input_layer_path,\n        'EXPRESSION': 'attribute + 1',                                           \n        'OUTPUT': output_path\n    }\n                                    \n    result = processing.run(\"native:calculateexpression\", parameters)\n    \n                           \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Calculated_Expression_Output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                               \ninput_layer_path = \"D:/Data/InputLayer.shp\"\noutput_layer_path = \"D:/Data/Calculated_Expression_Output.shp\"\ncalculate_expression(input_layer_path, output_layer_path)"
    },
    {
        "tool_id": "native:calculatevectoroverlaps",
        "toolname": "calculatevectoroverlaps",
        "tool_description": "Calculates the area and percentage cover by which features from an input layer are overlapped by features from a selection of overlay layers.\nNew attributes are added to the output layer reporting the total area of overlap and percentage of the input feature overlapped by each of the selected overlay layers.",
        "parameters": "INPUT: Input layer. The input layer.. Type: [vector: any]\nLAYERS: Overlap layers. The overlay layers.. Type: [vector: any] [list] \nOUTPUT: Overlap. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nGRID_SIZE: Grid size Optional. If provided, the input geometries are snapped to a grid of the given size,and the result vertices are computed on that same grid. Requires \nGEOS 3.9.0 or higher.. Type: [number] Default: Not set outputs = \nOUTPUT: Overlap. The output layer with additional fields reporting theoverlap (in map units and percentage) of the input featureoverlapped by each of the selected layers.. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_vector_overlaps(input_layer_path, overlap_layers_paths, output_path, grid_size=None):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    overlap_layers = [QgsVectorLayer(path, \"Overlap Layer\", \"ogr\") for path in overlap_layers_paths]\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'LAYERS': overlap_layers_paths,\n        'OUTPUT': output_path,                                                                                                           \n    }\n\n    if grid_size:\n        parameters['GRID_SIZE'] = grid_size\n\n    result = processing.run('native:calculatevectoroverlaps', parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Overlaps', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = 'D:/Data/PrevalenceData.shp'\noverlap_layers_paths = ['D:/Data/Layer1.shp', 'D:/Data/Layer2.shp']\noutput_path = 'D:/workspace_directory/output_layer.shp'\ngrid_size = 0.02\n\ncalculate_vector_overlaps(input_layer_path, overlap_layers_paths, output_path, grid_size)"
    },
    {
        "tool_id": "native:categorizeusingstyle",
        "toolname": "categorizeusingstyle",
        "tool_description": "Sets a vector layer\u2019s renderer to a categorized renderer using matching symbols from a style database. If no style file is specified, symbols from the user\u2019s current symbol library are used instead.\nA specified expression or field is used to create categories for the renderer. Each category is individually matched to the symbols which exist within the specified QGIS XML style database. Whenever a matching symbol name is found, the category\u2019s symbol will be set to this matched symbol.\nIf desired, outputs can also be tables containing lists of the categories which could not be matched to symbols, and symbols which were not matched to categories.",
        "parameters": "INPUT: Input layer. Vector layer to apply a categorized style to. Type: [vector: any]\nFIELD: Categorize using expression. Field or expression to categorize the features. Type: [expression] \nSTYLE: Style database (leave blank to use saved symbols). File ( \n.XML ) containing the symbols to apply tothe input layer categories.The file can be obtained from the Style Manager Share symbols tool.If no file is specified, \nQGIS local symbols library isused.. Type: [file] \nCASE_SENSITIVE: Use case-sensitive match to symbol names. If True (checked), applies a case sensitive comparisonbetween the categories and symbols names. Type: [boolean] Default: False \nTOLERANT: Ignore non-alphanumeric characters while matching. If True (checked), non-alphanumeric characters in thecategories and symbols names will be ignored, allowinggreater tolerance during the match.. Type: [boolean] Default: False \nNON_MATCHING_CATEGORIES: Non-matching categories Optional. Output table for categories which do not match any symbol inthe database. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Skip output] \nNON_MATCHING_SYMBOLS: Non-matching symbol names Optional. Output table for symbols from the provided style database whichdo not match any category. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Skip output] outputs = \nNON_MATCHING_CATEGORIES: Non-matching categories. Lists categories which could not be matched to any symbol inthe provided style database. Type: [table] \nNON_MATCHING_SYMBOLS: Non-matching symbol names. Lists symbols from the provided style database which couldnot match any category. Type: [table] \nOUTPUT: Categorized layer. The input vector layer with the categorized style applied.No new layer is output.. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef categorize_using_style():\n    input_path = 'D:/input_layer.shp'\n    style_file = 'D:/style.xml'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"NonMatchingCategories.csv\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n    \n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'FIELD': 'category_field',\n        'STYLE': style_file,\n        'CASE_SENSITIVE': False,                                \n        'TOLERANT': False,                                \n        'NON_MATCHING_CATEGORIES': output_path,                                                                                                                                   \n        'NON_MATCHING_SYMBOLS': None                                                                                                                                   \n    }\n    \n    result = processing.run(\"native:categorizeusingstyle\", parameters)\n    \ncategorize_using_style()"
    },
    {
        "tool_id": "native:cellstackpercentile",
        "toolname": "cellstackpercentile",
        "tool_description": "Calculates the cell-wise percentile value of a stack of rasters and writes the results to an output raster. The percentile to return is determined by the percentile input value (ranges between 0 and 1). At each cell location, the specified percentile is obtained using the respective value from the stack of all overlaid and sorted cell values of the input rasters.\nThere are three methods for percentile calculation:\nThe linear interpolation methods return the unique values for different percentiles. Both interpolation methods follow their counterpart methods implemented by LibreOffice or Microsoft Excel.\nThe output raster\u2019s extent and resolution is defined by a reference raster. Input raster layers that do not match the cell size of the reference raster layer will be resampled using nearest neighbor resampling. NoData values in any of the input layers will result in a NoData cell output if the \u201cIgnore NoData values\u201d parameter is not set. The output raster data type will always be Float32 .",
        "parameters": "INPUT: Input layers. Raster layers to evaluate.If multiband rasters are used in the data raster stack, the algorithmwill always perform the analysis on the first band of the rasters. Type: [raster] [list]\nMETHOD: Method. Method for percentile calculation: 0 \u2014 Nearest rank: returns the value that is nearest to the specified percentile 1 \u2014 Inclusive linear interpolation \n(PERCENTILE.INC) 2 \u2014 Exclusive linear interpolation \n(PERCENTILE.EXC). Type: [enumeration] Default: 0 \nVALUE: Percentile. Value to rank among the respective values in the stack of all overlaidand sorted cell values from the input rasters. Between 0 and 1.. Type: [number] Default: 0.25 \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the input layers will result in a NoDatacell in the output raster. Type: [boolean] Default: True \nREFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, \nCRS, pixel dimensions). Type: [raster] \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef cellstackpercentile():\n    # Define parameters\n    input_rasters = ['input_raster_1.tif', 'input_raster_2.tif']  # Paths to your input rasters\n    reference_layer_path = 'reference_layer.tif'\n    output_path = 'output_raster.tif'\n\n    # Run the Cell Stack Percentile algorithm\n    parameters = {\n        'INPUT': input_rasters,\n        'METHOD': 0,  # 0 - Nearest rank, 1 - Inclusive linear interpolation, 2 - Exclusive linear interpolation\n        'VALUE': 0.25,\n        'IGNORE_NODATA': True,\n        'REFERENCE_LAYER': reference_layer_path,\n        'OUTPUT': output_path,\n        'OUTPUT_NODATA_VALUE': -9999.0\n    }\n\n    result = processing.run('native:cellstackpercentile', parameters)\n    \n    # Load the result layer to QGIS\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Cell Stack Percentile')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\ncellstackpercentile()"
    },
    {
        "tool_id": "native:cellstackpercentrankfromrasterlayer",
        "toolname": "cellstackpercentrankfromrasterlayer",
        "tool_description": "Calculates the cell-wise percentrank value of a stack of rasters based on an input value raster and writes them to an output raster.\nAt each cell location, the current value of the value raster is ranked among the respective values in the stack of all overlaid and sorted cell values of the input rasters. For values outside of the the stack value distribution, the algorithm returns NoData because the value cannot be ranked among the cell values.\nThere are two methods for percentile calculation:\nThe linear interpolation methods return the unique values for different percentiles. Both interpolation methods follow their counterpart methods implemented by LibreOffice or Microsoft Excel.\nThe output raster\u2019s extent and resolution is defined by a reference raster. Input raster layers that do not match the cell size of the reference raster layer will be resampled using nearest neighbor resampling. NoData values in any of the input layers will result in a NoData cell output if the \u201cIgnore NoData values\u201d parameter is not set. The output raster data type will always be Float32 .",
        "parameters": "INPUT: Input layers. Raster layers to evaluate.If multiband rasters are used in the data raster stack, the algorithmwill always perform the analysis on the first band of the rasters. Type: [raster] [list]\nINPUT_VALUE_RASTER: Value raster layer. The layer to rank the values among the stack of all overlaid layers. Type: [raster] \nVALUE_RASTER_BAND: Value raster band. Band of the \u201cvalue raster layer\u201d to compare to. Type: [integer] Default: 1 \nMETHOD: Method. Method for percentile calculation: 0 \u2014 Inclusive linear interpolation \n(PERCENTRANK.INC) 1 \u2014 Exclusive linear interpolation \n(PERCENTRANK.EXC). Type: [enumeration] Default: 0 \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the input layers will result in a NoDatacell in the output raster. Type: [boolean] Default: True \nREFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, \nCRS, pixel dimensions). Type: [raster] \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef cellstack_percent_rank_from_raster_layer():\n    # Define input and output paths\n    input_layers = ['D:/Data/Layer1.tif', 'D:/Data/Layer2.tif']\n    input_value_raster = 'D:/Data/ValueRaster.tif'\n    reference_layer = 'D:/Data/ReferenceLayer.tif'\n    output_path = 'C:/output_path/output_layer.tif'\n\n    # Load the raster layers\n    input_layer_list = [QgsRasterLayer(lyr) for lyr in input_layers]\n    input_value_raster_layer = QgsRasterLayer(input_value_raster)\n    reference_raster_layer = QgsRasterLayer(reference_layer)\n\n    # Run the Cellstack Percent Rank from Raster Layer algorithm\n    result = processing.run('native:cellstackpercentrankfromrasterlayer', {\n        'INPUT': input_layer_list,\n        'INPUT_VALUE_RASTER': input_value_raster_layer,\n        'VALUE_RASTER_BAND': 1,  # Default: 1\n        'METHOD': 0,  # 0: Inclusive linear interpolation, 1: Exclusive linear interpolation\n        'IGNORE_NODATA': True,\n        'REFERENCE_LAYER': reference_raster_layer,\n        'OUTPUT': output_path,\n        'OUTPUT_NODATA_VALUE': -9999.0  # Default: -9999.0\n    })\n\n    # Load the output layer to QGIS\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'PercentRankLayer')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\ncellstack_percent_rank_from_raster_layer()"
    },
    {
        "tool_id": "native:cellstackpercentrankfromvalue",
        "toolname": "cellstackpercentrankfromvalue",
        "tool_description": "Calculates the cell-wise percentrank value of a stack of rasters based on a single input value and writes them to an output raster.\nAt each cell location, the specified value is ranked among the respective values in the stack of all overlaid and sorted cell values from the input rasters. For values outside of the stack value distribution, the algorithm returns NoData because the value cannot be ranked among the cell values.\nThere are two methods for percentile calculation:\nThe linear interpolation methods return the unique percent rank for different values. Both interpolation methods follow their counterpart methods implemented by LibreOffice or Microsoft Excel.\nThe output raster\u2019s extent and resolution is defined by a reference raster. Input raster layers that do not match the cell size of the reference raster layer will be resampled using nearest neighbor resampling. NoData values in any of the input layers will result in a NoData cell output if the \u201cIgnore NoData values\u201d parameter is not set. The output raster data type will always be Float32 .",
        "parameters": "INPUT: Input layers. Raster layers to evaluate.If multiband rasters are used in the data raster stack, the algorithmwill always perform the analysis on the first band of the rasters. Type: [raster] [list]\nMETHOD: Method. Method for percentile calculation: 0 \u2014 Inclusive linear interpolation \n(PERCENTRANK.INC) 1 \u2014 Exclusive linear interpolation \n(PERCENTRANK.EXC). Type: [enumeration] Default: 0 \nVALUE: Value. Value to rank among the respective values in the stack of all overlaidand sorted cell values from the input rasters. Type: [number] Default: 10.0 \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the input layers will result in a NoDatacell in the output raster. Type: [boolean] Default: True \nREFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, \nCRS, pixel dimensions). Type: [raster] \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef cell_stack_percent_rank():\n    # Define input and output paths\n    input_layers = ['path_to_raster1.tif', 'path_to_raster2.tif']  # List of input rasters\n    reference_layer_path = 'path_to_reference_layer.tif'\n    output_path = 'path_to_output_layer.tif'\n    \n    parameters = {\n        'INPUT': input_layers,\n        'METHOD': 0,  # 0 \u2014 Inclusive linear interpolation (PERCENTRANK.INC), 1 \u2014 Exclusive linear interpolation (PERCENTRANK.EXC)\n        'VALUE': 10.0,\n        'IGNORE_NODATA': True,\n        'REFERENCE_LAYER': reference_layer_path,\n        'OUTPUT': output_path,\n        'OUTPUT_NODATA_VALUE': -9999.0\n    }\n\n    # Perform the cell stack percent rank calculation\n    result = processing.run(\"\"\"native:cellstackpercentrankfromvalue\", parameters)\n    \n                            \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Percent Rank Layer', 'gdal')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \ncell_stack_percent_rank()"
    },
    {
        "tool_id": "native:cellstatistics",
        "toolname": "cellstatistics",
        "tool_description": "Computes per-cell statistics based on input raster layers and for each cell writes the resulting statistics to an output raster. At each cell location, the output value is defined as a function of all overlaid cell values of the input rasters.\nBy default, a NoData cell in ANY of the input layers will result in a NoData cell in the output raster. If the Ignore NoData values option is checked, then NoData inputs will be ignored in the statistic calculation. This may result in NoData output for locations where all cells are NoData.\nThe Reference layer parameter specifies an existing raster layer to use as a reference when creating the output raster. The output raster will have the same extent, CRS, and pixel dimensions as this layer.\nCalculation details: Input raster layers that do not match the cell size of the reference raster layer will be resampled using nearestneighborresampling . The output raster data type will be set to the most complex data type present in the input datasets except when using the functions Mean , Standarddeviation and Variance (data type is always Float32 or Float64 depending on input float type) or Count and Variety (data type is always Int32 ).",
        "parameters": "INPUT: Input layers. Input raster layers. Type: [raster] [list]\nSTATISTIC: Statistic. Available statistics. Options: 0 \u2014 Sum 1 \u2014 Count 2 \u2014 Mean 3 \u2014 Median 4 \u2014 Standard deviation 5 \u2014 Variance 6 \u2014 Minimum 7 \u2014 Maximum 8 \u2014 Minority (least common value) 9 \u2014 Majority (most common value) 10 \u2014 Range (max - min) 11 \u2014 Variety (unique value count). Type: [enumeration] Default: 0 \nIGNORE_NODATA: Ignore NoData values. Calculate statistics also for all cells stacks, ignoring NoData occurrence.. Type: [boolean] Default: True \nREF_LAYER: Reference layer. The reference layer to create the output layerfrom (extent, \nCRS, pixel dimensions). Type: [raster] \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOUTPUT_NO_DATA_VALUE: Output NoData value Optional. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nOUTPUT: Output raster. Output raster layer containing the result. Type: [raster] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef perform_cell_statistics():\n    input_paths = ['D:/Data/raster1.tif', 'D:/Data/raster2.tif']\n    ref_layer_path = 'D:/Data/ref_layer.tif'\n    output_path = 'C:/output_path/output_raster.tif'\n\n    input_layers = [QgsRasterLayer(path, \"\"\"Input Layer\") for path in input_paths]\n    ref_layer = QgsRasterLayer(ref_layer_path, \"Reference Layer\")\n\n    parameters = {\n        'INPUT': input_layers,\n        'STATISTIC': 0,                                                                                                                                                                                                                                 \n        'IGNORE_NODATA': True,\n        'REF_LAYER': ref_layer,\n        'OUTPUT': output_path,\n        'OUTPUT_NO_DATA_VALUE': -9999.0\n    }\n\n    result = processing.run(\"native:cellstatistics\", parameters)\n\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Cell Statistics Result')\n    QgsProject.instance().addMapLayer(output_layer)\n\nperform_cell_statistics()"
    },
    {
        "tool_id": "native:centroids",
        "toolname": "centroids",
        "tool_description": "This algorithm creates a new point layer, with points representing the centroid of the geometries in an input layer.\nThe attributes associated to each point in the output layer are the same ones associated to the original features.",
        "parameters": "INPUT:\nALL_PARTS:\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_centroids():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n  \n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Census Tracts', 'ogr')\n\n    # Run the Centroids algorithm\n    result = processing.run('native:centroids', {\n        'INPUT': input_layer,\n        'ALL_PARTS': False,  # Generates centroid for each feature (geom in multi-part geometries)\n        'OUTPUT': output_path\n    })\n\n    # Load the centroid layer to QGIS\n    centroids_layer = QgsVectorLayer(result['OUTPUT'], 'Centroids', 'ogr')\n    QgsProject.instance().addMapLayer(centroids_layer)\n\n# Execute the function\ngenerate_centroids()"
    },
    {
        "tool_id": "native:clip",
        "toolname": "clip",
        "tool_description": "This algorithm creates a new point layer, with points representing the centroid of the geometries in an input layer.\nThe attributes associated to each point in the output layer are the same ones associated to the original features.",
        "parameters": "INPUT:\nALL_PARTS:\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_centroids():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n  \n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Census Tracts', 'ogr')\n\n    # Run the Centroids algorithm\n    result = processing.run('native:centroids', {\n        'INPUT': input_layer,\n        'ALL_PARTS': False,  # Generates centroid for each feature (geom in multi-part geometries)\n        'OUTPUT': output_path\n    })\n\n    # Load the centroid layer to QGIS\n    centroids_layer = QgsVectorLayer(result['OUTPUT'], 'Centroids', 'ogr')\n    QgsProject.instance().addMapLayer(centroids_layer)\n\n# Execute the function\ngenerate_centroids()"
    },
    {
        "tool_id": "native:collect",
        "toolname": "collect",
        "tool_description": "Takes a vector layer and collects its geometries into new multipart geometries.\nOne or more attributes can be specified to collect only geometries belonging to the same class (having the same value for the specified attributes), alternatively all geometries can be collected.\nAll output geometries will be converted to multi geometries, even those with just a single part. This algorithm does not dissolve overlapping geometries - they will be collected together without modifying the shape of each geometry part.\nSee the \u2018Promote to multipart\u2019 or \u2018Aggregate\u2019 algorithms for alternative options.\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nFIELD: Unique ID fields. Choose one or more attributes to collect the geometries. Type: [tablefield: any] [list]\nOUTPUT: Collected. Vector layer with collected geometries. Type: [same as input]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef collect_geometries():\n    # Define input and output paths\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/collected_layer.shp'\n  \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Collect Geometries algorithm\n    result = processing.run('native:collect', {\n        'INPUT': input_layer,\n        'FIELD': ['UniqueId1', 'UniqueId2'],  \n        'OUTPUT': output_path\n    })\n\n    # Load the collected geometries layer to QGIS\n    collected_layer = QgsVectorLayer(result['OUTPUT'], 'Collected Geometries', 'ogr')\n    QgsProject.instance().addMapLayer(collected_layer)\n\n# Execute the function\ncollect_geometries()"
    },
    {
        "tool_id": "native:combinestyles",
        "toolname": "combinestyles",
        "tool_description": "Combines multiple QGIS style databases into a single style database. If items of the same type with the same name exist in different source databases these will be renamed to have unique names in the output combined database.",
        "parameters": "INPUT: Input databases. Files containing\nQGIS style items. Type: [file] [list] \nOBJECTS: Objects to combine. Types of style items in the input databases you would like toput in the new database. These can be: 0 \u2014 Symbols 1 \u2014 Color ramps 2 \u2014 Text formats 3 \u2014 Label settings. Type: [enumeration] [list] \nOUTPUT: Output style database. Output \n.XML file combining the selected style items.One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nCOLORRAMPS: Color ramp count. . Type: [number] \nLABELSETTINGS: Label settings count. . Type: [number] \nOUTPUT: Output style database. Output \n.XML file combining the selected style items. Type: [file] \nSYMBOLS: Symbol count. . Type: [number] \nTEXTFORMATS: Text format count. . Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef combine_styles():\n    input_databases = ['path/to/style1.xml', 'path/to/style2.xml']  # list of input XML files\n    output_path = 'path/to/combined_styles.xml'  # specify output path\n\n    parameters = {\n        'INPUT': input_databases,  # list of input files\n        'OBJECTS': [0, 1, 2, 3],  # 0: Symbols, 1: Color ramps, 2: Text formats, 3: Label settings\n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"\"\"native:combinestyles\", parameters)\n\ncombine_styles()"
    },
    {
        "tool_id": "native:concavehull",
        "toolname": "concavehull",
        "tool_description": "Computes the concave hull of the features from an input point layer.",
        "parameters": "INPUT: Input point layer. Input point vector layer. Type: [vector: point]\nALPHA: Threshold. Number from 0 (maximum concave hull) to 1 (convex hull).. Type: [number] Default: 0.3\nHOLES: Allow holes. Choose whether to allow holes in the final concave hull. Type: [boolean] Default: True\nNO_MULTIGEOMETRY: Split multipart geometry into singlepart geometries. Check if you want to have singlepart geometriesinstead of multipart ones.. Type: [boolean] Default: False\nOUTPUT: Concave hull. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_concave_hull():\n    # Define input and output paths\n    input_path = 'D:/Data/InputPoints.shp'\n    output_path = 'C:/output_path/concave_hull_output.shp'\n    \n    # Load the input vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n    \n    # Define parameters for the concave hull algorithm\n    parameters = {\n        'INPUT': input_layer,\n        'ALPHA': 0.3,  # Number from 0 (maximum concave hull) to 1 (convex hull)\n        'HOLES': True,  # Allow holes in the final concave hull\n        'NO_MULTIGEOMETRY': False,  # Split multipart geometry into singlepart geometries\n        'OUTPUT': output_path  # Specify the output vector layer\n    }\n    \n    # Perform the concave hull operation\n    result = processing.run('native:concavehull', parameters)\n    \n    # Load the resulting concave hull layer\n    concave_hull_layer = QgsVectorLayer(result['OUTPUT'], 'Concave Hull', 'ogr')\n    QgsProject.instance().addMapLayer(concave_hull_layer)\n\n# Execute the function\ngenerate_concave_hull()"
    },
    {
        "tool_id": "native:condition",
        "toolname": "condition",
        "tool_description": "Adds a conditional branch into a model, allowing parts of the model to be executed based on the result of an expression evaluation. Mostly by using tool dependencies to control the flow of a model.",
        "parameters": "BRANCH: Field. Name of the condition. Type: [string]\nCONDITION: Field. Expression to evaluate. Type: [expression] outputs =\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef apply_condition():\n    input_path = 'D:/input_layer.shp'\n    output_path = 'C:/Users/Output/output_layer.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n                                         \n    condition_params = {\n        'BRANCH': 'Condition Name',\n        'CONDITION': expression,\n        'OUTPUT': output_path\n    }\n    \n                             \n    result = processing.run(\"native:condition\", condition_params)\n    \n                                                       \n    condition_layer = QgsVectorLayer(result['OUTPUT'], 'Condition_output', 'ogr')\n    QgsProject.instance().addMapLayer(condition_layer)\n\n                      \napply_condition()"
    },
    {
        "tool_id": "native:convertgpsdata",
        "toolname": "convertgpsdata",
        "tool_description": "Uses the GPSBabel tool to convert a GPS data file from a range of formats to the GPX standard format.",
        "parameters": "INPUT: Input file. File containing the data to convert. Type: [file]\nFORMAT: Format. Format of the file to convert,from this list .. Type: [enumeration] \nFEATURE_TYPE: Feature type. The type of data to convert 0 \u2014 Waypoints 1 \u2014 Routes 2 \u2014 Tracks. Type: [enumeration] Default: 0 \nOUTPUT: Output. Specification of the output \nGPX file. One of: Save to a Temporary File Save to File\u2026. Type: [vector: any] Default: [Save to temporary file] outputs = \nOUTPUT_LAYER: Output layer. Output layer with data in \nGPX standard format. Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef convert_gps_data():\n    # Define the input and output paths\n    input_file = 'D:/Data/input_file.gpx'\n    output_path = 'D:/Data/output_file.gpx'\n    \n    # Set processing parameters\n    parameters = {\n        'INPUT': input_file,\n        'FORMAT': 0,  # Specify the format type e.g., 0 for GPX\n        'FEATURE_TYPE': 0,  # 0 \u2014 Waypoints, 1 \u2014 Routes, 2 \u2014 Tracks\n        'OUTPUT': output_path\n    }\n    \n    # Run conversion\n    result = processing.run(\"\"\"native:convertgpsdata\", parameters)\n    \n                                         \n    converted_layer = QgsVectorLayer(result['OUTPUT'], 'Converted Output', 'ogr')\n    QgsProject.instance().addMapLayer(converted_layer)\n\n                      \nconvert_gps_data()"
    },
    {
        "tool_id": "native:convertgpxfeaturetype",
        "toolname": "convertgpxfeaturetype",
        "tool_description": "Uses the GPSBabel tool to convert GPX features from one type to another (e.g. converting all waypoint features to a route).",
        "parameters": "INPUT: Input file. File containing the data to convert. Type: [file]\nCONVERSION: Conversion. The type of conversion to apply 0 \u2014 Waypoints from a route 1 \u2014 Waypoints from a track 2 \u2014 Routes from waypoints 3 \u2014 Tracks from waypoints. Type: [enumeration] Default: 0 \nOUTPUT: Output. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [vector: point or line] Default: [Save to temporary file] outputs = \nOUTPUT: Output. Output layer with converted \nGPX features. Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef convert_gpx_feature_type():\n    input_path = 'D:/input_file.gpx'\n    output_path = 'D:/output_file.shp'\n    \n    parameters = {\n        'INPUT': input_path,\n        'CONVERSION': 0,  # 0 \u2014 Waypoints from a route, 1 \u2014 Waypoints from a track, 2 \u2014 Routes from waypoints, 3 \u2014 Tracks from waypoints\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"\"\"native:convertgpxfeaturetype\", parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Converted_GPX', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nconvert_gpx_feature_type()"
    },
    {
        "tool_id": "native:converttocurves",
        "toolname": "converttocurves",
        "tool_description": "Converts a geometry into its curved geometry equivalent.\nAlready curved geometries will be retained without change.\nAllows features in-place modification of line and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: line or polygon]\nDISTANCE: Maximum distance tolerance. The maximum distance allowed between the original location of verticesand where they would fall on the converted curved geometries. Type: [number] Default: 0.000001\nANGLE: Maximum angle tolerance. Segments are considered as suitable for replacing with an arcif the points are all regularly spaced on the candidate arc.This parameter specifies the maximum angular deviation (in degrees)allowed when testing for regular point spacing. Between 0 and 45\u00b0.. Type: [number] Default: 0.000001\nOUTPUT: Curves. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: compoundcurve or curvepolygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef convert_to_curves():\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    parameters = {\n        'INPUT': input_path,\n        'DISTANCE': 0.000001,\n        'ANGLE': 0.000001,\n        'OUTPUT': output_path  # 'Create temporary layer' or 'Save to File' or 'Save to Geopackage' or 'Save to Database Table' or 'Append to Layer'\n    }\n    \n    result = processing.run('native:converttocurves', parameters)\n\n    curves_layer = QgsVectorLayer(result['OUTPUT'], 'Curves', 'ogr')\n    QgsProject.instance().addMapLayer(curves_layer)\n\nconvert_to_curves()"
    },
    {
        "tool_id": "native:convexhull",
        "toolname": "convexhull",
        "tool_description": "Calculates the convex hull for each feature in an input layer.\nSee the \u2018Minimum bounding geometry\u2019 algorithm for a convex hull calculation which covers the whole layer or grouped subsets of features.\nAllows features in-place modification of polygon features\nDefault menu: Vector \u25ba Geoprocessing Tools",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nOUTPUT: Convex hull. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef generate_convex_hull():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'D:/Output/ConvexHull.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    result = processing.run('native:convexhull', {\n        'INPUT': input_layer,\n        'OUTPUT': output_path\n    })\n\n    convex_hull_layer = QgsVectorLayer(result['OUTPUT'], 'Convex Hull', 'ogr')\n    QgsProject.instance().addMapLayer(convex_hull_layer)\n\ngenerate_convex_hull()"
    },
    {
        "tool_id": "native:countpointsinpolygon",
        "toolname": "countpointsinpolygon",
        "tool_description": "Counts point features located within polygon features. This algorithm takes a points layer and a polygon layer and counts the number of points from the first one in each polygons of the second one. A new polygons layer is generated, with the exact same content as the input polygons layer, but containing an additional field with the points count corresponding to each polygon.",
        "parameters": "POLYGONS: Polygons\nPOINTS: Points\nWEIGHT: Weight field\nCLASSFIELD: Class field\nFIELD: Count field name\nOUTPUT: Count\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef CountPointsinPolygon():\n    # Paths to input layers\n    point_path = \"D:/SpatialAnalysisAgent/Data/SpatialQueryData/DamagedHouses.shp\"\n    polygon_path = \"D:/SpatialAnalysisAgent/Data/SpatialQueryData/SAF_SpecialStudyZone.shp\"\n    point_layer = QgsVectorLayer(point_path, 'PointLayer', 'ogr')\n    polygon_layer = QgsVectorLayer(polygon_path, 'PolygonLayer', 'ogr')\n    output_path = \"D:/Output_path/Output_layer.shp\"\n\n    # Define the parameters Example below:\n    parameters = {\n        'POLYGONS': polygon_layer,\n        'POINTS': point_layer,\n        'WEIGHT':'',\n        'CLASSFIELD':'',\n        'FIELD':'NUMPOINTS',\n        'OUTPUT': output_path\n        }\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:countpointsinpolygon\", parameters)\n    # Load the selected features as a new layer\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'counted', 'ogr')\n\t # Assuming there's only one polygon (PA)\n    feature = next(output_layer.getFeatures())\n    count = feature['NUMPOINTS']\n\tprint(f'Total counts: {count}')\nCountPointsinPolygon()"
    },
    {
        "tool_id": "native:createattributeindex",
        "toolname": "createattributeindex",
        "tool_description": "Creates an index against a field of the attribute table to speed up queries. The support for index creation depends on both the layer\u2019s data provider and the field type.\nNo outputs are created: the index is stored on the layer itself.",
        "parameters": "INPUT: Input Layer. Select the vector layer you want to create an attribute indexfor. Type: [vector: any]\nFIELD: Attribute to index. Field of the vector layer. Type: [tablefield: any] outputs = \nOUTPUT: Indexed layer. \nA copy of the input vector layer with an index for thespecified field. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef create_attribute_index(input_layer_path, field_name, output_path):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n                           \n    parameters = {\n        'INPUT': input_layer,\n        'FIELD': field_name,\n        'OUTPUT': output_path\n    }\n\n                                                  \n    result = processing.run('native:createattributeindex', parameters)\n\n                                                \n    updated_layer = QgsVectorLayer(output_path, 'Indexed Layer', 'ogr')\n    QgsProject.instance().addMapLayer(updated_layer)\n\n               \ninput_layer_path = \"D:/Data/PrevalenceData.shp\"\nfield_name = 'Population'\noutput_path = \"D:/workspace_directory/indexed_layer.shp\"\ncreate_attribute_index(input_layer_path, field_name, output_path)"
    },
    {
        "tool_id": "native:createconstantrasterlayer",
        "toolname": "createconstantrasterlayer",
        "tool_description": "Generates raster layer for given extent and cell size filled with the specified value.\nAdditionally an output data type can be specified. The algorithm will abort if a value has been entered that cannot be represented by the selected output raster data type.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nNUMBER: Constant value. Constant pixel value for the output raster layer.. Type: [number] Default: 1 \nOUTPUT: Constant. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 5: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Byte 1 \u2014 Integer16 2 \u2014 Unsigned Integer16 3 \u2014 Integer32 4 \u2014 Unsigned Integer32 5 \u2014 Float32 6 \u2014 Float64. Type: [enumeration] outputs = \nOUTPUT: Constant. Raster covering the desired extent with the specified pixelsize and value.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef create_constant_raster_layer(output_path):\n    # Define the parameters for creating a constant raster layer\n    parameters = {\n        'EXTENT': 'xmin, xmax, ymin, ymax',  # Example: '0, 10, 0, 10'\n        'TARGET_CRS': 'Project CRS',  # Example: 'EPSG:4326'\n        'PIXEL_SIZE': 1.0,\n        'NUMBER': 1,\n        'OUTPUT': output_path,\n        'OUTPUT_TYPE': 5  # Options: 0 \u2014 Byte, 1 \u2014 Integer16, 2 \u2014 Unsigned Integer16, 3 \u2014 Integer32, 4 \u2014 Unsigned Integer32, 5 \u2014 Float32, 6 \u2014 Float64\n    }\n    \n    # Run the 'create constant raster layer' tool\n    result = processing.run(\"\"\"native:createconstantrasterlayer\", parameters)\n    \n                                     \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Constant_Raster', 'gdal')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                     \noutput_path = \"D:/workspace_directory/output_raster.tif\"\ncreate_constant_raster_layer(output_path)"
    },
    {
        "tool_id": "native:createdirectory",
        "toolname": "createdirectory",
        "tool_description": "Creates a new directory on a file system. Directories will be created recursively, creating all required parent directories in order to construct the full specified directory path. No errors will be raised if the directory already exists.",
        "parameters": "PATH: Directory path. Folder path to create. Type: [string] outputs =\nOUTPUT: Output. Created folder. Type: [folder]\n",
        "code_example": "import processing\n\ndef create_directory():\n    # Define the parameters\n    parameters = {\n        'PATH': 'D:/workspace_directory/new_folder',  # Directory path\n        'OUTPUT': '''    }\n    # Run the create directory algorithm\n    result = processing.run(\"\"\"native:createdirectory\", parameters)\n\n                      \ncreate_directory()"
    },
    {
        "tool_id": "native:creategrid",
        "toolname": "creategrid",
        "tool_description": "Creates a vector layer with a grid covering a given extent. Grid cells can have different shapes:\nThe size and/or placement of each element in the grid is defined using a horizontal and vertical spacing. The CRS of the output layer must be defined. The grid extent and the spacing values must be expressed in the coordinates and units of this CRS.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "TYPE: Grid type. Shape of the grid. One of: 0 \u2014 Point 1 \u2014 Line 2 \u2014 Rectangle (polygon) 3 \u2014 Diamond (polygon) 4 \u2014 Hexagon (polygon). Type: [enumeration] Default: 0\nEXTENT: Grid extent. Extent of the grid Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nHSPACING: Horizontal spacing. Size of a grid cell on the X-axis. Type: [number] Default: 1.0 \nVSPACING: Vertical spacing. Size of a grid cell on the Y-axis. Type: [number] Default: 1.0 \nHOVERLAY: Horizontal overlay. Overlay distance between two consecutive grid cells on theX-axis. Type: [number] Default: 0.0 \nVOVERLAY: Vertical overlay. Overlay distance between two consecutive grid cells on theY-axis. Type: [number] Default: 0.0 \nCRS: Grid \nCRS. Coordinate reference system to apply to the grid. Type: [crs] Default: Project \nCRS \nOUTPUT: Grid. Resulting vector grid layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer] outputs = \nOUTPUT: Grid. Resulting vector grid layer. The output geometry type (point,line or polygon) depends on the Grid type .Features are created from top to bottom, left to right.The attribute table is filled with: an id coordinates on the left , right , top and bottom sides and their placement in the grid: row_index and column_index (available for point, rectangle and hexagon grid types). Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef create_grid():\n    # Define the input path and output path\n    output_path = \"\"\"C:/Users/Output/grid_output.shp\"\n\n                                              \n    parameters = {\n        'TYPE': 2,                                                                                \n        'EXTENT': '0,100,0,100',\n        'HSPACING': 1.0,\n        'VSPACING': 1.0,\n        'HOVERLAY': 0.0,\n        'VOVERLAY': 0.0,\n        'CRS': 'EPSG:4326',\n        'OUTPUT': output_path\n    }\n\n                                     \n    result = processing.run(\"native:creategrid\", parameters)\n\n                                   \n    grid_layer = QgsVectorLayer(result['OUTPUT'], 'Grid_output', 'ogr')\n    QgsProject.instance().addMapLayer(grid_layer)\n\n                      \ncreate_grid()"
    },
    {
        "tool_id": "native:createpointslayerfromtable",
        "toolname": "createpointslayerfromtable",
        "tool_description": "Creates points layer from a table with columns that contain coordinates fields.\nBesides X and Y coordinates you can also specify Z and M fields.",
        "parameters": "INPUT: Input layer. Input vector layer or a table.. Type: [vector: any]\nXFIELD: \nX field. Field containing the \nX coordinate. Type: [tablefield: any] \nYFIELD: \nY field. Field containing the \nY coordinate. Type: [tablefield: any] \nZFIELD: \nZ field Optional. Field containing the \nZ coordinate. Type: [tablefield: any] \nMFIELD: \nM field Optional. Field containing the \nM value. Type: [tablefield: any] \nTARGET_CRS: Target \nCRS. Coordinate reference system to use for layer.The provided coordinates are assumed to be compliant.. Type: [crs] Default: \nEPSG:4326 \nOUTPUT: Points from table. Specify the resulting point layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Points from table. The resulting point layer. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef create_points_from_table():\n    input_path = 'D:/input_table.csv'\n    output_path = 'D:/output_points.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Table\", \"ogr\")\n    \n                                                        \n    parameters = {\n        'INPUT': input_path,\n        'XFIELD': 'longitude',\n        'YFIELD': 'latitude',\n        'ZFIELD': '',            \n        'MFIELD': '',            \n        'TARGET_CRS': 'EPSG:4326',           \n        'OUTPUT': output_path,                                                                                              \n    }\n    \n                       \n    result = processing.run(\"native:createpointslayerfromtable\", parameters)\n    \n                              \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Points from Table', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \ncreate_points_from_table()"
    },
    {
        "tool_id": "native:createrandombinomialrasterlayer",
        "toolname": "createrandombinomialrasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with binomially distributed random values.\nBy default, the values will be chosen given an N of 10 and a probability of 0.5. This can be overridden by using the advanced parameter for N and probability. The raster data type is set to Integer types (Integer16 by default). The binomial distribution random values are defined as positive integer numbers. A floating point raster will represent a cast of integer values to floating point.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 0: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Integer16 1 \u2014 Unsigned Integer16 2 \u2014 Integer32 3 \u2014 Unsigned Integer32 4 \u2014 Float32 5 \u2014 Float64. Type: [enumeration] \nN: \nN. . Type: [number] Default: 10 \nPROBABILITY: Probability. . Type: [number] Default: 0.5 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with random values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef create_random_binomial_raster_layer():\n    output_path = 'C:/output_directory/random_binomial_raster.tif'\n    \n    parameters = {\n        'EXTENT': 'xmin,ymin,xmax,ymax', # Specify extent: use map canvas extent, calculate from layer, etc.\n        'TARGET_CRS': 'EPSG:4326', # Example CRS, options are: Project CRS, layer CRS, etc.\n        'PIXEL_SIZE': 1.0,\n        'OUTPUT': output_path,\n        'OUTPUT_TYPE': 0, # Output types: 0 \u2014 Integer16, 1 \u2014 Unsigned Integer16, 2 \u2014 Integer32, 3 \u2014 Unsigned Integer32, 4 \u2014 Float32, 5 \u2014 Float64\n        'N': 10,\n        'PROBABILITY': 0.5\n    }\n    \n    result = processing.run(\"\"\"native:createrandombinomialrasterlayer\", parameters)\n    raster_layer = QgsProject.instance().addMapLayer(result['OUTPUT'])\n\ncreate_random_binomial_raster_layer()"
    },
    {
        "tool_id": "native:createrandomexponentialrasterlayer",
        "toolname": "createrandomexponentialrasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with exponentially distributed random values.\nBy default, the values will be chosen given a lambda of 1.0. This can be overridden by using the advanced parameter for lambda. The raster data type is set to Float32 by default as the exponential distribution random values are floating point numbers.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 0: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Float32 1 \u2014 Float64. Type: [enumeration] \nLAMBDA: Lambda. . Type: [number] Default: 1.0 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with random values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef create_random_exponential_raster():\n    output_path = \"\"\"D:/workspace_directory/output_raster.tif\"\n    \n    parameters = {\n        'EXTENT': '',                                         \n        'TARGET_CRS': '',                                         \n        'PIXEL_SIZE': 1.0,\n        'OUTPUT': output_path,\n        'OUTPUT_TYPE': 0,                                     \n        'LAMBDA': 1.0\n    }\n    \n    result = processing.run(\"native:createrandomexponentialrasterlayer\", parameters)\n                                               \n                                                                           \n                                                     \n\ncreate_random_exponential_raster()"
    },
    {
        "tool_id": "native:createrandomgammarasterlayer",
        "toolname": "createrandomgammarasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with gamma distributed random values.\nBy default, the values will be chosen given an alpha and beta value of 1.0. This can be overridden by using the advanced parameter for alpha and beta. The raster data type is set to Float32 by default as the gamma distribution random values are floating point numbers.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 0: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Float32 1 \u2014 Float64. Type: [enumeration] \nALPHA: Alpha. . Type: [number] Default: 1.0 \nBETA: Beta. . Type: [number] Default: 1.0 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with randomly distributed values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef create_random_gamma_raster(output_path):\n    # Define the parameters\n    parameters = {\n        'EXTENT': 'xmin,xmax,ymin,ymax',  # Specify your coordinates\n        'TARGET_CRS': 'ProjectCrs',  # Define desired CRS\n        'PIXEL_SIZE': 1.0,  # Default pixel size\n        'OUTPUT': output_path,  # Output path\n        'OUTPUT_TYPE': 0,  # Output raster data type options: ['0': 'Float32', '1': 'Float64']\n        'ALPHA': 1.0,  # Default alpha value\n        'BETA': 1.0  # Default beta value\n    }\n\n    # Run the algorithm\n    result = processing.run(\"\"\"native:createrandomgammarasterlayer\", parameters)\n                            \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Random_Gamma_Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                         \noutput_path = 'D:/Output/random_gamma_raster.tif'\ncreate_random_gamma_raster(output_path)"
    },
    {
        "tool_id": "native:createrandomgeometricrasterlayer",
        "toolname": "createrandomgeometricrasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with geometrically distributed random values.\nBy default, the values will be chosen given a probability of 0.5. This can be overridden by using the advanced parameter for mean value. The raster data type is set to Integer types (Integer16 by default). The geometric distribution random values are defined as positive integer numbers. A floating point raster will represent a cast of integer values to floating point.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 0: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Integer16 1 \u2014 Unsigned Integer16 2 \u2014 Integer32 3 \u2014 Unsigned Integer32 4 \u2014 Float32 5 \u2014 Float64. Type: [enumeration] \nPROBABILITY: Probability. . Type: [number] Default: 0.5 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with randomly distributed values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef create_random_geometric_raster_layer():\n    output_path = \"\"\"D:/output/random_raster.tif\"\n    \n    parameters = {\n        'EXTENT': 'INPUT_LAYER_EXTENT',                                                                                                                         \n        'TARGET_CRS': 'Project_CRS',                                             \n        'PIXEL_SIZE': 1.0,\n        'OUTPUT': output_path,\n        'OUTPUT_TYPE': 0,                                                                                                                          \n        'PROBABILITY': 0.5\n    }\n    \n    result = processing.run(\"native:createrandomgeometricrasterlayer\", parameters)\n    \n    random_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Random_Raster')\n    QgsProject.instance().addMapLayer(random_raster_layer)\n\n                      \ncreate_random_geometric_raster_layer()"
    },
    {
        "tool_id": "native:createrandomnegativebinomialrasterlayer",
        "toolname": "createrandomnegativebinomialrasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with negative binomially distributed random values.\nBy default, the values will be chosen given a distribution parameter k of 10.0 and a probability of 0.5. This can be overridden by using the advanced parameters for k and probability. The raster data type is set to Integer types (Integer16 by default). The negative binomial distribution random values are defined as positive integer numbers. A floating point raster will represent a cast of integer values to floating point.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 0: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Integer16 1 \u2014 Unsigned Integer16 2 \u2014 Integer32 3 \u2014 Unsigned Integer32 4 \u2014 Float32 5 \u2014 Float64. Type: [enumeration] \nK_PARAMETER: Distribution parameter k. . Type: [number] Default: 10 \nPROBABILITY: Probability. . Type: [number] Default: 0.5 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with randomly distributed values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef create_random_negative_binomial_raster(output_path):\n    parameters = {\n        'EXTENT': 'Use map canvas extent',  # Options: 'Calculate from layer...', 'Calculate from layout map...', 'Calculate from bookmark...', 'Use map canvas extent', 'Draw on canvas', 'Enter the coordinates as xmin, xmax, ymin, ymax'\n        'TARGET_CRS': 'Project CRS',\n        'PIXEL_SIZE': 1.0,\n        'OUTPUT': output_path,\n        'OUTPUT_TYPE': 0,  # Options: 0 \u2014 Integer16, 1 \u2014 Unsigned Integer16, 2 \u2014 Integer32, 3 \u2014 Unsigned Integer32, 4 \u2014 Float32, 5 \u2014 Float64\n        'K_PARAMETER': 10,\n        'PROBABILITY': 0.5\n    }\n    \n    result = processing.run(\"\"\"native:createrandomnegativebinomialrasterlayer\", parameters)\n    \n    output_layer = QgsProject.instance().mapLayersByName('Random Negative Binomial')[0]\n    QgsProject.instance().addMapLayer(output_layer)\n\noutput_path = 'D:/output_random_negative_binomial.tif'\ncreate_random_negative_binomial_raster(output_path)"
    },
    {
        "tool_id": "native:createrandomnormalrasterlayer",
        "toolname": "createrandomnormalrasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with normally distributed random values.\nBy default, the values will be chosen given a mean of 0.0 and a standard deviation of 1.0. This can be overridden by using the advanced parameters for mean and standard deviation value. The raster data type is set to Float32 by default as the normal distribution random values are floating point numbers.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 0: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Float32 1 \u2014 Float64. Type: [enumeration] \nMEAN: Mean of normal distribution. . Type: [number] Default: 0.0 \nSTDDEV: Standard deviation of normal distribution. . Type: [number] Default: 1.0 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with randomly distributed values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef create_random_normal_raster_layer(output_path):\n    # Define the parameters\n    parameters = {\n        'EXTENT': 'xmin, xmax, ymin, ymax',  # Options: Calculate from layer, Calculate from layout map, Calculate from bookmark, Use map canvas extent, Draw on canvas\n        'TARGET_CRS': QgsProject.instance().crs(),  # Default: Project CRS\n        'PIXEL_SIZE': 1.0,  # Default: 1.0\n        'OUTPUT': output_path,  # Save to a Temporary File, Save to File\n        'OUTPUT_TYPE': 0,  # Options: 0 \u2014 Float32, 1 \u2014 Float64\n        'MEAN': 0.0,  # Default: 0.0\n        'STDDEV': 1.0,  # Default: 1.0\n    }\n    # Run the algorithm\n    result = processing.run(\"\"\"native:createrandomnormalrasterlayer\", parameters)\n                                  \n    output_raster = QgsRasterLayer(result['OUTPUT'], 'RandomNormalRasterLayer')\n    QgsProject.instance().addMapLayer(output_raster)\n\n                                            \noutput_raster_path = \"C:/path/to/output_raster.tif\"\ncreate_random_normal_raster_layer(output_raster_path)"
    },
    {
        "tool_id": "native:createrandompoissonrasterlayer",
        "toolname": "createrandompoissonrasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with poisson distributed random values.\nBy default, the values will be chosen given a mean of 1.0. This can be overridden by using the advanced parameter for mean value. The raster data type is set to Integer types (Integer16 by default). The poisson distribution random values are positive integer numbers. A floating point raster will represent a cast of integer values to floating point.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 0: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Integer16 1 \u2014 Unsigned Integer16 2 \u2014 Integer32 3 \u2014 Unsigned Integer32 4 \u2014 Float32 5 \u2014 Float64. Type: [enumeration] \nMEAN: Mean. . Type: [number] Default: 1.0 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with randomly distributed values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef create_random_poisson_raster():\n    output_path = \"\"\"D:/workspace_directory/output_raster.tif\"\n    parameters = {\n        'EXTENT': 'Calculate from layer\u2026',                                                                                                                                                                                              \n        'TARGET_CRS': QgsProject.instance().crs(),                        \n        'PIXEL_SIZE': 1.0,                \n        'OUTPUT': output_path,\n        'OUTPUT_TYPE': 0,                                                                                                                                \n        'MEAN': 1.0                \n    }\n    result = processing.run('native:createrandompoissonrasterlayer', parameters)\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Random_Poisson_Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\ncreate_random_poisson_raster()"
    },
    {
        "tool_id": "native:createrandomuniformrasterlayer",
        "toolname": "createrandomuniformrasterlayer",
        "tool_description": "Generates a raster layer for given extent and cell size filled with random values.\nBy default, the values will range between the minimum and maximum value of the specified output raster type. This can be overridden by using the advanced parameters for lower and upper bound value. If the bounds have the same value or both are zero (default) the algorithm will create random values in the full value range of the chosen raster data type. Choosing bounds outside the acceptable range of the output raster type will abort the algorithm.",
        "parameters": "EXTENT: Desired extent. Specify the spatial extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTARGET_CRS: Target \nCRS. \nCRS for the output raster layer. Type: [crs] Default: Project \nCRS \nPIXEL_SIZE: Pixel size. Pixel size \n(X=Y) in map units.. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_TYPE Default: 5: Output raster data type. Defines the data type of the output raster file. Options: 0 \u2014 Byte 1 \u2014 Integer16 2 \u2014 Unsigned Integer16 3 \u2014 Integer32 4 \u2014 Unsigned Integer32 5 \u2014 Float32 6 \u2014 Float64. Type: [enumeration] \nLOWER_BOUND: Lower bound for random number range. . Type: [number] Default: 0.0 \nUPPER_BOUND: Upper bound for random number range. . Type: [number] Default: 0.0 outputs = \nOUTPUT: Output raster. Raster covering the desired extent with the cellsize filled with randomly distributed values. Type: [raster]\n",
        "code_example": "from qgis.core import QgsProject\nimport processing\n\ndef generate_random_raster():\n    output_path = \"\"\"D:/workspace_directory/random_raster.tif\"\n    \n    parameters = {\n        'EXTENT': '10,20,10,20',                                   \n        'TARGET_CRS': 'EPSG:4326',                      \n        'PIXEL_SIZE': 1.0,\n        'OUTPUT': output_path,\n        'OUTPUT_TYPE': 5,                                                      \n        'LOWER_BOUND': 0.0,\n        'UPPER_BOUND': 1.0\n    }\n    \n    result = processing.run(\"native:createrandomuniformrasterlayer\", parameters)\n    \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Random_Raster', 'gdal')\n    QgsProject.instance().addMapLayer(output_layer)\n\ngenerate_random_raster()"
    },
    {
        "tool_id": "native:createspatialindex",
        "toolname": "createspatialindex",
        "tool_description": "Creates an index to speed up access to the features in a layer based on their spatial location. Support for spatial index creation is dependent on the layer\u2019s data provider.\nNo new output layers are created.\nDefault menu: Vector \u25ba Data Management Tools",
        "parameters": "INPUT: Input Layer. Input vector layer. Type: [vector: any]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_spatial_index():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_path, \n        'OUTPUT': output_path\n    }\n\n    # Run the create spatial index algorithm\n    result = processing.run('native:createspatialindex', parameters)\n    \n    # Load the resulting layer to QGIS (if needed, although the output for this tool is typically not a new layer)\n    \n# Execute the function\ncreate_spatial_index()"
    },
    {
        "tool_id": "native:dbscanclustering",
        "toolname": "dbscanclustering",
        "tool_description": "Clusters point features based on a 2D implementation of Density-based spatial clustering of applications with noise (DBSCAN) algorithm.\nThe algorithm requires two parameters, a minimum cluster size, and the maximum distance allowed between clustered points.",
        "parameters": "INPUT: Input layer. Layer to analyze. Type: [vector: point]\nMIN_SIZE: Minimum cluster size. Minimum number of features to generate a cluster. Type: [number] Default: 5 \nEPS: Maximum distance between clustered points. Distance beyond which two features can not belongto the same cluster (eps). Type: [number] Default: 1.0 \nOUTPUT: Clusters. Specify the vector layer for the result of the clustering. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] \nDBSCAN*: Treat border points as noise \n(DBSCAN*) Optional. If checked, points on the border of a cluster arethemselves treated as unclustered points, and onlypoints in the interior of a cluster are tagged asclustered.. Type: [boolean] Default: False \nFIELD_NAME: Cluster field name. Name of the field where the associated cluster numbershall be stored. Type: [string] Default: \n\u2018CLUSTER_ID\u2019 \nSIZE_FIELD_NAME: Cluster size field name. Name of the field with the count of features in the same cluster. Type: [string] Default: \n\u2018CLUSTER_SIZE\u2019 outputs = \nOUTPUT: Clusters. Vector layer containing the original features with afield setting the cluster they belong to. Type: [vector: point] \nNUM_CLUSTERS: Number of clusters. The number of clusters discovered. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef dbscan_clustering():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'D:/output_path/ClusteredPoints.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'MIN_SIZE': 5,\n        'EPS': 1.0,\n        'OUTPUT': output_path,\n        'DBSCAN*': False,\n        'FIELD_NAME': 'CLUSTER_ID',\n        'SIZE_FIELD_NAME': 'CLUSTER_SIZE'\n    }\n    \n    result = processing.run('native:dbscanclustering', parameters)\n    \n    clustered_layer = QgsVectorLayer(result['OUTPUT'], 'Clustered Points', 'ogr')\n    QgsProject.instance().addMapLayer(clustered_layer)\n\ndbscan_clustering()"
    },
    {
        "tool_id": "native:delaunaytriangulation",
        "toolname": "delaunaytriangulation",
        "tool_description": "Creates a polygon layer with the Delaunay triangulation corresponding to the input point layer.\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input point vector layer. Type: [vector: point]\nTOLERANCE: Tolerance Optional. Specifies an optional snapping tolerance which can be used to improve the robustness of the triangulation.. Type: [number] Default: 0.0\nADD_ATTRIBUTES: Add point IDs to output. Specifies whether fields storing involved point features ID should be added to the output.If False, an id field is used to identify the polygons.. Type: [boolean] Default: True\nOUTPUT: Delaunay triangulation. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef delaunay_triangulation():\n    # Define input and output paths\n    input_path = 'D:/Data/InputPoints.shp'\n    output_path = 'C:/output_path/delaunay_output.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n\n    # Run the Delaunay Triangulation algorithm\n    result = processing.run('native:delaunaytriangulation', {\n        'INPUT': input_layer,\n        'TOLERANCE': 0.0,\n        'ADD_ATTRIBUTES': True,\n        'OUTPUT': output_path\n    })\n\n    # Load the output layer to QGIS\n    triangulation_layer = QgsVectorLayer(result['OUTPUT'], 'Delaunay Triangulation', 'ogr')\n    QgsProject.instance().addMapLayer(triangulation_layer)\n\n# Execute the function\ndelaunay_triangulation()"
    },
    {
        "tool_id": "native:deletecolumn",
        "toolname": "deletecolumn",
        "tool_description": "Takes a vector layer and generates a new one that has the same features but without the selected columns.",
        "parameters": "INPUT: Input layer. Input vector layer to drop field(s) from. Type: [vector: any]\nCOLUMN: Fields to drop. The field(s) to drop. Type: [tablefield: any] [list] \nOUTPUT: Remaining fields. Specify the output vector layer with the remaining fields.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Remaining fields. Vector layer with the remaining fields. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef drop_fields_from_layer():\n    # Define the input and output paths\n    input_layer_path = 'D:/input_layer.shp'\n    output_path = 'C:/Users/Output/remaining_fields.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n                                                    \n    parameters = {\n        'INPUT': input_layer_path,\n        'COLUMN': ['field1', 'field2'],                           \n        'OUTPUT': output_path                                                                                                                  \n    }\n    \n                                   \n    result = processing.run(\"native:deletecolumn\", parameters)\n    \n                                                    \n    remaining_fields_layer = QgsVectorLayer(result['OUTPUT'], 'Remaining Fields', 'ogr')\n    QgsProject.instance().addMapLayer(remaining_fields_layer)\n\n                      \ndrop_fields_from_layer()"
    },
    {
        "tool_id": "native:deleteduplicategeometries",
        "toolname": "deleteduplicategeometries",
        "tool_description": "Finds and removes duplicated geometries.\nAttributes are not checked, so in case two features have identical geometries but different attributes, only one of them will be added to the result layer.",
        "parameters": "INPUT: Input layer. The layer with duplicate geometries you want to clean. Type: [vector: any]\nOUTPUT: Cleaned. Specify the output layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nDUPLICATE_COUNT: Count of discarded duplicate records. Count of discarded duplicate records. Type: [number] \nOUTPUT: Cleaned. The output layer without any duplicated geometries. Type: [same as input] \nRETAINED_COUNT: Count of retained records. Count of unique records. Type: [number]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef delete_duplicate_geometries(input_layer_path, output_layer_path):\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n                                                   \n    result = processing.run('native:deleteduplicategeometries', {\n        'INPUT': input_layer,\n        'OUTPUT': output_layer_path                                                                                                                     \n    })\n\n                                    \n    cleaned_layer = QgsVectorLayer(result['OUTPUT'], 'Cleaned Layer', 'ogr')\n    QgsProject.instance().addMapLayer(cleaned_layer)\n\n               \ninput_layer_path = 'D:/Data/InputLayer.shp'\noutput_layer_path = 'D:/workspace_directory/CleanedLayer.shp'\ndelete_duplicate_geometries(input_layer_path, output_layer_path)"
    },
    {
        "tool_id": "native:deleteholes",
        "toolname": "deleteholes",
        "tool_description": "Takes a polygon layer and removes holes in polygons. It creates a new vector layer in which polygons with holes have been replaced by polygons with only their external ring. Attributes are not modified.\nAn optional minimum area parameter allows removing only holes which are smaller than a specified area threshold. Leaving this parameter at 0.0 results in all holes being removed.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input polygon vector layer. Type: [vector: polygon]\nMIN_AREA: Remove holes with area less than Optional. Only holes with an area less than this threshold will bedeleted.With a value of 0.0 , all the holes will be deleted.. Type: [number ] Default: 0.0 \nOUTPUT: Cleaned. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Cleaned. The output (cleaned) vector layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef remove_holes(input_layer_path, output_path):\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Layer', 'ogr')\n    \n    parameters = {\n        'INPUT': input_layer,\n        'MIN_AREA': 0.0,\n        'OUTPUT': output_path  # Options: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026\n    }\n    \n    result = processing.run('native:deleteholes', parameters)\n    \n    cleaned_layer = QgsVectorLayer(result['OUTPUT'], 'Cleaned Layer', 'ogr')\n    QgsProject.instance().addMapLayer(cleaned_layer)\n\ninput_layer_path = \"\"\"D:/Data/PolygonData.shp\"\noutput_path = \"D:/workspace_directory/cleaned_layer.shp\"\nremove_holes(input_layer_path, output_path)"
    },
    {
        "tool_id": "native:densifygeometries",
        "toolname": "densifygeometries",
        "tool_description": "Takes a polygon or line layer and generates a new one in which the geometries have a larger number of vertices than the original one.\nIf the geometries have Z or M values present then these will be linearly interpolated at the added vertices.\nThe number of new vertices to add to each segment is specified as an input parameter.\nAllows features in-place modification of line and polygon features\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nVERTICES: Vertices to add. Number of vertices to add to each segment. Type: [number] Default: 1 \nOUTPUT: Densified. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Densified. The output (densified) vector layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef densify_geometries(input_layer_path, output_path):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_layer_path,                                                                     \n        'VERTICES': 1,                                                                        \n        'OUTPUT': output_path                                                                                            \n    }\n    \n    result = processing.run(\"native:densifygeometries\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Densified', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = \"D:/Data/LinesOrPolygons.shp\"\noutput_path = \"D:/workspace_directory/output_layer.shp\"\ndensify_geometries(input_layer_path, output_path)"
    },
    {
        "tool_id": "native:densifygeometriesgivenaninterval",
        "toolname": "densifygeometriesgivenaninterval",
        "tool_description": "Takes a polygon or line layer and generates a new one in which the geometries have a larger number of vertices than the original one.\nThe geometries are densified by adding regularly placed extra vertices inside each segment so that the maximum distance between any two vertices does not exceed the specified distance.\nIf the geometries have Z or M values present then these will be linearly interpolated at the added vertices.\nExample\nSpecifying a distance of 3 would cause the segment [00]->[100] to be converted to [00]->[2.50]->[50]->[7.50]->[100] , since 3 extra vertices are required on the segment and spacing these at 2.5 increments allows them to be evenly spaced over the segment.\nAllows features in-place modification of line and polygon features",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nINTERVAL: Interval between vertices to add. Maximum distance between two consecutive vertices. Type: [number ] Default: 1.0\nOUTPUT: Densified. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef densify_geometries():\n    input_path = 'D:/Data/InputGeometries.shp'\n    output_path = 'C:/output_path/densified_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Geometries', 'ogr')\n\n    result = processing.run('native:densifygeometriesgivenaninterval', {\n        'INPUT': input_layer,\n        'INTERVAL': 1.0,\n        'OUTPUT': output_path\n    })\n\n    densified_layer = QgsVectorLayer(result['OUTPUT'], 'Densified Geometries', 'ogr')\n    QgsProject.instance().addMapLayer(densified_layer)\n\ndensify_geometries()"
    },
    {
        "tool_id": "native:detectvectorchanges",
        "toolname": "detectvectorchanges",
        "tool_description": "Compares two vector layers, and determines which features are unchanged, added or deleted between the two. It is designed for comparing two different versions of the same dataset.",
        "parameters": "ORIGINAL: Original layer. The vector layer considered as the original version. Type: [vector: any]\nREVISED: Revised layer. The revised or modified vector layer. Type: [vector: any] \nCOMPARE_ATTRIBUTES: Attributes to consider for match Optional. Attributes to consider for match. By default, all attributesare compared.. Type: [tablefield: any] [list] \nMATCH_TYPE: Geometry comparison behavior Optional. Defines the criteria for comparison. Options: 0 \u2014 Exact Match: includes the order and vertices count ofgeometries 1 \u2014 Tolerant Match (Topological Equality): geometries areconsidered equal. Type: [enumeration] Default: 1 \nUNCHANGED: Unchanged features Optional. Specify the output vector layer containing the unchangedfeatures. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: same as Original layer] \nADDED: Added features Optional. Specify the output vector layer containing the added features.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: same as Original layer] \nDELETED: Deleted features Optional. Specify the output vector layer containing the deletedfeatures. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: same as Original layer] outputs = \nUNCHANGED: Unchanged features. Vector layer containing the unchanged features.. Type: [vector: same as Original layer] \nADDED: Added features. Vector layer containing the added features.. Type: [vector: same as Original layer] \nDELETED: Deleted features. Vector layer containing the deleted features.. Type: [vector: same as Original layer] \nUNCHANGED_COUNT: Count of unchanged features. Count of unchanged features.. Type: [number] \nADDED_COUNT: Count of features added in revised layer. Count of features added in revised layer.. Type: [number] \nDELETED_COUNT: Count of features deleted from original layer. Count of features deleted from original layer.. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef detect_vector_changes():\n    # Define input and output paths\n    original_layer_path = 'D:/Data/OriginalLayer.shp'\n    revised_layer_path = 'D:/Data/RevisedLayer.shp'\n    unchanged_output_path = 'C:/output_path/Unchanged.shp'\n    added_output_path = 'C:/output_path/Added.shp'\n    deleted_output_path = 'C:/output_path/Deleted.shp'\n\n    # Load the shapefiles as vector layers\n    original_layer = QgsVectorLayer(original_layer_path, 'Original Layer', 'ogr')\n    revised_layer = QgsVectorLayer(revised_layer_path, 'Revised Layer', 'ogr')\n\n    # Run the detect vector changes algorithm\n    result = processing.run('native:detectvectorchanges', {\n        'ORIGINAL': original_layer_path,\n        'REVISED': revised_layer_path,\n        'COMPARE_ATTRIBUTES': [],  # Optional\n        'MATCH_TYPE': 1,  # Options: 0 \u2014 Exact Match, 1 \u2014 Tolerant Match (Topological Equality)\n        'UNCHANGED': unchanged_output_path,\n        'ADDED': added_output_path,\n        'DELETED': deleted_output_path\n    })\n\n    # Load the resulting layers to QGIS\n    unchanged_layer = QgsVectorLayer(result['UNCHANGED'], 'Unchanged Features', 'ogr')\n    added_layer = QgsVectorLayer(result['ADDED'], 'Added Features', 'ogr')\n    deleted_layer = QgsVectorLayer(result['DELETED'], 'Deleted Features', 'ogr')\n    \n    QgsProject.instance().addMapLayer(unchanged_layer)\n    QgsProject.instance().addMapLayer(added_layer)\n    QgsProject.instance().addMapLayer(deleted_layer)\n\n# Execute the function\ndetect_vector_changes()"
    },
    {
        "tool_id": "native:difference",
        "toolname": "difference",
        "tool_description": "Compares two vector layers, and determines which features are unchanged, added or deleted between the two. It is designed for comparing two different versions of the same dataset.",
        "parameters": "ORIGINAL: Original layer. The vector layer considered as the original version. Type: [vector: any]\nREVISED: Revised layer. The revised or modified vector layer. Type: [vector: any] \nCOMPARE_ATTRIBUTES: Attributes to consider for match Optional. Attributes to consider for match. By default, all attributesare compared.. Type: [tablefield: any] [list] \nMATCH_TYPE: Geometry comparison behavior Optional. Defines the criteria for comparison. Options: 0 \u2014 Exact Match: includes the order and vertices count ofgeometries 1 \u2014 Tolerant Match (Topological Equality): geometries areconsidered equal. Type: [enumeration] Default: 1 \nUNCHANGED: Unchanged features Optional. Specify the output vector layer containing the unchangedfeatures. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: same as Original layer] \nADDED: Added features Optional. Specify the output vector layer containing the added features.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: same as Original layer] \nDELETED: Deleted features Optional. Specify the output vector layer containing the deletedfeatures. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: same as Original layer] outputs = \nUNCHANGED: Unchanged features. Vector layer containing the unchanged features.. Type: [vector: same as Original layer] \nADDED: Added features. Vector layer containing the added features.. Type: [vector: same as Original layer] \nDELETED: Deleted features. Vector layer containing the deleted features.. Type: [vector: same as Original layer] \nUNCHANGED_COUNT: Count of unchanged features. Count of unchanged features.. Type: [number] \nADDED_COUNT: Count of features added in revised layer. Count of features added in revised layer.. Type: [number] \nDELETED_COUNT: Count of features deleted from original layer. Count of features deleted from original layer.. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef detect_vector_changes():\n    # Define input and output paths\n    original_layer_path = 'D:/Data/OriginalLayer.shp'\n    revised_layer_path = 'D:/Data/RevisedLayer.shp'\n    unchanged_output_path = 'C:/output_path/Unchanged.shp'\n    added_output_path = 'C:/output_path/Added.shp'\n    deleted_output_path = 'C:/output_path/Deleted.shp'\n\n    # Load the shapefiles as vector layers\n    original_layer = QgsVectorLayer(original_layer_path, 'Original Layer', 'ogr')\n    revised_layer = QgsVectorLayer(revised_layer_path, 'Revised Layer', 'ogr')\n\n    # Run the detect vector changes algorithm\n    result = processing.run('native:detectvectorchanges', {\n        'ORIGINAL': original_layer_path,\n        'REVISED': revised_layer_path,\n        'COMPARE_ATTRIBUTES': [],  # Optional\n        'MATCH_TYPE': 1,  # Options: 0 \u2014 Exact Match, 1 \u2014 Tolerant Match (Topological Equality)\n        'UNCHANGED': unchanged_output_path,\n        'ADDED': added_output_path,\n        'DELETED': deleted_output_path\n    })\n\n    # Load the resulting layers to QGIS\n    unchanged_layer = QgsVectorLayer(result['UNCHANGED'], 'Unchanged Features', 'ogr')\n    added_layer = QgsVectorLayer(result['ADDED'], 'Added Features', 'ogr')\n    deleted_layer = QgsVectorLayer(result['DELETED'], 'Deleted Features', 'ogr')\n    \n    QgsProject.instance().addMapLayer(unchanged_layer)\n    QgsProject.instance().addMapLayer(added_layer)\n    QgsProject.instance().addMapLayer(deleted_layer)\n\n# Execute the function\ndetect_vector_changes()"
    },
    {
        "tool_id": "native:dissolve",
        "toolname": "dissolve",
        "tool_description": "Takes a vector layer and combines its features into new features. One or more attributes can be specified to dissolve features belonging to the same class (having the same value for the specified attributes), alternatively all features can be dissolved to a single feature.\nAll output geometries will be converted to multi geometries. In case the input is a polygon layer, common boundaries of adjacent polygons being dissolved will get erased. If enabled, the optional \u201cKeep disjoint features separate\u201d setting will cause features and parts that do not overlap or touch to be exported as separate features (instead of parts of a single multipart feature).\nThe resulting attribute table will have the same fields as the input layer. The values in the output layer\u2019s fields are the ones of the first input feature that happens to be processed.\nDefault menu: Vector \u25ba Geoprocessing Tools",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nFIELD: Dissolve field(s) Optional. Features having the same value for theselected field(s) will be replaced with asingle one and their geometries are merged. If no field is provided then all thefeatures are dissolved, resulting in asingle (multipart) feature. Fig. 28.80 Dissolve the polygon layer on a common attribute (2 multipart features) \uf0c1. Type: [tablefield: any] [list] Default: []\nOUTPUT: Dissolved. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]\nSEPARATE_DISJOINT: Keep disjoint features separate. Parts of dissolved features are exported as separate features(instead of parts of a multipart feature). Fig. 28.81 source (left), dissolve all (3 distinct features - right) \uf0c1 Fig. 28.82 source (left), dissolve on field (5 distinct features - right) \uf0c1. Type: [boolean] Default: False",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef dissolve_layer():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/dissolved_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    # Run the Dissolve algorithm\n    result = processing.run('native:dissolve', {\n        'INPUT': input_path,\n        'FIELD': [],  # Optional: provide fields if needed\n        'OUTPUT': output_path,  # Options: 'TEMPORARY_OUTPUT', 'Save to File\u2026', 'Save to Geopackage\u2026', 'Save to Database Table\u2026'\n        'SEPARATE_DISJOINT': False\n    })\n\n    # Load the dissolved layer to QGIS\n    dissolved_layer = QgsVectorLayer(result['OUTPUT'], 'Dissolved Layer', 'ogr')\n    QgsProject.instance().addMapLayer(dissolved_layer)\n\n# Execute the function\ndissolve_layer()"
    },
    {
        "tool_id": "native:downloadgpsdata",
        "toolname": "downloadgpsdata",
        "tool_description": "Uses the GPSBabel tool to download data from a GPS device into the GPX standard format.",
        "parameters": "DEVICE: Device. The\nGPS device used to create the data.Must be declared in \nGPS Settings dialog.. Type: [enumeration] Default: Garmin serial \nPORT: Port. The port the device is connected to.Available ports depend on the \nOS.. Type: [enumeration] \nFEATURE_TYPE: Feature type. The type of data to convert 0 \u2014 Waypoints 1 \u2014 Routes 2 \u2014 Tracks. Type: [enumeration] Default: 0 \nOUTPUT: Output. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [vector: any] Default: [Save to temporary file] outputs = \nOUTPUT_LAYER: Output layer. Output layer with data in \nGPX standard format. Type: [vector: any]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef download_gps_data():\n    # Define the output path\n    output_path = \"\"\"D:/output/downloaded_gps_data.shp\"\n\n                               \n    gps_params = {\n        'DEVICE': 'Garmin serial',                                                                               \n        'PORT': '',                                                           \n        'FEATURE_TYPE': 0,                                         \n        'OUTPUT': output_path\n    }\n    \n                                         \n    result = processing.run(\"native:downloadgpsdata\", gps_params)\n\n                              \n    gps_layer = QgsVectorLayer(result['OUTPUT'], 'Downloaded_GPS_Data', 'ogr')\n    QgsProject.instance().addMapLayer(gps_layer)\n\n                      \ndownload_gps_data()"
    },
    {
        "tool_id": "native:downloadvectortiles",
        "toolname": "downloadvectortiles",
        "tool_description": "NEWin3.32\nDownloads vector tiles of an input vector tile layer and saves them in a local vector tile file.",
        "parameters": "INPUT: Input layer.\nA vector tile layer to extract some tiles from. Type: [vector tiles] \nEXTENT: Extent. Specify the spatial extent of the downloaded area.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nMAX_ZOOM: Maximum zoom level to download. Defines how far to zoom in and fetch data from the tiles. Type: [number] Default: 10 \nTILE_LIMIT: Tile limit. Maximum number of tiles to download, considering the zoom levels and the extent.. Type: [number] Default: 100 \nOUTPUT: Output. Specification of the output vector tile file. One of: Save to a Temporary File Save to File\u2026. Type: [vector tiles] Default: [Save to temporary file] outputs = \nOUTPUT: Output. \nA local vector tile file storing the downloaded tiles.. Type: [vector tiles]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef download_vector_tiles(output_path):\n    parameters = {\n        'INPUT': 'path to your input vector tile layer',  # type [vector tiles]\n        'EXTENT': 'user specified extent option',  # options: ['Calculate from layer', 'Calculate from layout map', 'Calculate from bookmark', 'Use map canvas extent', 'Draw on canvas', 'Enter the coordinates as xmin, xmax, ymin, ymax']\n        'MAX_ZOOM': 10,  # type [number] default: 10\n        'TILE_LIMIT': 100,  # type [number] default: 100\n        'OUTPUT': output_path  # type [vector tiles] default: [Save to temporary file]\n    }\n    result = processing.run(\"\"\"native:downloadvectortiles\", parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Downloaded Vector Tiles', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\noutput_path = \"D:/workspace_directory/downloaded_vector_tiles.mbtiles\"\ndownload_vector_tiles(output_path)"
    },
    {
        "tool_id": "native:dropgeometries",
        "toolname": "dropgeometries",
        "tool_description": "Creates a simple geometryless copy of the input layer attribute table. It keeps the attribute table of the source layer.\nIf the file is saved in a local folder, you can choose between many file formats.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nOUTPUT: Dropped geometries. Specify the output geometryless layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [table]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef drop_geometries():\n    input_path = 'D:/Data/Data.shp' \n    output_path = 'C:/output_path/output_layer.csv' \n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    result = processing.run('native:dropgeometries', {\n        'INPUT': input_layer,\n        'OUTPUT': output_path\n    })\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Dropped Geometries', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ndrop_geometries()"
    },
    {
        "tool_id": "native:dropmzvalues",
        "toolname": "dropmzvalues",
        "tool_description": "Removes M (measure) or Z (altitude) values from input geometries.",
        "parameters": "INPUT: Input layer. Input vector layer with\nM or \nZ values. Type: [vector: any] \nDROP_M_VALUES: Drop \nM Values. Removes the \nM values from the geometries. Type: [boolean] Default: False \nDROP_Z_VALUES: Drop \nZ Values. Removes the \nZ values from the geometries. Type: [boolean] Default: False \nOUTPUT: \nZ/M Dropped. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: \nZ/M Dropped. The output vector layer (identical to the input layer,except that the \nM and/or \nZ dimensions have been removedfrom the geometries).. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef drop_mz_values():\n    input_path = 'D:/path/to/your/input_layer.shp'\n    output_path = 'D:/path/to/your/output_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'DROP_M_VALUES': True,                                \n        'DROP_Z_VALUES': False,                                \n        'OUTPUT': output_path                             \n    }\n    \n    result = processing.run('native:dropmzvalues', parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Z/M Dropped', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ndrop_mz_values()"
    },
    {
        "tool_id": "native:dtmslopebasedfilter",
        "toolname": "dtmslopebasedfilter",
        "tool_description": "NEWin3.34\nCan be used to filter a digital elevation model in order to classify its cells into ground and object (non-ground) cells.\nThe tool uses concepts as described by Vosselman (2000) and is based on the assumption that a large height difference between two nearby cells is unlikely to be caused by a steep slope in the terrain. The probability that the higher cell might be non-ground increases when the distance between the two cells decreases. Therefore the filter defines a maximum height difference ( dz_max ) between two cells as a function of the distance ( d ) between the cells ( dz_max(d)=d ). A cell is classified as terrain if there is no cell within the kernel radius to which the height difference is larger than the allowed maximum height difference at the distance between these two cells.\nThe approximate terrain slope ( s ) parameter is used to modify the filter function to match the overall slope in the study area ( dz_max(d)=d*s ). A 5 % confidence interval ( ci=1.65*sqrt(2*stddev) ) may be used to modify the filter function even further by either relaxing ( dz_max(d)=d*s+ci ) or amplifying ( dz_max(d)=d*s-ci ) the filter criterium.\nReferences: Vosselman, G. (2000): Slope based filtering of laser altimetry data. IAPRS, Vol. XXXIII, Part B3, Amsterdam, The Netherlands, 935-942",
        "parameters": "INPUT: Input layer. Digital Terrain Model raster layer. Type: [raster]\nBAND: Band number. The band of the \nDEM to consider. Type: [number] [list] \nRADIUS: Kernel radius (pixels). The radius of the filter kernel (in pixels).Must be large enough to reach ground cells next to non-ground objects.. Type: [number] Default: 5 \nTERRAIN_SLOPE: Terrain slope (%, pixel size/vertical units). The approximate terrain slope in % .The terrain slope must be adjusted to account for the ratio of height units vs raster pixel dimensions.Used to relax the filter criterium in steeper terrain.. Type: [number] Default: 30 \nFILTER_MODIFICATION: Filter modification. Choose whether to apply the filter kernel without modificationor to use a confidence interval to relax or amplify the height criterium. 0 - None 1 - Relax filter 2 - Amplify. Type: [list] Default: 0 \nSTANDARD_DEVIATION: Standard deviation. The standard deviation used to calculate a 5% confidence interval applied to the height threshold.. Type: [number] Default: 0.1 \nOUTPUT_GROUND: Output layer (ground) Optional. Specify the filtered \nDEM containing only cells classified as ground.One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_NONGROUND: Output layer (non-ground objects) Optional. Specify the non-ground objects removed by the filter.One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Skip output] outputs = \nOUTPUT_GROUND: Output layer (ground). The filtered \nDEM containing only cells classified as ground.. Type: [raster] \nOUTPUT_NONGROUND: Output layer (non-ground objects). The non-ground objects removed by the filter.. Type: [raster]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef dtm_slope_based_filter():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/DEM.tif'\n    output_ground_path = 'C:/output_path/ground_filtered_dem.tif'\n    \n    # Load the raster file as a raster layer\n    input_layer = QgsRasterLayer(input_layer_path, 'DEM')\n    \n    # Define the parameters\n    parameters = {\n        'INPUT': input_layer_path,\n        'BAND': 1,  # Specify the band number\n        'RADIUS': 5,  # Kernel radius in pixels\n        'TERRAIN_SLOPE': 30,  # Terrain slope in %\n        'FILTER_MODIFICATION': 0,  # Options: [0 - None, 1 - Relax filter, 2 - Amplify]\n        'STANDARD_DEVIATION': 0.1,\n        'OUTPUT_GROUND': output_ground_path,\n        'OUTPUT_NONGROUND': 'Skip Output'  # Optional to skip output for non-ground objects\n    }\n    \n    # Run the DTM slope-based filter algorithm\n    result = processing.run('native:dtmslopebasedfilter', parameters)\n    \n    # Load the filtered ground DEM layer to QGIS\n    ground_layer = QgsRasterLayer(result['OUTPUT_GROUND'], 'Ground Filtered DEM')\n    QgsProject.instance().addMapLayer(ground_layer)\n\n# Execute the function\ndtm_slope_based_filter()"
    },
    {
        "tool_id": "native:dxfexport",
        "toolname": "dxfexport",
        "tool_description": "Exports layers to DXF file. For each layer, you can choose a field whose values are used to split features in generated destination layers in DXF output.",
        "parameters": "LAYERS: Input layers. Input vector layers to export. Type: [vector: any] [list]\nSYMBOLOGY_MODE: Symbology mode. Type of symbology to apply to output layers. You can choose between: 0 \u2014 No Symbology 1 \u2014 Feature Symbology 2 \u2014 Symbol Layer Symbology. Type: [enumeration] Default: 0 \nSYMBOLOGY_SCALE: Symbology scale. Default scale of data export.. Type: [scale] Default: 1:1 000 000 \nENCODING: Encoding. Encoding to apply to layers.. Type: [enumeration] \nCRS: \nCRS. Choose the \nCRS for the output layer.. Type: [crs] \nUSE_LAYER_TITLE: Use layer title as name. Name the output layer with the layer title (as set in \nQGIS) insteadof the layer name.. Type: [boolean] Default: False \nFORCE_2D: Force \n2D. . Type: [boolean] Default: False \nMTEXT: Export labels as \nMTEXT elements. Exports labels as \nMTEXT or \nTEXT elements. Type: [boolean] Default: False \nOUTPUT: \nDXF. Specification of the output \nDXF file.One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nOUTPUT: \nDXF. \n.DXF file containing the input layers. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef export_to_dxf(output_path):\n    layers_list = ['path/to/first/layer.shp', 'path/to/second/layer.shp']  # Add your input layers to this list\n    \n    parameters = {\n        'LAYERS': layers_list,  # Input vector layers to export\n        'SYMBOLOGY_MODE': 0,  # 0\u2014No Symbology, 1\u2014Feature Symbology, 2\u2014Symbol Layer Symbology\n        'SYMBOLOGY_SCALE': '1:1 000 000',  # Default scale of data export\n        'ENCODING': 'UTF-8',  # Specify encoding for output\n        'CRS': 'EPSG:4326',  # Specify CRS for the output layer\n        'USE_LAYER_TITLE': False,  # Name the output layer with the layer title instead of the layer name\n        'FORCE_2D': False,  # Force 2D\n        'MTEXT': False,  # Export labels as MTEXT elements\n        'OUTPUT': output_path  # Specification of the output DXF file\n    }\n    \n    result = processing.run(\"\"\"native:dxfexport\", parameters)\n    \n                                                                       \n    dxf_layer = QgsVectorLayer(result['OUTPUT'], 'Exported_DXF', 'ogr')\n    QgsProject.instance().addMapLayer(dxf_layer)\n\noutput_path = 'C:/output_path/output_file.dxf'                           \nexport_to_dxf(output_path)"
    },
    {
        "tool_id": "native:equaltofrequency",
        "toolname": "equaltofrequency",
        "tool_description": "Evaluates on a cell-by-cell basis the frequency (number of times) the values of an input stack of rasters are equal to the value of a value layer. The output raster extent and resolution are defined by the input raster layer and is always of Int32 type.\nIf multiband rasters are used in the data raster stack, the algorithm will always perform the analysis on the first band of the rasters - use GDAL to use other bands in the analysis. The output NoData value can be set manually.",
        "parameters": "INPUT_VALUE_RASTER: Input value raster. The input value layer serves as reference layer for the sample layers. Type: [raster]\nINPUT_VALUE_RASTER_BAND: Value raster band. Select the band you want to use as sample. Type: [raster band] Default: The first band of the raster layer \nINPUT_RASTERS: Input raster layers. Raster layers to evaluate.If multiband rasters are used in the data raster stack, the algorithmwill always perform the analysis on the first band of the rasters. Type: [raster] [list] \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the value raster or the data layer stackwill result in a NoData cell in the output raster. Type: [boolean] Default: False \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOUTPUT_NO_DATA_VALUE: Output NoData value Optional. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nFOUND_LOCATIONS_COUNT: Count of cells with equal value occurrences. . Type: [number] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [number] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer] \nMEAN_FREQUENCY_PER_LOCATION: Mean frequency at valid cell locations. . Type: [number] \nOCCURRENCE_COUNT: Count of value occurrences. . Type: [number] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef equal_to_frequency():\n    # Define input and output paths\n    input_value_raster = 'D:/Data/InputValueRaster.tif'\n    additional_rasters = ['D:/Data/Raster1.tif', 'D:/Data/Raster2.tif']\n    output_path = 'D:/workspace_directory/output_frequency.tif'\n    \n    # Load the input raster layer\n    input_value_layer = QgsRasterLayer(input_value_raster, 'Input Value Raster')\n    \n    # Define the parameters\n    parameters = {\n        'INPUT_VALUE_RASTER': input_value_raster,\n        'INPUT_VALUE_RASTER_BAND': 1,  # Default is the first band\n        'INPUT_RASTERS': additional_rasters,\n        'IGNORE_NODATA': False,  # Boolean value to ignore NoData\n        'OUTPUT': output_path,\n        'OUTPUT_NO_DATA_VALUE': -9999.0  # Default NoData value for output\n    }\n\n    # Run the equal to frequency algorithm\n    result = processing.run('native:equaltofrequency', parameters)\n\n# Execute the function\nequal_to_frequency()"
    },
    {
        "tool_id": "native:explodehstorefield",
        "toolname": "explodehstorefield",
        "tool_description": "Creates a copy of the input layer and adds a new field for every unique key in the HStore field.\nThe expected field list is an optional comma separated list. If this list is specified, only these fields are added and the HStore field is updated. By default, all unique keys are added.\nThe PostgreSQL HStore is a simple key-value store used in PostgreSQL and GDAL (when reading an OSM file with the other_tags field.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nFIELD: HStore field. The field(s) to drop. Type: [tablefield: any] \nEXPECTED_FIELDS: Expected list of fields separated by a comma Optional. Comma-separated list of fields to extract.The HStore field will be updated by removing these keys.. Type: [string] Default: \u2018\u2019 \nOUTPUT: Exploded. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Exploded. Output vector layer. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef explode_hstore_field():\n    input_path = 'D:/input_layer.shp'\n    output_path = \"\"\"D:/output_layer.shp\"\n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_path,\n        'FIELD': 'hstore_field_name',\n        'EXPECTED_FIELDS': '',\n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"native:explodehstorefield\", parameters)\n    \n    exploded_layer = QgsVectorLayer(result['OUTPUT'], 'Exploded', 'ogr')\n    QgsProject.instance().addMapLayer(exploded_layer)\n\nexplode_hstore_field()"
    },
    {
        "tool_id": "native:explodelines",
        "toolname": "explodelines",
        "tool_description": "Takes a lines layer and creates a new one in which each line layer is replaced by a set of lines representing the segments in the original line.\nEach line in the resulting layer contains only a start and an end point, with no intermediate vertices between them.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nOUTPUT: Exploded. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef explode_lines():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLines.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n  \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Lines', 'ogr')\n\n    # Run the Explode Lines algorithm\n    result = processing.run('native:explodelines', {\n        'INPUT': input_layer,\n        'OUTPUT': output_path  # Options: Create Temporary Layer ( TEMPORARY_OUTPUT ), Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    })\n\n    # Load the exploded lines layer to QGIS\n    exploded_layer = QgsVectorLayer(result['OUTPUT'], 'Exploded Lines', 'ogr')\n    QgsProject.instance().addMapLayer(exploded_layer)\n\n# Execute the function\nexplode_lines()"
    },
    {
        "tool_id": "native:exportlayersinformation",
        "toolname": "exportlayersinformation",
        "tool_description": "Creates a polygon layer with features corresponding to the extent of selected layer(s).\nAdditional layer details (CRS, provider name, file path, layer name, subset filter, abstract and attribution) are attached as attributes to each feature.",
        "parameters": "LAYERS: Input layers. Input vector layers to get information on.. Type: [vector: any] [list]\nOUTPUT: Output. Specification of the output layer with information. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Output. Polygon vector layer showing extent of input layers and associated informationin attributes.. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef export_layers_information():\n    input_layers_paths = ['D:/Layer1.shp', 'D:/Layer2.shp']  # Example input layer paths\n    output_path = 'D:/Output/output_information.shp'\n\n    parameters = {\n        'LAYERS': input_layers_paths,\n        'OUTPUT': output_path  # Options: ['Create Temporary Layer', 'Save to File...', 'Save to Geopackage...', 'Save to Database Table...']\n    }\n\n    result = processing.run(\"\"\"native:exportlayersinformation\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Layer_Info', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nexport_layers_information()"
    },
    {
        "tool_id": "native:exportmeshedges",
        "toolname": "exportmeshedges",
        "tool_description": "Exports a mesh layer\u2019s edges to a line vector layer, with the dataset values on edges as attribute values.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to export data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nDATASET_TIME: Dataset time. The time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nCRS_OUTPUT: Output coordinate system Optional. Coordinate Reference System to assign to the output. Type: [crs] \nVECTOR_OPTION: Export vector option. Coordinate type of vector value exportation. 0 \u2014 Cartesian (x,y) 1 \u2014 Polar (magnitude, degree) 2 \u2014 Cartesian and polar. Type: [enumeration] \nOUTPUT: Output vector layer. Specification of the output file. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] outputs = \nOUTPUT: Output vector layer. Output vector line layer containing the edges of the input meshlayer with associated dataset values. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsMeshLayer\n\ndef export_mesh_edges():\n    input_mesh_path = '/path/to/your/input/mesh/file.mesh'\n    output_path = '/path/to/your/output/vector/layer.shp'\n    \n    input_mesh_layer = QgsMeshLayer(input_mesh_path, \"\"\"Input Mesh Layer\", \"mdal\")\n    \n    parameters = {\n        'INPUT': input_mesh_layer,\n        'DATASET_GROUPS': [],                                         \n        'DATASET_TIME': 0,                                                                               \n        'CRS_OUTPUT': '',                           \n        'VECTOR_OPTION': 0,                                                                               \n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"native:exportmeshedges\", parameters)\n    \n    output_layer = QgsVectorLayer(output_path, 'Exported Mesh Edges', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nexport_mesh_edges()"
    },
    {
        "tool_id": "native:exportmeshfaces",
        "toolname": "exportmeshfaces",
        "tool_description": "Exports a mesh layer\u2019s faces to a polygon vector layer, with the dataset values on faces as attribute values.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to export data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nDATASET_TIME: Dataset time. The time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nCRS_OUTPUT: Output coordinate system Optional. Coordinate Reference System to assign to the output. Type: [crs] \nVECTOR_OPTION: Export vector option. Coordinate type of vector value exportation. 0 \u2014 Cartesian (x,y) 1 \u2014 Polar (magnitude, degree) 2 \u2014 Cartesian and polar. Type: [enumeration] \nOUTPUT: Output vector layer. Specification of the output file. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Output vector layer. Output vector polygon layer containing the faces of the input meshlayer with associated dataset values. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsMeshLayer\n\ndef export_mesh_faces(output_path):\n    input_path = \"\"\"path/to/your/input/mesh.layer\"                                            \n\n                               \n    input_layer = QgsMeshLayer(input_path, \"Input Mesh Layer\", \"mdal\")\n\n                                                \n    parameters = {\n        'INPUT': input_path,\n        'DATASET_GROUPS': [],                           \n        'DATASET_TIME': 0,                                                                                                             \n        'CRS_OUTPUT': '',            \n        'VECTOR_OPTION': 0,                                                                                                             \n        'OUTPUT': output_path\n    }\n\n                                         \n    result = processing.run(\"native:exportmeshfaces\", parameters)\n\n                                                         \n    output_layer = QgsMeshLayer(result['OUTPUT'], 'Exported Mesh Faces', 'mdal')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                                                   \noutput_path = \"path/to/save/output/vector_layer.shp\"\nexport_mesh_faces(output_path)"
    },
    {
        "tool_id": "native:exportmeshongrid",
        "toolname": "exportmeshongrid",
        "tool_description": "Exports a mesh layer\u2019s dataset values to a gridded point vector layer, with the dataset values on this point as attribute values.\nFor data on volume (3D stacked dataset values), the exported dataset values are averaged on faces using the method defined in the mesh layer properties (default is Multi level averaging method). 1D meshes are not supported.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to export data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nDATASET_TIME: Dataset time. The time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nEXTENT: Extent Optional. Specify the spatial extent on which to process the data. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nGRID_SPACING: Grid spacing Optional. Spacing between the sample points to use. Type: [number] Default: 10.0 \nCRS_OUTPUT: Output coordinate system Optional. Coordinate Reference System to assign to the output. Type: [crs] \nVECTOR_OPTION: Export vector option. Coordinate type of vector value exportation. 0 \u2014 Cartesian (x,y) 1 \u2014 Polar (magnitude, degree) 2 \u2014 Cartesian and polar. Type: [enumeration] \nOUTPUT: Output vector layer. Specification of the output file. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Output vector layer. Output vector point layer with dataset values computedfrom the overlaid face.. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsMeshLayer, QgsProject\n\ndef export_mesh_on_grid():\n    # Define the input and output paths\n    input_mesh_path = 'D:/input_mesh_layer.mesh'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"exported_mesh_points.shp\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n\n                               \n    input_mesh = QgsMeshLayer(input_mesh_path, \"Input Mesh Layer\", \"mesh\")\n\n                                                                   \n    parameters = {\n        'INPUT': input_mesh_path,\n        'DATASET_GROUPS': [],                                 \n        'DATASET_TIME': 0,                                                                             \n        'EXTENT': None,            \n        'GRID_SPACING': '',            \n        'CRS_OUTPUT': '',            \n        'VECTOR_OPTION': 0,                                                                             \n        'OUTPUT': output_path\n    }\n\n                                           \n    result = processing.run(\"native:exportmeshongrid\", parameters)\n\n                                     \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Exported Mesh Points', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nexport_mesh_on_grid()"
    },
    {
        "tool_id": "native:exportmeshvertices",
        "toolname": "exportmeshvertices",
        "tool_description": "Exports a mesh layer\u2019s vertices to a point vector layer, with the dataset values on vertices as attribute values.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to export data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nDATASET_TIME: Dataset time. The time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nCRS_OUTPUT: Output coordinate system Optional. Coordinate Reference System to assign to the output. Type: [crs] \nVECTOR_OPTION: Export vector option. Coordinate type of vector value exportation. 0 \u2014 Cartesian (x,y) 1 \u2014 Polar (magnitude, degree) 2 \u2014 Cartesian and polar. Type: [enumeration] \nOUTPUT: Output vector layer. Specification of the output file. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Output vector layer. Output vector point layer containing the vertices of the input meshlayer with associated dataset values. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsMeshLayer, QgsProject\n\ndef export_mesh_vertices(input_layer_path, output_path):\n    # Load the input mesh layer\n    input_layer = QgsMeshLayer(input_layer_path, \"\"\"Input Mesh\", \"mesh\")\n\n                           \n    parameters = {\n        'INPUT': input_layer_path,\n        'DATASET_GROUPS': [],                          \n        'DATASET_TIME': 0,                                                                                                                \n        'CRS_OUTPUT': '',                       \n        'VECTOR_OPTION': 0,                                                                                                                 \n        'OUTPUT': output_path\n    }\n\n                                            \n    result = processing.run(\"native:exportmeshvertices\", parameters)\n                                            \n    output_layer = QgsProject.instance().addMapLayer(QgsMeshLayer(result['OUTPUT'], 'Exported_Mesh_Vertices', 'ogr'))\n\ninput_layer_path = \"path/to/your/mesh/file\"\noutput_layer_path = \"path/to/your/output/file\"\nexport_mesh_vertices(input_layer_path, output_layer_path)"
    },
    {
        "tool_id": "native:exporttospreadsheet",
        "toolname": "exporttospreadsheet",
        "tool_description": "Exports the attributes of a selection of vector layers into a spreadsheet document or optionally appends them to an existing spreadsheet as additional sheets.",
        "parameters": "LAYERS: Input layers. Input vector layers. The output spreadsheet will consist of a sheet,for each layer, that contains the attributes of this layer.. Type: [vector: any] [list]\nUSE_ALIAS: Use field aliases as column headings. Use the field aliases from the attribute table for the spreadsheet.. Type: [boolean] Default: False \nFORMATTED_VALUES: Export formatted values instead of raw values. If True , exports the formatted, human readable values (e.g., from a value mapor value relation ) to the spreadsheet.. Type: [boolean] Default: False \nOVERWRITE: Overwrite existing spreadsheet. If the specified spreadsheet exists, setting this option to True will overwrite the existing spreadsheet.If this option is False and the spreadsheet exists, the layers will be appended as additional sheets.. Type: [boolean] Default: True \nOUTPUT: Destination spreadsheet. Output spreadsheet with a sheet for every layer. One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nOUTPUT: Destination spreadsheet. Spreadsheet with a sheet for every layer.. Type: [file] \nOUTPUT_LAYERS: Layers within spreadsheet. The list of sheets added to the spreadsheet.. Type: [list]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef export_to_spreadsheet():\n    # Define the input and output paths\n    layer_1_path = 'path/to/layer1.shp'\n    layer_2_path = 'path/to/layer2.shp'\n    output_path = 'path/to/output.xlsx'\n   \n    # Load the input layers\n    layer_1 = QgsVectorLayer(layer_1_path, \"\"\"Layer 1\", \"ogr\")\n    layer_2 = QgsVectorLayer(layer_2_path, \"Layer 2\", \"ogr\")\n    \n                                                     \n    export_params = {\n        'LAYERS': [layer_1_path, layer_2_path],\n        'USE_ALIAS': False,\n        'FORMATTED_VALUES': False,\n        'OVERWRITE': True,\n        'OUTPUT': output_path\n    }\n    \n                                             \n    result = processing.run(\"native:exporttospreadsheet\", export_params)\n\nexport_to_spreadsheet()"
    },
    {
        "tool_id": "native:extendlines",
        "toolname": "extendlines",
        "tool_description": "Extends line geometry by a specified amount at the start and end of the line.\nLines are extended using the bearing of the first and last segment in the line.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nSTART_DISTANCE: Start distance. Distance by which to extend the first segment of the line(starting point). Type: [number ] \nEND_DISTANCE: End distance. Distance by which to extend the last segment of the line(ending point). Type: [number ] \nOUTPUT: Extended. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] outputs = \nOUTPUT: Extended. The output (extended) line vector layer.. Type: [vector: line]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef extend_lines(input_layer_path, output_path):\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Line Layer', 'ogr')\n\n    # Run the Extend Lines algorithm\n    result = processing.run('native:extendlines', {\n        'INPUT': input_layer,\n        'START_DISTANCE': 10.0,\n        'END_DISTANCE': 15.0,\n        'OUTPUT': output_path  # Options: Create temporary layer ( 'TEMPORARY_OUTPUT' ), Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    })\n\n    # Load the extended line layer to QGIS\n    extended_layer = QgsVectorLayer(result['OUTPUT'], 'Extended Lines', 'ogr')\n    QgsProject.instance().addMapLayer(extended_layer)\n\n# Define input and output paths\ninput_layer_path = \"\"\"D:/Data/InputLines.shp\"\noutput_path = \"D:/Data/ExtendedLines.shp\"\n\n                      \nextend_lines(input_layer_path, output_path)"
    },
    {
        "tool_id": "native:extenttolayer",
        "toolname": "extenttolayer",
        "tool_description": "Creates a new vector layer that contains a single feature with geometry matching the extent of the input layer.\nIt can be used in models to convert a literal extent ( xmin , xmax , ymin , ymax format) into a layer which can be used for other algorithms which require a layer based input.",
        "parameters": "INPUT: Extent (xmin, xmax, ymin, ymax). Input extent Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nOUTPUT: Extent. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsProject\nimport processing\n\ndef extent_to_layer():\n    # Define the output path\n    output_path = 'C:/output_path/output_layer.shp'\n\n    # Run the Extent to Layer algorithm\n    result = processing.run('native:extenttolayer', {\n        'INPUT': '0, 1, 0, 1',  # You can replace this with specific coordinates, or a method like Calculate from layer... etc.\n        'OUTPUT': output_path  # Options: ['TEMPORARY_OUTPUT', 'Save to File...', 'Save to Geopackage...', 'Save to Database Table...']\n    })\n\n    # Load the extent layer to QGIS\n    extent_layer = QgsVectorLayer(result['OUTPUT'], 'Extent Layer', 'ogr')\n    QgsProject.instance().addMapLayer(extent_layer)\n\n# Execute the function\nextent_to_layer()"
    },
    {
        "tool_id": "native:extractbinary",
        "toolname": "extractbinary",
        "tool_description": "Extracts contents from a binary field, saving them to individual files. Filenames can be generated using values taken from an attribute in the source table or based on a more complex expression.",
        "parameters": "INPUT: Input layer. Input vector layer containing the binary data. Type: [vector: any]\nFIELD: Binary field. Field containing the binary data. Type: [tablefield: any] \nFILENAME: File name. Field or expression-based text to name each output file. Type: [expression] \nFOLDER: Destination folder. Folder in which to store the output files. One of: Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Save to temporary folder] outputs = \nFOLDER: Folder. The folder that contains the output files.. Type: [folder]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef extract_binary_features():\n    input_layer_path = 'D:/input_layer.shp'  # specify the path to the input shapefile\n    output_dir = 'C:/Output'  # specify the output directory\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Binary Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELD': 'Binary_Field',\n        'FILENAME': 'unique_filename',                                     \n        'FOLDER': output_dir,                                 \n        'OUTPUT': ''                       \n    }\n\n    result = processing.run(\"native:extractbinary\", parameters)\n\n                      \nextract_binary_features()"
    },
    {
        "tool_id": "native:extractbyattribute",
        "toolname": "extractbyattribute",
        "tool_description": "This algorithm creates a new vector layer that only contains matching features from an input layer.\nThe criteria for adding features to the resulting layer is defined based on the values of an attribute from the input layer.",
        "parameters": "INPUT: Vector layer to select features in\nFIELD: Filtering field of the layer\nOPERATOR: Many different operators are available: ['0': '=', '1': '!=', '2': '>', '3':'>=', '4':'<', '5':'<=',\n        '6': 'begins with', '7': 'contains', '8':'is null', '9': 'is not null', '10':'does not contain\nVALUE: Value to be evaluated\nOUTPUT: Specify the output layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef select_by_attribute(input_layer_path):\n    # Define the parameters\n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n\n    # Define the parameters Example below:\n    field_name =\n    operator = 4  # Select the appropriate operator based on the task. Many different operators are available: ['0': '=', '1': '!=', '2': '>', '3':'>=', '4':'<', '5':'<=', '6': 'begins with', '7': 'contains', '8':'is null', '9': 'is not null', '10':'does not contain\n    value = '3000'\n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELD': 'Population',\n        'OPERATOR': operator,\n        'VALUE': 3000,\n        'OUTPUT': output_layer_path\n    }\n                                                \n    result = processing.run(\"native:extractbyattribute\", parameters)\n                                               \n    output_layer = QgsVectorLayer(output_layer_path, 'Population_less_than_3000', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\ninput_layer_path = \"D:/Data/PrevalenceData.shp\"                               \noutput_layer_path =\"D:/workspace_directory/output_layer.shp\"\nextractbyattribute(input_layer_path)"
    },
    {
        "tool_id": "native:extractbyexpression",
        "toolname": "extractbyexpression",
        "tool_description": "This algorithm creates a new vector layer that only contains matching features from an input layer. The criteria for adding features to the resulting layer is based on a QGIS expression.",
        "parameters": "INPUT: Input vector layer\nEXPRESSION: Expression to filter the vector layer\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\n    from qgis.core import QgsProject,QgsVectorLayer\n    def extract_by_expression(input_layer_path):\n        # Define the parameters\n        input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    \n        # Define the parameters Example below:\n        parameters = {\n            'INPUT': input_layer_path,\n            'EXPRESSION':' \"STATEFP\"  =\\'42\\' AND  \"Obesity\" <30',\n            'OUTPUT': output_layer_path\n        }\n        # Perform the extract by attribute operation\n        result = processing.run(\"native:extractbyexpression\", parameters)\n        # Load the selected features as a new layer\n        output_layer = QgsVectorLayer(output_path, 'PA_Obesity<30', 'ogr')\n        QgsProject.instance().addMapLayer(output_layer)\n    input_layer_path = \"D:/Data/PrevalenceData.shp\"  # path to the input shapefile\n    output_layer_path =\"D:/workspace_directory/output_layer.shp\"\n    select_by_attribute(input_layer_path)"
    },
    {
        "tool_id": "native:extractbyextent",
        "toolname": "extractbyextent",
        "tool_description": "This algorithm creates a new vector layer that only contains matching features from an input layer. The criteria for adding features to the resulting layer is based on a QGIS expression.",
        "parameters": "INPUT: Input vector layer\nEXPRESSION: Expression to filter the vector layer\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\n    from qgis.core import QgsProject,QgsVectorLayer\n    def extract_by_expression(input_layer_path):\n        # Define the parameters\n        input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    \n        # Define the parameters Example below:\n        parameters = {\n            'INPUT': input_layer_path,\n            'EXPRESSION':' \"STATEFP\"  =\\'42\\' AND  \"Obesity\" <30',\n            'OUTPUT': output_layer_path\n        }\n        # Perform the extract by attribute operation\n        result = processing.run(\"native:extractbyexpression\", parameters)\n        # Load the selected features as a new layer\n        output_layer = QgsVectorLayer(output_path, 'PA_Obesity<30', 'ogr')\n        QgsProject.instance().addMapLayer(output_layer)\n    input_layer_path = \"D:/Data/PrevalenceData.shp\"  # path to the input shapefile\n    output_layer_path =\"D:/workspace_directory/output_layer.shp\"\n    select_by_attribute(input_layer_path)"
    },
    {
        "tool_id": "native:extractbylocation",
        "toolname": "extractbylocation",
        "tool_description": "This algorithm creates a new vector layer that only contains matching features from an input layer. The criteria for adding features to the resulting layer is based on a QGIS expression.",
        "parameters": "INPUT: Input vector layer\nPREDICATE:Type of spatial relation the input feature should have with an intersect feature so that it could be selected. One or more of: 0 \u2014 intersect, 1 \u2014 contain, 2 \u2014 disjoint, 3 \u2014 equal, 4 \u2014 touch, 5 \u2014 overlap, 6 \u2014 are within, 7 \u2014 cross\nINTERSECT: Intersection vector layer\nMETHOD: How the selection of the algorithm should be managed. One of: 0 \u2014 creating new selection, 1 \u2014 adding to current selection, 2 \u2014 selecting within current selection, 3 \u2014 removing from current selection\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef extract_by_location():\n    parameters = {\n        'INPUT':'D:/Data/Data.shp', #Extract features from\n        'PREDICATE':[1], #Available values: 0:intersect, 1:contain, 2: disjoint, 3: equal, 4:touch, 5:overlap, 6: are within, 7: cross\n        'INTERSECT':'D:/Data/HW_Sites_EPSG4326/HW_Sites_EPSG4326.shp', #By comparing to the features from\n        'OUTPUT': output_layer_path\n    }\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:extractbylocation\", parameters)\n    # Load the selected features as a new layer\n    \n\toutput_layer = QgsVectorLayer(output_layer_path, 'Affected_location', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\noutput_layer_path =\"D:/workspace_directory/output_layer.shp\"\nextract_by_location()"
    },
    {
        "tool_id": "native:extractlabels",
        "toolname": "extractlabels",
        "tool_description": "Extracts label information from a rendered map at a given extent and scale.\nIf a map theme is provided, the rendered map will match the visibility and symbology of that theme. If left blank, all visible layers from the project will be used. Extracted label information include: position (served as point geometries), the associated layer name and feature ID, label text, rotation (in degree, clockwise), multiline alignment, and font details.",
        "parameters": "EXTENT: Map extent. Extent of the map to extract the labels from Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nSCALE: Map scale. Extracted labels will be rendered using their properties set at this scale.. Type: [scale] \nMAP_THEME: Map theme Optional. \nA map theme displaying the layers to extract the labels from.If unset, labels of the currently visible layers are extracted.. Type: [maptheme] \nINCLUDE_UNPLACED: Include unplaced labels Optional. Specify whether all overlapping labels should be extracted,including the conflicting (thus unplaced) ones.. Type: [boolean] Default: True \nOUTPUT: Extracted labels. Specify the output vector layer for the extent(s). One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] \nDPI Default: 96.0: Map resolution (in \nDPI) Optional. . Type: [number] outputs = \nOUTPUT: Extracted labels. Point vector layer representing the fetched labels.Each feature has attributes identifying its source (layer, feature ID)and the assigned labeling properties (text, font, size, rotation, \n\u2026).A default style with labeling and null symbol is also applied to the layer. Warning Because some of the generated fields have name with more than10 characters, using the \nESRI shapefile format ( \n.SHP ) to storethe output may lead to unexpected rendering while loading the layer in \nQGIS.. Type: [vector: point]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsProject, QgsVectorLayer\nimport processing\n\ndef extract_labels(output_path):\n    # Define the parameters\n    parameters = {\n        'EXTENT': '',  # Options: 'Calculate from layer', 'Calculate from layout map', 'Calculate from bookmark', 'Use map canvas extent', 'Draw on canvas', 'Enter the coordinates as xmin, xmax, ymin, ymax'\n        'SCALE': '',\n        'MAP_THEME': '',\n        'INCLUDE_UNPLACED': True,\n        'OUTPUT': output_path,\n        'DPI': '''    }\n    # Execute the extract labels algorithm\n    result = processing.run(\"\"\"native:extractlabels\", parameters)\n                                               \n    extracted_labels_layer = QgsVectorLayer(result['OUTPUT'], 'Extracted_Labels', 'ogr')\n    QgsProject.instance().addMapLayer(extracted_labels_layer)\n\n                        \noutput_path = \"D:/workspace_directory/extracted_labels_layer.shp\"\n                      \nextract_labels(output_path)"
    },
    {
        "tool_id": "native:extractmvalues",
        "toolname": "extractmvalues",
        "tool_description": "Extracts M values from geometries into feature attributes.\nBy default only the M value from the first vertex of each feature is extracted, however the algorithm can optionally calculate statistics on all of the geometry\u2019s M values, including sum, mean, minimum and maximum.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSUMMARIES: Summaries to calculate. Statistics on the M values of a geometry.One or more of: 0 \u2014 First 1 \u2014 Last 2 \u2014 Count 3 \u2014 Sum 4 \u2014 Mean 5 \u2014 Median 6 \u2014 St.dev (pop) 7 \u2014 Minimum 8 \u2014 Maximum 9 \u2014 Range 10 \u2014 Minority 11 \u2014 Majority 12 \u2014 Variety 13 \u2014 Q1 14 \u2014 Q3 15 \u2014 IQR. Type: [enumeration] Default: [0]\nCOLUMN_PREFIX: Output column prefix. The prefix for the output (M) column. Type: [string] Default: \u2018m_\u2019\nOUTPUT: Extracted. Specify the output layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef extract_mvalues_layer():\n    input_path = 'D:/Data/Input.shp'\n    output_path = 'C:/output_path/extracted_m_values.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'SUMMARIES': [0, 3, 7],  # Summaries options: 0 \u2014 First, 1 \u2014 Last, 2 \u2014 Count, 3 \u2014 Sum, 4 \u2014 Mean, 5 \u2014 Median, 6 \u2014 St.dev (pop), 7 \u2014 Minimum, 8 \u2014 Maximum, 9 \u2014 Range, 10 \u2014 Minority, 11 \u2014 Majority, 12 \u2014 Variety, 13 \u2014 Q1, 14 \u2014 Q3, 15 \u2014 IQR\n        'COLUMN_PREFIX': 'm_',\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:extractmvalues', parameters)\n\n    extracted_layer = QgsVectorLayer(result['OUTPUT'], 'Extracted M Values', 'ogr')\n    QgsProject.instance().addMapLayer(extracted_layer)\n\n# Execute the function\nextract_mvalues_layer()"
    },
    {
        "tool_id": "native:extractspecificvertices",
        "toolname": "extractspecificvertices",
        "tool_description": "Takes a vector layer and generates a point layer with points representing specific vertices in the input geometries.\nFor instance, this algorithm can be used to extract the first or last vertices in the geometry. The attributes associated to each point are the same ones associated to the feature that the vertex belongs to.\nThe vertex indices parameter accepts a comma separated string specifying the indices of the vertices to extract. The first vertex corresponds to an index of 0, the second vertex has an index of 1, etc. Negative indices can be used to find vertices at the end of the geometry, e.g., an index of -1 corresponds to the last vertex, -2 corresponds to the second last vertex, etc.\nAdditional fields are added to the vertices indicating the specific vertex position (e.g., 0, -1, etc), the original vertex index, the vertex\u2019s part and its index within the part (as well as its ring for polygons), distance along the original geometry and bisector angle of vertex for the original geometry.\nAllows features in-place modification of point features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nVERTICES: Vertex indices. Comma-separated string of the indices of the vertices toextract.. Type: [string] Default: \u20180\u2019\nOUTPUT: Vertices. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef extract_vertices():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/vertices_output.shp'\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Extract Specific Vertices algorithm\n    result = processing.run('native:extractspecificvertices', {\n        'INPUT': input_layer,\n        'VERTICES': '0',  # Comma-separated string of the indices of the vertices to extract\n        'OUTPUT': output_path\n    })\n\n    # Load the vertices layer to QGIS\n    vertices_layer = QgsVectorLayer(result['OUTPUT'], 'Vertices', 'ogr')\n    QgsProject.instance().addMapLayer(vertices_layer)\n\n# Execute the function\nextract_vertices()"
    },
    {
        "tool_id": "native:extractvertices",
        "toolname": "extractvertices",
        "tool_description": "Takes a vector layer and generates a point layer with points representing the vertices in the input geometries.\nThe attributes associated to each point are the same ones associated to the feature that the vertex belongs to.\nAdditional fields are added to the vertices indicating the vertex index (beginning at 0), the feature\u2019s part and its index within the part (as well as its ring for polygons), distance along original geometry and bisector angle of vertex for original geometry.\nAllows features in-place modification of point features\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nOUTPUT: Vertices. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef extract_vertices():\n    input_layer_path = 'D:/Data/InputLayer.shp'\n    output_layer_path = 'C:/output_path/vertices_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_layer_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'OUTPUT': output_layer_path\n    }\n\n    result = processing.run('native:extractvertices', parameters)\n    \n    vertices_layer = QgsVectorLayer(result['OUTPUT'], 'Vertices Layer', 'ogr')\n    QgsProject.instance().addMapLayer(vertices_layer)\n    \nextract_vertices()"
    },
    {
        "tool_id": "native:extractwithindistance",
        "toolname": "extractwithindistance",
        "tool_description": "Creates a new vector layer that only contains matching features from an input layer. Features are copied wherever they are within the specified maximum distance from the features in an additional reference layer.",
        "parameters": "INPUT:\nREFERENCE:\nDISTANCE:\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef extractwithindistance():\n    output_path = \"D:/Output_path/Output_layer.shp\"\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT':'D:/SpatialAnalysisAgent/Data/Exercise12Data/flood2015may_ESRI102965.shp', # Input vector layer to copy features from\n        'REFERENCE':'D:/SpatialAnalysisAgent/Data/Exercise12Data/rivers.shp', # Vector layer whose features closeness is used\n        'DISTANCE':100, # The maximum distance around reference features to select input features within\n        'OUTPUT':output_path\n        }\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:extractwithindistance\", parameters)\n    # Load the selected features as a new layer\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Extracted Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\nextractwithindistance()"
    },
    {
        "tool_id": "native:extractzvalues",
        "toolname": "extractzvalues",
        "tool_description": "Extracts Z values from geometries into feature attributes.\nBy default only the Z value from the first vertex of each feature is extracted, however the algorithm can optionally calculate statistics on all of the geometry\u2019s Z values, including sum, mean, minimum and maximum.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSUMMARIES: Summaries to calculate. Statistics on the \nZ values of a geometry.One or more of: 0 \u2014 First 1 \u2014 Last 2 \u2014 Count 3 \u2014 Sum 4 \u2014 Mean 5 \u2014 Median 6 \u2014 St.dev (pop) 7 \u2014 Minimum 8 \u2014 Maximum 9 \u2014 Range 10 \u2014 Minority 11 \u2014 Majority 12 \u2014 Variety 13 \u2014 \nQ1 14 \u2014 \nQ3 15 \u2014 \nIQR. Type: [enumeration] Default: [0] \nCOLUMN_PREFIX: Output column prefix. The prefix for the output \n(Z) column. Type: [string] Default: \u2018z_\u2019 \nOUTPUT: Extracted. Specify the output layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Extracted. The output vector layer (with \nZ values). Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef extract_z_values():\n    input_path = 'D:/Data/PrevalenceData.shp'\n    output_path = 'D:/workspace_directory/output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'SUMMARIES': [0, 4],  # Select one or more from: 0 \u2014 First, 1 \u2014 Last, 2 \u2014 Count, 3 \u2014 Sum, 4 \u2014 Mean, 5 \u2014 Median, 6 \u2014 St.dev (pop), 7 \u2014 Minimum, 8 \u2014 Maximum, 9 \u2014 Range, 10 \u2014 Minority, 11 \u2014 Majority, 12 \u2014 Variety, 13 \u2014 Q1, 14 \u2014 Q3, 15 \u2014 IQR\n        'COLUMN_PREFIX': 'z_',\n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"\"\"native:extractzvalues\", parameters)\n\n    extracted_layer = QgsVectorLayer(result['OUTPUT'], 'Extracted Z Values', 'ogr')\n    QgsProject.instance().addMapLayer(extracted_layer)\n\nextract_z_values()"
    },
    {
        "tool_id": "native:fieldcalculator",
        "toolname": "fieldcalculator",
        "tool_description": "This algorithm computes a new vector layer with the same features of the input layer, but either overwriting an existing attribute or adding an additional attribute. The values of this field are computed from each feature using an expression, based on the properties and attributes of the feature. Note that if \"Field name\" is an existing field in the layer then all the rest of the field settings are ignored.",
        "parameters": "INPUT: Input layer\nFIELD_NAME: Field name \nFIELD_TYPE: Result field type. Available values: 0: Decimal (double), 1: Integer (32 bit), 2: Text (string), 3: Date, 4: Time, 5: Date & Time, 6: Boolean, 7: Binary Object \n(BLOB), 8: String List, 9: Integer List, 10: Decimal (double) List \nFIELD_LENGTH: Result field length \nFIELD_PRECISION: Result field precision \nFORMULA: Formula \nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer \n(TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "from qgis.core import QgsProject,QgsVectorLayer\ndef fieldcalculator():\n    # Paths to input layers\n    csv_path = \"D:/SpatialAnalysisAgent/Data/SouthCarolinaCounties/CensusData.csv\"\n    csv_uri = f\"file:///{csv_path}?delimiter=,\"\n    census_layer = QgsVectorLayer(csv_uri, 'CensusData', 'delimitedtext')\n    # Add CSV layer to the project\n    QgsProject.instance().addMapLayer(census_layer)\n    # Define the parameters\n    # input_layer = QgsVectorLayer(census_layer, \"Input Layer\", \"ogr\")\n    output_path = D:/Output_directory/output_layer.shp\n\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT': census_layer,\n        'FIELD_NAME':'PopChange',\n        'FIELD_TYPE':0, # Available values- 0: Decimal (double), 1: Integer (32 bit), 2: Text (string), 3: Date, 4: Time, 5: Date & Time, 6: Boolean, 7: Binary Object (BLOB), 8: String List, 9: Integer List, 10: Decimal (double) List\n        'FIELD_LENGTH':0,\n        'FIELD_PRECISION':0,\n        # 'NEW_FIELD': True,\n        'FORMULA':' (\"TPOP2008\" - \"TPOP2005\")/ \"TPOP2005\" ',\n        'OUTPUT': output_path\n        }\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:fieldcalculator\", parameters)\n    # Load the selected features as a new layer\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Output_layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\nfieldcalculator()"
    },
    {
        "tool_id": "native:filedownloader",
        "toolname": "filedownloader",
        "tool_description": "This algorithm computes a new vector layer with the same features of the input layer, but either overwriting an existing attribute or adding an additional attribute. The values of this field are computed from each feature using an expression, based on the properties and attributes of the feature. Note that if \"Field name\" is an existing field in the layer then all the rest of the field settings are ignored.",
        "parameters": "INPUT: Input layer\nFIELD_NAME: Field name \nFIELD_TYPE: Result field type. Available values: 0: Decimal (double), 1: Integer (32 bit), 2: Text (string), 3: Date, 4: Time, 5: Date & Time, 6: Boolean, 7: Binary Object \n(BLOB), 8: String List, 9: Integer List, 10: Decimal (double) List \nFIELD_LENGTH: Result field length \nFIELD_PRECISION: Result field precision \nFORMULA: Formula \nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer \n(TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "from qgis.core import QgsProject,QgsVectorLayer\ndef fieldcalculator():\n    # Paths to input layers\n    csv_path = \"D:/SpatialAnalysisAgent/Data/SouthCarolinaCounties/CensusData.csv\"\n    csv_uri = f\"file:///{csv_path}?delimiter=,\"\n    census_layer = QgsVectorLayer(csv_uri, 'CensusData', 'delimitedtext')\n    # Add CSV layer to the project\n    QgsProject.instance().addMapLayer(census_layer)\n    # Define the parameters\n    # input_layer = QgsVectorLayer(census_layer, \"Input Layer\", \"ogr\")\n    output_path = D:/Output_directory/output_layer.shp\n\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT': census_layer,\n        'FIELD_NAME':'PopChange',\n        'FIELD_TYPE':0, # Available values- 0: Decimal (double), 1: Integer (32 bit), 2: Text (string), 3: Date, 4: Time, 5: Date & Time, 6: Boolean, 7: Binary Object (BLOB), 8: String List, 9: Integer List, 10: Decimal (double) List\n        'FIELD_LENGTH':0,\n        'FIELD_PRECISION':0,\n        # 'NEW_FIELD': True,\n        'FORMULA':' (\"TPOP2008\" - \"TPOP2005\")/ \"TPOP2005\" ',\n        'OUTPUT': output_path\n        }\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:fieldcalculator\", parameters)\n    # Load the selected features as a new layer\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Output_layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\nfieldcalculator()"
    },
    {
        "tool_id": "native:fillnodata",
        "toolname": "fillnodata",
        "tool_description": "Resets the NoData values in the input raster to a chosen value, resulting in raster dataset with no NoData pixels.\nThe algorithm respects the input raster data type, e.g. a floating point fill value will be truncated when applied to an integer raster.",
        "parameters": "INPUT: Input raster. The raster to process.. Type: [raster]\nBAND: Band number. The band of the raster. Type: [number] Default: 1 \nFILL_VALUE: Fill value. Set the value to use for the NoData pixels. Type: [number] Default: 1.0 \nOUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] outputs = \nOUTPUT: Output raster. The output raster layer with filled data cells.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef fill_no_data():\n    input_path = 'D:/input_raster.tif'\n    output_path = 'C:/Users/Output/filled_raster.tif'\n    input_raster = QgsRasterLayer(input_path, \"\"\"Input Raster\")\n\n    parameters = {\n        'INPUT': input_path,\n        'BAND': 1,\n        'FILL_VALUE': 1.0,\n        'OUTPUT': output_path                                          \n    }\n    \n    result = processing.run(\"native:fillnodata\", parameters)\n    filled_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Filled Raster')\n    QgsProject.instance().addMapLayer(filled_raster_layer)\n\nfill_no_data()"
    },
    {
        "tool_id": "native:filter",
        "toolname": "filter",
        "tool_description": "Filters features from the input layer and redirects them to one or several outputs. If you do not know about any attribute names that are common to all possible input layers, filtering is only possible on the feature geometry and general record mechanisms, such as $id and uuid .",
        "parameters": "INPUT: Input layer. The input layer.. Type: [vector: any] OUTPUT_<name of the filter>: Outputs and filters (one or more). The output layers with filters (as many as there are filters).. Type: [same as input] outputs = native:filter_1:OUTPUT_<name of filter>: Output (one or more). The output layers with filtered features (as many as there arefilters).. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef filter_layer(input_layer_path, output_path):\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    \n                           \n    filter_params = {\n        'INPUT': input_layer_path,\n        'OUTPUT_filtered': output_path\n    }\n    \n                              \n    result = processing.run(\"native:filter\", filter_params)\n    \n                                       \n    filtered_layer = QgsVectorLayer(output_path, \"Filtered Layer\", \"ogr\")\n    QgsProject.instance().addMapLayer(filtered_layer)\n\n                               \ninput_layer_path = \"D:/Data/PrevalenceData.shp\"\noutput_path = \"D:/workspace_directory/filtered_output.shp\"\n\n                      \nfilter_layer(input_layer_path, output_path)"
    },
    {
        "tool_id": "native:filterbygeometry",
        "toolname": "filterbygeometry",
        "tool_description": "Filters features by their geometry type. Incoming features will be directed to different outputs based on whether they have a point, line or polygon geometry.",
        "parameters": "INPUT: Input layer. Layer to evaluate. Type: [vector: any] outputs =\nPOINTS: Point features Optional. Layer with points. Type: [vector: point] \nLINES: Line features Optional. Layer with lines. Type: [vector: line] \nPOLYGONS: Polygon features Optional. Layer with polygons. Type: [vector: polygon] \nNO_GEOMETRY: Features with no geometry Optional. Geometry-less vector layer. Type: [table]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef filter_by_geometry():\n    input_path = \"\"\"C:/path/to/your/input_layer.shp\"\n    output_path = \"C:/path/to/your/output_layer.shp\"\n    \n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'INTERSECT': None,                                  \n        'METHOD': 0,                                                                       \n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"native:filterbygeometry\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Filtered_Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nfilter_by_geometry()"
    },
    {
        "tool_id": "native:filterlayersbytype",
        "toolname": "filterlayersbytype",
        "tool_description": "Filters layers by their type. Incoming layers will be directed to different outputs based on whether they are a vector or raster layer.",
        "parameters": "INPUT: Input layer. Generic Map Layer. Type: [layer] outputs =\nVECTOR: Vector features Optional. \nA Vector Layer of the input, if compatible. Type: [vector] \nRASTER: Raster layer Optional. \nA Raster Layer of the input, if compatible. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsMapLayer\n\ndef filter_layers_by_type():\n    # Define the input and output paths\n    input_layer_path = 'D:/input_layer.shp'\n    output_path = 'D:/output_layer.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Filtered Layer\", \"ogr\")\n    \n                                   \n    parameters = {\n        'INPUT': input_layer_path,\n        'FILTER_TYPE': 'Polygon',                                                    \n        'OUTPUT': output_path\n    }\n    \n                                             \n    result = processing.run(\"native:filterlayersbytype\", parameters)\n    \n                              \n    filtered_layer = QgsVectorLayer(result['OUTPUT'], 'Filtered_output', 'ogr')\n    QgsProject.instance().addMapLayer(filtered_layer)\n\n                      \nfilter_layers_by_type()"
    },
    {
        "tool_id": "native:filterverticesbym",
        "toolname": "filterverticesbym",
        "tool_description": "Filters away vertices based on their M value, returning geometries with only vertex points that have a M value greater than or equal to the specified minimum value and/or less than or equal to the maximum value.\nIf the minimum value is not specified then only the maximum value is tested, and similarly if the maximum value is not specified then only the minimum value is tested.\nAllows features in-place modification of line and polygon features with M enabled",
        "parameters": "INPUT: Input layer. Input line or polygon vector layerto remove vertices from. Type: [vector: line, polygon]\nMIN: Minimum Optional. Minimum of \nM values allowed. Type: [number ] Default: Not set \nMAX: Maximum Optional. Maximum of \nM values allowed. Type: [number ] Default: Not set \nOUTPUT: Filtered. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Filtered. The output vector layer of featureswith only the filtered vertices.. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef filter_vertices_by_m():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'D:/Data/FilteredOutputLayer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_path,\n        'MIN': 10,                                \n        'MAX': 50,                                \n        'OUTPUT': output_path                                                                                                                        \n    }\n   \n    result = processing.run(\"native:filterverticesbym\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Filtered Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nfilter_vertices_by_m()"
    },
    {
        "tool_id": "native:filterverticesbyz",
        "toolname": "filterverticesbyz",
        "tool_description": "Filters away vertices based on their Z value, returning geometries with only vertex points that have a Z value greater than or equal to the specified minimum value and/or less than or equal to the maximum value.\nIf the minimum value is not specified then only the maximum value is tested, and similarly if the maximum value is not specified then only the minimum value is tested.\nAllows features in-place modification of line and polygon features with Z enabled",
        "parameters": "INPUT: Input layer. Input line or polygon vector layerto remove vertices from. Type: [vector: line, polygon]\nMIN: Minimum Optional. Minimum of Z values allowed. Type: [number ] Default: Not set\nMAX: Maximum Optional. Maximum of Z values allowed. Type: [number ] Default: Not set\nOUTPUT: Filtered. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef filter_vertices_by_z():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/FilteredLayer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Filter Vertices by Z algorithm\n    result = processing.run('native:filterverticesbyz', {\n        'INPUT': input_layer,\n        'MIN': 100,  # Minimum Z value allowed. Set to your required value or remove if not needed\n        'MAX': 300,  # Maximum Z value allowed. Set to your required value or remove if not needed\n        'OUTPUT': output_path  # Options: [Create Temporary Layer (TEMPORARY_OUTPUT), Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026]\n    })\n\n    # Load the result layer to QGIS\n    filtered_layer = QgsVectorLayer(result['OUTPUT'], 'Filtered', 'ogr')\n    QgsProject.instance().addMapLayer(filtered_layer)\n\n# Execute the function\nfilter_vertices_by_z()"
    },
    {
        "tool_id": "native:fixgeometries",
        "toolname": "fixgeometries",
        "tool_description": "Attempts to create a valid representation of a given invalid geometry without losing any of the input vertices. Already valid geometries are returned without further intervention. Always outputs multi-geometry layer.\nAllows features in-place modification of point, line, and polygon features without M enabled",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nMETHOD: Repair method. Method used to repair the geometries. One of: 0 \u2014 Linework : combines all rings into a set of noded lines andthen extracts valid polygons from that linework 1 \u2014 Structure : first makes all rings valid and then merges shellsand subtracts holes from shells to generate valid result.Assumes that holes and shells are correctly categorized.Requires QGIS version built with GEOS 3.10 or later(check Help \u25ba About menu).. Type: [enumeration] Default: 1\nOUTPUT: Fixed geometries. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef fix_geometries():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/FixedGeometries.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the fix geometries algorithm\n    result = processing.run('native:fixgeometries', {\n        'INPUT': input_layer,\n        'METHOD': 1,  # 0 \u2014 Linework, 1 \u2014 Structure\n        'OUTPUT': output_path\n    })\n\n    # Load the fixed geometries layer to QGIS\n    fixed_geometries_layer = QgsVectorLayer(result['OUTPUT'], 'Fixed Geometries', 'ogr')\n    QgsProject.instance().addMapLayer(fixed_geometries_layer)\n\n# Execute the function\nfix_geometries()"
    },
    {
        "tool_id": "native:flattenrelationships",
        "toolname": "flattenrelationships",
        "tool_description": "Flattens a relationship for a vector layer, exporting a single layer containing one parent feature per related child feature. This master feature contains all the attributes for the related features. This allows to have the relation as a plain table that can be e.g. exported to CSV.",
        "parameters": "INPUT: Input Layer. Layer with the relationship that should be de-normalized. Type: [vector: any]\nOUTPUT: Flattened Layer Optional. Specify the output (flattened) layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef flatten_relationships():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/InputLayer.shp'\n    output_layer_path = 'C:/output_path/FlattenedLayer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Layer', 'ogr')\n\n    # Run the Flatten Relationships algorithm\n    result = processing.run('native:flattenrelationships', {\n        'INPUT': input_layer_path,\n        'OUTPUT': output_layer_path  # One of: TEMPORARY_OUTPUT, Save to File, Save to Geopackage, Save to Database Table\n    })\n\n    # Load the flattened layer to QGIS\n    flattened_layer = QgsVectorLayer(result['OUTPUT'], 'Flattened Layer', 'ogr')\n    QgsProject.instance().addMapLayer(flattened_layer)\n\n# Execute the function\nflatten_relationships()"
    },
    {
        "tool_id": "native:forcerhr",
        "toolname": "forcerhr",
        "tool_description": "Forces polygon geometries to respect the Right-Hand-Rule, in which the area that is bounded by a polygon is to the right of the boundary. In particular, the exterior ring is oriented in a clockwise direction and any interior rings in a counter-clockwise direction.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: polygon]\nOUTPUT: Reoriented. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef reorient_polygons():\n    # Define input and output paths\n    input_path = 'D:/Data/Polygons.shp'\n    output_path = 'C:/output_path/reoriented_polygons.shp'\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Polygons', 'ogr')\n\n    # Run the Reorient Polygon algorithm\n    result = processing.run('native:forcerhr', {\n        'INPUT': input_path,\n        'OUTPUT': output_path  # Create Temporary Layer, Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    })\n\n    # Load the reoriented polygon layer to QGIS\n    reoriented_layer = QgsVectorLayer(result['OUTPUT'], 'Reoriented Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(reoriented_layer)\n\n# Execute the function\nreorient_polygons()"
    },
    {
        "tool_id": "native:fuzzifyrastergaussianmembership",
        "toolname": "fuzzifyrastergaussianmembership",
        "tool_description": "Transforms an input raster to a fuzzified raster by assigning a membership value to each pixel, using a Gaussian membership function. Membership values range from 0 to 1. In the fuzzified raster, a value of 0 implies no membership of the defined fuzzy set, whereas a value of 1 means full membership. The gaussian membership function is defined as , where f1 is the spread and f2 the midpoint.",
        "parameters": "INPUT: Input Raster. Input raster layer. Type: [raster]\nBAND: Band Number. If the raster is multiband, choose the band thatyou want to fuzzify.. Type: [raster band] Default: The first band of the raster layer \nFUZZYMIDPOINT: Function midpoint. Midpoint of the gaussian function. Type: [number] Default: 10 \nFUZZYSPREAD: Function spread. Spread of the gaussian function. Type: [number] Default: 0.01 \nOUTPUT: Fuzzified raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] outputs = \nOUTPUT: Fuzzified raster. Output raster layer containing the result. Type: [same as input] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef fuzzify_raster():\n    input_raster_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/fuzzified_raster.tif'\n  \n    input_layer = QgsRasterLayer(input_raster_path, 'Input Raster')\n\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,  # Default: The first band of the raster layer\n        'FUZZYMIDPOINT': 10,  # Default: 10\n        'FUZZYSPREAD': 0.01,  # Default: 0.01\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:fuzzifyrastergaussianmembership', parameters)\n    \n    output_raster = QgsRasterLayer(result['OUTPUT'], 'Fuzzified Raster')\n    QgsProject.instance().addMapLayer(output_raster)\n\nfuzzify_raster()"
    },
    {
        "tool_id": "native:fuzzifyrasterlargemembership",
        "toolname": "fuzzifyrasterlargemembership",
        "tool_description": "Transforms an input raster to a fuzzified raster by assigning a membership value to each pixel, using a Large membership function. Membership values range from 0 to 1. In the fuzzified raster, a value of 0 implies no membership of the defined fuzzy set, whereas a value of 1 means full membership. The large membership function is defined as , where f1 is the spread and f2 the midpoint.",
        "parameters": "INPUT: Input Raster. Input raster layer. Type: [raster]\nBAND: Band Number. If the raster is multiband, choose the band that you want tofuzzify.. Type: [raster band] Default: The first band of the raster layer \nFUZZYMIDPOINT: Function midpoint. Midpoint of the large function. Type: [number] Default: 50 \nFUZZYSPREAD: Function spread. Spread of the large function. Type: [number] Default: 5 \nOUTPUT: Fuzzified raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] outputs = \nOUTPUT: Fuzzified raster. Output raster layer containing the result. Type: [same as input] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef fuzzify_raster():\n    # Define input and output paths\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/fuzzified_raster.tif'\n    \n    # Load the raster as a raster layer\n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n\n    # Run the Fuzzify Raster Large Membership algorithm\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,  # choose the first band of the raster layer\n        'FUZZYMIDPOINT': 50,\n        'FUZZYSPREAD': 5,\n        'OUTPUT': output_path  # Save to File\u2026\n    }\n    \n    result = processing.run('native:fuzzifyrasterlargemembership', parameters)\n\n    # Load the fuzzified raster layer to QGIS\n    fuzzified_layer = QgsRasterLayer(result['OUTPUT'], 'Fuzzified Raster')\n    QgsProject.instance().addMapLayer(fuzzified_layer)\n\n# Execute the function\nfuzzify_raster()"
    },
    {
        "tool_id": "native:fuzzifyrasterlinearmembership",
        "toolname": "fuzzifyrasterlinearmembership",
        "tool_description": "Transforms an input raster to a fuzzified raster by assigning a membership value to each pixel, using a Linear membership function. Membership values range from 0 to 1. In the fuzzified raster, a value of 0 implies no membership of the defined fuzzy set, whereas a value of 1 means full membership. The linear function is defined as , where a is the low bound and b the high bound. This equation assigns membership values using a linear transformation for pixel values between the low and high bounds. Pixels values smaller than the low bound are given 0 membership whereas pixel values greater than the high bound are given 1 membership.",
        "parameters": "INPUT: Input Raster. Input raster layer. Type: [raster]\nBAND: Band Number. If the raster is multiband, choose the band that you want tofuzzify.. Type: [raster band] Default: The first band of the raster layer \nFUZZYLOWBOUND: Low fuzzy membership bound. Low bound of the linear function. Type: [number] Default: 0 \nFUZZYHIGHBOUND: High fuzzy membership bound. High bound of the linear function. Type: [number] Default: 1 \nOUTPUT: Fuzzified raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] outputs = \nOUTPUT: Fuzzified raster. Output raster layer containing the result. Type: [same as input] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "from qgis.core import QgsProject, QgsRasterLayer\nimport processing\n\ndef fuzzify_raster_linear():\n    # Define input and output paths\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/FuzzifiedRaster.tif'\n\n    # Load the raster as a raster layer\n    input_raster = QgsRasterLayer(input_path, 'Input Raster')\n\n    # Run the fuzzify raster linear membership algorithm\n    result = processing.run('native:fuzzifyrasterlinearmembership', {\n        'INPUT': input_raster,\n        'BAND': 1,  # Default is the first band\n        'FUZZYLOWBOUND': 0,\n        'FUZZYHIGHBOUND': 1,\n        'OUTPUT': output_path\n    })\n\n    # Load the fuzzified raster layer to QGIS\n    fuzzified_raster = QgsRasterLayer(result['OUTPUT'], 'Fuzzified Raster')\n    QgsProject.instance().addMapLayer(fuzzified_raster)\n\n# Execute the function\nfuzzify_raster_linear()"
    },
    {
        "tool_id": "native:fuzzifyrasternearmembership",
        "toolname": "fuzzifyrasternearmembership",
        "tool_description": "Transforms an input raster to a fuzzified raster by assigning a membership value to each pixel, using a Near membership function. Membership values range from 0 to 1. In the fuzzified raster, a value of 0 implies no membership of the defined fuzzy set, whereas a value of 1 means full membership. The near membership function is defined as , where f1 is the spread and f2 the midpoint.",
        "parameters": "INPUT: Input Raster. Input raster layer. Type: [raster]\nBAND: Band Number. If the raster is multiband, choose the band that you want tofuzzify.. Type: [raster band] Default: The first band of the raster layer \nFUZZYMIDPOINT: Function midpoint. Midpoint of the near function. Type: [number] Default: 50 \nFUZZYSPREAD: Function spread. Spread of the near function. Type: [number] Default: 0.01 \nOUTPUT: Fuzzified raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] outputs = \nOUTPUT: Fuzzified raster. Output raster layer containing the result. Type: [same as input] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef fuzzify_raster_near_membership():\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/fuzzified_raster.tif'\n\n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,  # Default: 1. Choose the band that you want to fuzzify\n        'FUZZYMIDPOINT': 50,\n        'FUZZYSPREAD': 0.01,\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:fuzzifyrasternearmembership', parameters)\n    QgsProject.instance().addMapLayer(QgsRasterLayer(result['OUTPUT'], 'Fuzzified Raster'))\n\nfuzzify_raster_near_membership()"
    },
    {
        "tool_id": "native:fuzzifyrasterpowermembership",
        "toolname": "fuzzifyrasterpowermembership",
        "tool_description": "Transforms an input raster to a fuzzified raster by assigning a membership value to each pixel, using a Power membership function. Membership values range from 0 to 1. In the fuzzified raster, a value of 0 implies no membership of the defined fuzzy set, whereas a value of 1 means full membership. The power function is defined as , where a is the low bound, b is the high bound, and f1 the exponent. This equation assigns membership values using the power transformation for pixel values between the low and high bounds. Pixels values smaller than the low bound are given 0 membership whereas pixel values greater than the high bound are given 1 membership.",
        "parameters": "INPUT: Input Raster. Input raster layer. Type: [raster]\nBAND: Band Number. If the raster is multiband, choose the band that you want tofuzzify.. Type: [raster band] Default: The first band of the raster layer \nFUZZYLOWBOUND: Low fuzzy membership bound. Low bound of the power function. Type: [number] Default: 0 \nFUZZYHIGHBOUND: High fuzzy membership bound. High bound of the power function. Type: [number] Default: 1 \nFUZZYEXPONENT: High fuzzy membership bound. Exponent of the power function. Type: [number] Default: 2 \nOUTPUT: Fuzzified raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] outputs = \nOUTPUT: Fuzzified raster. Output raster layer containing the result. Type: [same as input] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef fuzzify_raster():\n    input_raster_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/fuzzified_raster.tif'\n\n    # Load the raster layer\n    input_raster = QgsRasterLayer(input_raster_path, 'Input Raster')\n\n    # Define parameters\n    parameters = {\n        'INPUT': input_raster,\n        'BAND': 1,  # The first band of the raster layer\n        'FUZZYLOWBOUND': 0,\n        'FUZZYHIGHBOUND': 1,\n        'FUZZYEXPONENT': 2,\n        'OUTPUT': output_path\n    }\n\n    # Run the fuzzify raster power membership algorithm\n    result = processing.run('native:fuzzifyrasterpowermembership', parameters)\n\n    # Load the fuzzified raster layer\n    fuzzified_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Fuzzified Raster')\n    QgsProject.instance().addMapLayer(fuzzified_raster_layer)\n\n# Execute the function\nfuzzify_raster()"
    },
    {
        "tool_id": "native:fuzzifyrastersmallmembership",
        "toolname": "fuzzifyrastersmallmembership",
        "tool_description": "Transforms an input raster to a fuzzified raster by assigning a membership value to each pixel, using a Small membership function. Membership values range from 0 to 1. In the fuzzified raster, a value of 0 implies no membership of the defined fuzzy set, whereas a value of 1 means full membership. The small membership function is defined as , where f1 is the spread and f2 the midpoint.",
        "parameters": "INPUT: Input Raster. Input raster layer. Type: [raster]\nBAND: Band Number. If the raster is multiband, choose the band that you want tofuzzify.. Type: [raster band] Default: The first band of the raster layer \nFUZZYMIDPOINT: Function midpoint. Midpoint of the small function. Type: [number] Default: 50 \nFUZZYSPREAD: Function spread. Spread of the small function. Type: [number] Default: 5 \nOUTPUT: Fuzzified raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] outputs = \nOUTPUT: Fuzzified raster. Output raster layer containing the result. Type: [same as input] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef fuzzify_raster(input_raster_path, output_path):\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n\n    parameters = {\n        'INPUT': input_raster,\n        'BAND': 1,\n        'FUZZYMIDPOINT': 50,\n        'FUZZYSPREAD': 5,\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:fuzzifyrastersmallmembership', parameters)\n    \n    fuzzified_layer = QgsRasterLayer(result['OUTPUT'], 'Fuzzified Raster')\n    QgsProject.instance().addMapLayer(fuzzified_layer)\n\ninput_raster_path = \"D:/Data/InputRaster.tif\"\noutput_path = \"D:/workspace_directory/fuzzified_raster.tif\"\nfuzzify_raster(input_raster_path, output_path)"
    },
    {
        "tool_id": "native:generatepointspixelcentroidsinsidepolygons",
        "toolname": "generatepointspixelcentroidsinsidepolygons",
        "tool_description": "Generates a point vector layer from an input raster and polygon layer.\nThe points correspond to the pixel centroids that intersect the polygon layer.",
        "parameters": "INPUT_RASTER: Raster layer. Input raster layer. Type: [raster]\nINPUT_VECTOR: Vector layer. Input polygon vector layer. Type: [vector: polygon] \nOUTPUT: Points inside polygons. Resulting point layer of pixel centroids. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Points inside polygons. Resulting point layer of pixel centroids. Type: [vector: point]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_points_pixel_centroids_inside_polygons():\n    # Define the input and output paths\n    input_raster_path = 'D:/input_raster.tif'\n    input_vector_path = 'D:/input_polygon.shp'\n    output_path = 'D:/output_points.shp'\n\n    # Load the input layers\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n    input_vector = QgsVectorLayer(input_vector_path, \"Input Polygon\", \"ogr\")\n\n                               \n    parameters = {\n        'INPUT_RASTER': input_raster_path,\n        'INPUT_VECTOR': input_vector_path,\n        'OUTPUT': output_path                                                                                          \n    }\n\n                                  \n    processing.run(\"native:generatepointspixelcentroidsinsidepolygons\", parameters)\n\n                              \n    output_layer = QgsVectorLayer(output_path, 'Points_Inside_Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \ngenerate_points_pixel_centroids_inside_polygons()"
    },
    {
        "tool_id": "native:geometrybyexpression",
        "toolname": "geometrybyexpression",
        "tool_description": "Updates existing geometries (or creates new geometries) for input features by use of a QGIS expression.\nThis allows complex geometry modifications which can utilize all the flexibility of the QGIS expression engine to manipulate and create geometries for output features.\nFor help with QGIS expression functions, see the inbuilt help available in the expression builder .",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nOUTPUT_GEOMETRY: Output geometry type. The output geometry strongly depends on the expression: forinstance, if you create a buffer the geometry type has to bepolygon.One of: 0 \u2014 Polygon 1 \u2014 Line 2 \u2014 Point. Type: [enumeration] Default: 0\nWITH_Z: Output geometry has z values. Choose if the output geometry should include the Z dimension. Type: [boolean] Default: False\nWITH_M: Output geometry has m values. Choose if the output geometry should include the M dimension. Type: [boolean] Default: False\nEXPRESSION: Geometry expression. Add the geometry expression you want to use.You can use the button to open the Expression Dialog.The dialog lists all the relevant expressions, togetherwith their help and guide.. Type: [expression] Default: \u2018$geometry\u2019\nOUTPUT: Modified geometry. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef geometry_by_expression():\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'D:/workspace_directory/OutputData.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'OUTPUT_GEOMETRY': 0, # Options: 0 - Polygon, 1 - Line, 2 - Point\n        'WITH_Z': False, \n        'WITH_M': False,\n        'EXPRESSION': '$geometry',\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:geometrybyexpression', parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Modified Geometry', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ngeometry_by_expression()"
    },
    {
        "tool_id": "native:gltftovector",
        "toolname": "gltftovector",
        "tool_description": "Converts .GLTF or .GLB file contents to standard vector layer formats.",
        "parameters": "INPUT: Input\nGLTF. Input file to convert.. Type: \n[3D Tile] \nOUTPUT_POLYGONS: Output polygons Optional. Specify the output vector layer to store polygon features. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] \nOUTPUT_LINES: Output lines Optional. Specify the output vector layer to store line features. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] outputs = \nOUTPUT_POLYGONS: Output polygons. \nA vector layer storing the polygon features in input layer.. Type: [vector: polygon] \nOUTPUT_LINES: Output lines. \nA vector layer storing the line features in input layer.. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef convert_gltf_to_vector():\n    input_gltf_path = 'D:/input_model.gltf'\n    # Load the input GLTF file\n    input_layer = QgsVectorLayer(input_gltf_path, \"\"\"Input GLTF\", \"3dmodel\")\n\n                           \n    parameters = {\n        'INPUT': input_gltf_path,\n        'OUTPUT_POLYGONS': 'TEMPORARY_OUTPUT',                                                                                                                                  \n        'OUTPUT_LINES': 'TEMPORARY_OUTPUT'                                                                                                                                  \n    }\n\n                                           \n    result = processing.run(\"native:gltftovector\", parameters)\n\n                                  \n    output_polygons_layer = QgsVectorLayer(result['OUTPUT_POLYGONS'], 'Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(output_polygons_layer)\n\n    output_lines_layer = QgsVectorLayer(result['OUTPUT_LINES'], 'Lines', 'ogr')\n    QgsProject.instance().addMapLayer(output_lines_layer)\n\n                      \nconvert_gltf_to_vector()"
    },
    {
        "tool_id": "native:greaterthanfrequency",
        "toolname": "greaterthanfrequency",
        "tool_description": "Evaluates on a cell-by-cell basis the frequency (number of times) the values of an input stack of rasters are equal to the value of a value raster. The output raster extent and resolution is defined by the input raster layer and is always of Int32 type.\nIf multiband rasters are used in the data raster stack, the algorithm will always perform the analysis on the first band of the rasters - use GDAL to use other bands in the analysis. The output NoData value can be set manually.",
        "parameters": "INPUT_VALUE_RASTER: Input value raster. The input value layer serves as reference layer for the sample layers. Type: [raster]\nINPUT_VALUE_RASTER_BAND: Value raster band. Select the band you want to use as sample. Type: [raster band] Default: The first band of the raster layer \nINPUT_RASTERS: Input raster layers. Raster layers to evaluate.If multiband rasters are used in the data raster stack, the algorithmwill always perform the analysis on the first band of the rasters. Type: [raster] [list] \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the value raster or the data layer stackwill result in a NoData cell in the output raster. Type: [boolean] Default: False \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOUTPUT_NO_DATA_VALUE: Output NoData value Optional. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nFOUND_LOCATIONS_COUNT: Count of cells with equal value occurrences. . Type: [number] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [number] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer] \nMEAN_FREQUENCY_PER_LOCATION: Mean frequency at valid cell locations. . Type: [number] \nOCCURRENCE_COUNT: Count of value occurrences. . Type: [number] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef greater_than_frequency():\n    # Define input and output paths\n    input_value_raster_path = 'D:/Data/InputValueRaster.tif'\n    input_raster_layers_paths = ['D:/Data/Raster1.tif', 'D:/Data/Raster2.tif']\n    output_path = 'C:/output_path/output_layer.tif'\n    \n    # Load the input value raster as a raster layer\n    input_value_raster = QgsRasterLayer(input_value_raster_path, 'Input Value Raster')\n\n    # Define the parameters\n    parameters = {\n        'INPUT_VALUE_RASTER': input_value_raster_path,\n        'INPUT_VALUE_RASTER_BAND': 1,  # The first band of the raster layer\n        'INPUT_RASTERS': input_raster_layers_paths,\n        'IGNORE_NODATA': False,  # Ignore NoData values. Options: True, False\n        'OUTPUT': output_path,\n        'OUTPUT_NO_DATA_VALUE': -9999.0  # Default NoData value\n    }\n\n    # Perform the greater than frequency operation\n    result = processing.run('native:greaterthanfrequency', parameters)\n\n    # Load the output raster layer to QGIS\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Greater Than Frequency Output')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\ngreater_than_frequency()"
    },
    {
        "tool_id": "native:highestpositioninrasterstack",
        "toolname": "highestpositioninrasterstack",
        "tool_description": "Evaluates on a cell-by-cell basis the position of the raster with the highest value in a stack of rasters. Position counts start with 1 and range to the total number of input rasters. The order of the input rasters is relevant for the algorithm. If multiple rasters feature the highest value, the first raster will be used for the position value.\nIf multiband rasters are used in the data raster stack, the algorithm will always perform the analysis on the first band of the rasters - use GDAL to use other bands in the analysis. Any NoData cells in the raster layer stack will result in a NoData cell in the output raster unless the \u201cignore NoData\u201d parameter is checked. The output NoData value can be set manually. The output rasters extent and resolution is defined by a reference raster layer and is always of Int32 type.",
        "parameters": "INPUT_RASTERS: Input raster layers. List of raster layers to compare with. Type: [raster] [list]\nREFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, \nCRS, pixel dimensions). Type: [raster] \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the data layer stackwill result in a NoData cell in the output raster. Type: [boolean] Default: False \nOUTPUT: Output layer. Specification of the output raster containing the result.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef highest_position_in_raster_stack():\n    # Define input paths and output path\n    input_rasters = ['D:/Data/Raster1.tif', 'D:/Data/Raster2.tif', 'D:/Data/Raster3.tif']  # list of raster paths\n    reference_layer_path = 'D:/Data/ReferenceLayer.tif'\n    output_path = 'C:/output_path/output_raster.tif'\n    \n    # Load the reference layer\n    reference_layer = QgsRasterLayer(reference_layer_path, 'Reference Layer')\n    \n    # Define the parameters\n    parameters = {\n        'INPUT_RASTERS': input_rasters,  # [raster] [list]\n        'REFERENCE_LAYER': reference_layer,  # [raster]\n        'IGNORE_NODATA': False,  # [boolean] Default: False\n        'OUTPUT': output_path,  # [raster] Default: [Save to temporary file]\n        'OUTPUT_NODATA_VALUE': -9999.0  # [number] Default: -9999.0\n    }\n    \n    # Run the algorithm\n    result = processing.run(\"\"\"native:highestpositioninrasterstack\", parameters)\n\n                                   \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Highest Position in Raster Stack')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nhighest_position_in_raster_stack()"
    },
    {
        "tool_id": "native:hillshade",
        "toolname": "hillshade",
        "tool_description": "Evaluates on a cell-by-cell basis the position of the raster with the highest value in a stack of rasters. Position counts start with 1 and range to the total number of input rasters. The order of the input rasters is relevant for the algorithm. If multiple rasters feature the highest value, the first raster will be used for the position value.\nIf multiband rasters are used in the data raster stack, the algorithm will always perform the analysis on the first band of the rasters - use GDAL to use other bands in the analysis. Any NoData cells in the raster layer stack will result in a NoData cell in the output raster unless the \u201cignore NoData\u201d parameter is checked. The output NoData value can be set manually. The output rasters extent and resolution is defined by a reference raster layer and is always of Int32 type.",
        "parameters": "INPUT_RASTERS: Input raster layers. List of raster layers to compare with. Type: [raster] [list]\nREFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, \nCRS, pixel dimensions). Type: [raster] \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the data layer stackwill result in a NoData cell in the output raster. Type: [boolean] Default: False \nOUTPUT: Output layer. Specification of the output raster containing the result.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef highest_position_in_raster_stack():\n    # Define input paths and output path\n    input_rasters = ['D:/Data/Raster1.tif', 'D:/Data/Raster2.tif', 'D:/Data/Raster3.tif']  # list of raster paths\n    reference_layer_path = 'D:/Data/ReferenceLayer.tif'\n    output_path = 'C:/output_path/output_raster.tif'\n    \n    # Load the reference layer\n    reference_layer = QgsRasterLayer(reference_layer_path, 'Reference Layer')\n    \n    # Define the parameters\n    parameters = {\n        'INPUT_RASTERS': input_rasters,  # [raster] [list]\n        'REFERENCE_LAYER': reference_layer,  # [raster]\n        'IGNORE_NODATA': False,  # [boolean] Default: False\n        'OUTPUT': output_path,  # [raster] Default: [Save to temporary file]\n        'OUTPUT_NODATA_VALUE': -9999.0  # [number] Default: -9999.0\n    }\n    \n    # Run the algorithm\n    result = processing.run(\"\"\"native:highestpositioninrasterstack\", parameters)\n\n                                   \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Highest Position in Raster Stack')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nhighest_position_in_raster_stack()"
    },
    {
        "tool_id": "native:hublines",
        "toolname": "hublines",
        "tool_description": "Creates hub and spoke diagrams by connecting lines from points on the Spoke layer to matching points in the Hub layer.\nDetermination of which hub goes with each point is based on a match between the Hub ID field on the hub points and the Spoke ID field on the spoke points.\nIf input layers are not point layers, a point on the surface of the geometries will be taken as the connecting location.\nOptionally, geodesic lines can be created, which represent the shortest path on the surface of an ellipsoid. When geodesic mode is used, it is possible to split the created lines at the antimeridian (\u00b1180 degrees longitude), which can improve rendering of the lines. Additionally, the distance between vertices can be specified. A smaller distance results in a denser, more accurate line.",
        "parameters": "HUBS: Hub layer. Input layer. Type: [vector: any]\nHUB_FIELD: Hub ID field. Field of the hub layer with ID to join. Type: [tablefield: any]\nHUB_FIELDS: Hub layer fields to copy (leave empty to copy all fields) Optional. The field(s) of the hub layer to be copied.If no field(s) are chosen all fields are taken.. Type: [tablefield: any] [list]\nSPOKES: Spoke layer. Additional spoke point layer. Type: [vector: any]\nSPOKE_FIELD: Spoke ID field. Field of the spoke layer with ID to join. Type: [tablefield: any]\nSPOKE_FIELDS: Spoke layer fields to copy (leave empty to copy all fields) Optional. Field(s) of the spoke layer to be copied.If no fields are chosen all fields are taken.. Type: [tablefield: any] [list]\nGEODESIC: Create geodesic lines. Create geodesic lines (the shortest path on the surface ofan ellipsoid). Type: [boolean] Default: False\nOUTPUT: Hub lines. Specify the output hub line vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]\nGEODESIC_DISTANCE: Distance between vertices (geodesic lines only). Distance between consecutive vertices (in kilometers).A smaller distance results in a denser, more accurate line. Type: [number] Default: 1000.0 (kilometers)\nANTIMERIDIAN_SPLIT: Split lines at antimeridian (\u00b1180 degrees longitude). Split lines at \u00b1180 degrees longitude (to improve renderingof the lines). Type: [boolean] Default: False",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_hublines():\n    hub_layer_path = 'path/to/hub_layer.shp'\n    spoke_layer_path = 'path/to/spoke_layer.shp'\n    output_path = 'path/to/output_layer.shp'\n\n    hub_layer = QgsVectorLayer(hub_layer_path, 'Hub Layer', 'ogr')\n    spoke_layer = QgsVectorLayer(spoke_layer_path, 'Spoke Layer', 'ogr')\n\n    parameters = {\n        'HUBS': hub_layer,\n        'HUB_FIELD': 'Hub_ID_Field',\n        'HUB_FIELDS': ['Field1', 'Field2'],  # or leave empty to copy all fields\n        'SPOKES': spoke_layer,\n        'SPOKE_FIELD': 'Spoke_ID_Field',\n        'SPOKE_FIELDS': ['FieldA', 'FieldB'],  # or leave empty to copy all fields\n        'GEODESIC': False,  # True or False\n        'OUTPUT': output_path,  # or 'TEMPORARY_OUTPUT'\n        'GEODESIC_DISTANCE': 1000.0,\n        'ANTIMERIDIAN_SPLIT': False  # True or False\n    }\n\n    result = processing.run('native:hublines', parameters)\n    hublines_layer = QgsVectorLayer(result['OUTPUT'], 'Hub Lines', 'ogr')\n    QgsProject.instance().addMapLayer(hublines_layer)\n\ncreate_hublines()"
    },
    {
        "tool_id": "native:importintopostgis",
        "toolname": "importintopostgis",
        "tool_description": "Creates hub and spoke diagrams by connecting lines from points on the Spoke layer to matching points in the Hub layer.\nDetermination of which hub goes with each point is based on a match between the Hub ID field on the hub points and the Spoke ID field on the spoke points.\nIf input layers are not point layers, a point on the surface of the geometries will be taken as the connecting location.\nOptionally, geodesic lines can be created, which represent the shortest path on the surface of an ellipsoid. When geodesic mode is used, it is possible to split the created lines at the antimeridian (\u00b1180 degrees longitude), which can improve rendering of the lines. Additionally, the distance between vertices can be specified. A smaller distance results in a denser, more accurate line.",
        "parameters": "HUBS: Hub layer. Input layer. Type: [vector: any]\nHUB_FIELD: Hub ID field. Field of the hub layer with ID to join. Type: [tablefield: any]\nHUB_FIELDS: Hub layer fields to copy (leave empty to copy all fields) Optional. The field(s) of the hub layer to be copied.If no field(s) are chosen all fields are taken.. Type: [tablefield: any] [list]\nSPOKES: Spoke layer. Additional spoke point layer. Type: [vector: any]\nSPOKE_FIELD: Spoke ID field. Field of the spoke layer with ID to join. Type: [tablefield: any]\nSPOKE_FIELDS: Spoke layer fields to copy (leave empty to copy all fields) Optional. Field(s) of the spoke layer to be copied.If no fields are chosen all fields are taken.. Type: [tablefield: any] [list]\nGEODESIC: Create geodesic lines. Create geodesic lines (the shortest path on the surface ofan ellipsoid). Type: [boolean] Default: False\nOUTPUT: Hub lines. Specify the output hub line vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]\nGEODESIC_DISTANCE: Distance between vertices (geodesic lines only). Distance between consecutive vertices (in kilometers).A smaller distance results in a denser, more accurate line. Type: [number] Default: 1000.0 (kilometers)\nANTIMERIDIAN_SPLIT: Split lines at antimeridian (\u00b1180 degrees longitude). Split lines at \u00b1180 degrees longitude (to improve renderingof the lines). Type: [boolean] Default: False",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_hublines():\n    hub_layer_path = 'path/to/hub_layer.shp'\n    spoke_layer_path = 'path/to/spoke_layer.shp'\n    output_path = 'path/to/output_layer.shp'\n\n    hub_layer = QgsVectorLayer(hub_layer_path, 'Hub Layer', 'ogr')\n    spoke_layer = QgsVectorLayer(spoke_layer_path, 'Spoke Layer', 'ogr')\n\n    parameters = {\n        'HUBS': hub_layer,\n        'HUB_FIELD': 'Hub_ID_Field',\n        'HUB_FIELDS': ['Field1', 'Field2'],  # or leave empty to copy all fields\n        'SPOKES': spoke_layer,\n        'SPOKE_FIELD': 'Spoke_ID_Field',\n        'SPOKE_FIELDS': ['FieldA', 'FieldB'],  # or leave empty to copy all fields\n        'GEODESIC': False,  # True or False\n        'OUTPUT': output_path,  # or 'TEMPORARY_OUTPUT'\n        'GEODESIC_DISTANCE': 1000.0,\n        'ANTIMERIDIAN_SPLIT': False  # True or False\n    }\n\n    result = processing.run('native:hublines', parameters)\n    hublines_layer = QgsVectorLayer(result['OUTPUT'], 'Hub Lines', 'ogr')\n    QgsProject.instance().addMapLayer(hublines_layer)\n\ncreate_hublines()"
    },
    {
        "tool_id": "native:importphotos",
        "toolname": "importphotos",
        "tool_description": "Creates a point layer corresponding to the geotagged locations from JPEG or HEIC/HEIF images from a source folder.\nThe point layer will contain a single PointZ feature per input file from which the geotags could be read. Any altitude information from the geotags will be used to set the point\u2019s Z value.\nBesides longitude and latitude also altitude, direction and timestamp information, if present in the photo, will be added to the point as attributes.",
        "parameters": "FOLDER: Input folder. Path to the source folder containing the geotagged photos. Type: [folder]\nRECURSIVE: Scan recursively. If checked, the folder and its subfolders will be scanned. Type: [boolean] Default: False \nOUTPUT: Photos Optional. Specify the point vector layer for the geotagged photos.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] \nINVALID: Invalid photos table Optional. Specify the table of unreadable or non-geotagged photos.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Skip output] outputs = \nOUTPUT: Photos. Point vector layer with geotagged photos.The form of the layer is automatically filled withpaths and photo previews settings.. Type: [vector: point] \nINVALID: Invalid photos table Optional. Table of unreadable or non-geotagged photos canalso be created.. Type: [table]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef import_geotagged_photos(output_path):\n    parameters = {\n        'FOLDER': 'C:/path_to_photos_folder', # [folder]\n        'RECURSIVE': False,  # [boolean] Default: False\n        'OUTPUT': output_path,  # Choose output option: Create Temporary Layer, Save to File, Save to Geopackage, Save to Database Table\n        'INVALID': ''  # Optional: Skip Output, Create Temporary Layer, Save to File, Save to Geopackage, Save to Database Table\n    }\n    \n    result = processing.run(\"\"\"native:importphotos\", parameters)\n    \n    if result['OUTPUT']:\n        output_layer = QgsVectorLayer(result['OUTPUT'], 'Geotagged_Photos', 'ogr')\n        QgsProject.instance().addMapLayer(output_layer)\n\n                  \nimport_geotagged_photos('memory:')"
    },
    {
        "tool_id": "native:interpolatepoint",
        "toolname": "interpolatepoint",
        "tool_description": "Creates a point geometry interpolated at a set distance along line or curve geometries.\nZ and M values are linearly interpolated from existing values.\nIf a multipart geometry is encountered, only the first part is considered when calculating the substring.\nIf the specified distance is greater than the input feature\u2019s length, the resultant feature will have a null geometry.",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nDISTANCE: Distance. Distance from the beginning of the line. Type: [number ] Default: 0.0\nOUTPUT: Interpolated points. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef interpolate_points():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'  # Input layer\n    output_path = 'C:/output_path/interpolated_points.shp'  # Output path\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Interpolate Points algorithm\n    result = processing.run('native:interpolatepoint', {\n        'INPUT': input_layer,\n        'DISTANCE': 100.0,  # Distance from the beginning of the line\n        'OUTPUT': output_path\n    })\n\n    # Load the interpolated points layer to QGIS\n    interpolated_points_layer = QgsVectorLayer(result['OUTPUT'], 'Interpolated Points', 'ogr')\n    QgsProject.instance().addMapLayer(interpolated_points_layer)\n\n# Execute the function\ninterpolate_points()"
    },
    {
        "tool_id": "native:intersection",
        "toolname": "intersection",
        "tool_description": "This algorithm extracts the overlapping portions of features in the Input and Overlay layers. Features in the output\nIntersection layer are assigned the attributes of the overlapping features from both the Input and Overlay layers.",
        "parameters": "INPUT:\nOVERLAY:\nINPUT_FIELDS:\nOVERLAY_FIELDS:\nOVERLAY_FIELDS_PREFIX:\nGRID_SIZE:\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef intersection():\n    output_path = \"D:/Output_Directory/Output_layer.shp\"\n\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT':'D:/SpatialAnalysisAgent/Data/Exercise12Data/flood2015may_ESRI102965.shp', #Layer to extract (parts of) features from.\n        'OVERLAY':'D:/SpatialAnalysisAgent/Data/Exercise12Data/rivers_ESRI102965.shp', # Layer containing the features to check for overlap. Its features\u2019 geometry is expected to have at least as many dimensions (point: 0D, line: 1D, polygon: 2D, volume: 3D) as the input layer\u2019s.\n        'INPUT_FIELDS':[], #  Field(s) of the input layer to keep in the output. If no fields are chosen all fields are taken.\n        'OVERLAY_FIELDS':[], # Field(s) of the overlay layer to keep in the output. If no fields are chosen all fields are taken. Duplicate field names will be appended a count suffix to avoid collision.\n        'OVERLAY_FIELDS_PREFIX':'',\n        'OUTPUT': output_path,\n        'GRID_SIZE':None}\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:intersection\", parameters)\n    # Load the selected features as a new layer\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Intersection', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\nintersection()"
    },
    {
        "tool_id": "native:joinattributesbylocation",
        "toolname": "joinattributesbylocation",
        "tool_description": "Join attributes from one vector layer to another by location. This algorithm takes an input vector layer and creates a new vector layer that is an extended version of the input one, with additional attributes in its attribute table. The additional attributes and their values are taken from a second vector layer. A spatial criteria is applied to select the values from the second layer that are added to each feature from the first layer in the resulting one.",
        "parameters": "INPUT:\nPREDICATE:\nJOIN\nJOIN_FIELDS:\nMETHOD:\nDISCARD_NONMATCHING:\nPREFIX:\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef joinattributesbylocation():\n    output_path = 'D:/Output_path/Output_layer.shp'\n\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT':'D:/SpatialAnalysisAgent/Data/flooddata.shp',\n        'PREDICATE':[5], #Available values - 0: intersect, 1: contain, 2: equal, 3: touch, 4: overlap, 5: are within, 6: cross\n        'JOIN':'D:/SpatialAnalysisAgent/Data/roads.shp',\n        'JOIN_FIELDS':[], # Available values- 0: Create separate feature for each matching feature (one-to-many), 1: Take attributes of the first matching feature only (one-to-one), 2: Take attributes of the feature with largest overlap only (one-to-one)\n        'METHOD':0,\n        'DISCARD_NONMATCHING':True,\n        'PREFIX':'',\n        'OUTPUT': output_path\n        }\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:joinattributesbylocation\", parameters)\n    # Load the selected features as a new layer\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Joined attributes, 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\njoinattributesbylocation()"
    },
    {
        "tool_id": "native:joinattributestable",
        "toolname": "joinattributestable",
        "tool_description": "This algorithm takes an input vector layer and creates a new vector layer that is an extended version of the input one, with additional attributes in its attribute table.\nThe additional attributes and their values are taken from a second vector layer. An attribute is selected in each of them to define the join criteria.",
        "parameters": "INPUT:\nFIELD: \nINPUT_2:\nFIELD_2:\nFIELDS_TO_COPY:\nMETHOD:\nDISCARD_NONMATCHING:\nPREFIX:,\nOUTPUT: Specify the output layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef joinattributestable():\n    csv_path = 'D:/Data/D1.csv'\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT':'D:/Data/PA.gpkg',\n        'FIELD':'FIPS',\n        'INPUT_2':csv_path, # use the csv_path directly for the Input parameter in join operations.\n        'FIELD_2':'FIPS',\n        'FIELDS_TO_COPY':[],\n        'METHOD':1,\n        'DISCARD_NONMATCHING':False,\n        'PREFIX':'','OUTPUT':'TEMPORARY_OUTPUT'}\n\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:joinattributestable\", parameters)\n    # Load the selected features as a new layer\n    output_layer = result['OUTPUT']\n    QgsProject.instance().addMapLayer(output_layer)\njoinattributestable()"
    },
    {
        "tool_id": "native:joinbylocationsummary",
        "toolname": "joinbylocationsummary",
        "tool_description": "This algorithm takes an input vector layer and creates a new vector layer that is an extended version of the input one, with additional attributes in its attribute table.\nThe additional attributes and their values are taken from a second vector layer. An attribute is selected in each of them to define the join criteria.",
        "parameters": "INPUT:\nFIELD: \nINPUT_2:\nFIELD_2:\nFIELDS_TO_COPY:\nMETHOD:\nDISCARD_NONMATCHING:\nPREFIX:,\nOUTPUT: Specify the output layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef joinattributestable():\n    csv_path = 'D:/Data/D1.csv'\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT':'D:/Data/PA.gpkg',\n        'FIELD':'FIPS',\n        'INPUT_2':csv_path, # use the csv_path directly for the Input parameter in join operations.\n        'FIELD_2':'FIPS',\n        'FIELDS_TO_COPY':[],\n        'METHOD':1,\n        'DISCARD_NONMATCHING':False,\n        'PREFIX':'','OUTPUT':'TEMPORARY_OUTPUT'}\n\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:joinattributestable\", parameters)\n    # Load the selected features as a new layer\n    output_layer = result['OUTPUT']\n    QgsProject.instance().addMapLayer(output_layer)\njoinattributestable()"
    },
    {
        "tool_id": "native:joinbynearest",
        "toolname": "joinbynearest",
        "tool_description": "Takes an input vector layer and creates a new vector layer with additional fields in its attribute table. The additional attributes and their values are taken from a second vector layer. Features are joined by finding the closest features from each layer.\nBy default only the nearest feature is joined, but the join can also join to the k-nearest neighboring features.\nIf a maximum distance is specified, only features which are closer than this distance will be matched.",
        "parameters": "INPUT: Input layer. The input layer.. Type: [vector: any]\nINPUT_2: Input layer 2. The join layer.. Type: [vector: any] \nFIELDS_TO_COPY: Layer 2 fields to copy (leave empty to copy all fields). Join layer fields to copy (if empty, all fields will becopied).. Type: [fields] \nDISCARD_NONMATCHING: Discard records which could not be joined. Remove from the output the input layer records which could notbe joined. Type: [boolean] Default: False \nPREFIX: Joined field prefix. Joined field prefix. Type: [string] \nNEIGHBORS: Maximum nearest neighbors. Maximum number of nearest neighbors. Type: [number] Default: 1 \nMAX_DISTANCE: Maximum distance. Maximum search distance. Type: [number] \nOUTPUT: Joined layer Optional. Specify the vector layer containing the joined features.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nNON_MATCHING: Unjoinable features from first layer. Specify the vector layer containing the features that couldnot be joined. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Skip output] outputs = \nOUTPUT: Joined layer. The output joined layer.. Type: [same as input] \nNON_MATCHING: Unjoinable features from first layer. Layer containing the features from first layer thatcould not be joined to any features in the join layer.. Type: [same as input] \nJOINED_COUNT: Number of joined features from input table. Number of features from the input table that have beenjoined.. Type: [number] \nUNJOINABLE_COUNT: Number of unjoinable features from input table. Number of features from the input table that could notbe joined.. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef join_by_nearest():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    input_2_path = 'D:/Data/InputLayer2.shp'\n    output_path = 'C:/output_path/joined_layer.shp'\n    \n    # Load the input layers\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    input_2_layer = QgsVectorLayer(input_2_path, 'Input Layer 2', 'ogr')\n    \n    # Run the Join by Nearest algorithm\n    result = processing.run('native:joinbynearest', {\n        'INPUT': input_path,\n        'INPUT_2': input_2_path,\n        'FIELDS_TO_COPY': [],  # Leave empty to copy all fields\n        'DISCARD_NONMATCHING': False,  # Default: False\n        'PREFIX': 'joined_',\n        'NEIGHBORS': 1,  # Default value\n        'MAX_DISTANCE': 1000,  # Example max distance\n        'OUTPUT': output_path,  # Output path\n        'NON_MATCHING': 'TEMPORARY_OUTPUT'  # Default: [Skip output]\n    })\n    \n    # Load the joined layer to QGIS\n    joined_layer = QgsVectorLayer(result['OUTPUT'], 'Joined Layer', 'ogr')\n    QgsProject.instance().addMapLayer(joined_layer)\n\n# Execute the function\njoin_by_nearest()"
    },
    {
        "tool_id": "native:keepnbiggestparts",
        "toolname": "keepnbiggestparts",
        "tool_description": "Takes an input vector layer and creates a new vector layer with additional fields in its attribute table. The additional attributes and their values are taken from a second vector layer. Features are joined by finding the closest features from each layer.\nBy default only the nearest feature is joined, but the join can also join to the k-nearest neighboring features.\nIf a maximum distance is specified, only features which are closer than this distance will be matched.",
        "parameters": "INPUT: Input layer. The input layer.. Type: [vector: any]\nINPUT_2: Input layer 2. The join layer.. Type: [vector: any] \nFIELDS_TO_COPY: Layer 2 fields to copy (leave empty to copy all fields). Join layer fields to copy (if empty, all fields will becopied).. Type: [fields] \nDISCARD_NONMATCHING: Discard records which could not be joined. Remove from the output the input layer records which could notbe joined. Type: [boolean] Default: False \nPREFIX: Joined field prefix. Joined field prefix. Type: [string] \nNEIGHBORS: Maximum nearest neighbors. Maximum number of nearest neighbors. Type: [number] Default: 1 \nMAX_DISTANCE: Maximum distance. Maximum search distance. Type: [number] \nOUTPUT: Joined layer Optional. Specify the vector layer containing the joined features.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nNON_MATCHING: Unjoinable features from first layer. Specify the vector layer containing the features that couldnot be joined. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Skip output] outputs = \nOUTPUT: Joined layer. The output joined layer.. Type: [same as input] \nNON_MATCHING: Unjoinable features from first layer. Layer containing the features from first layer thatcould not be joined to any features in the join layer.. Type: [same as input] \nJOINED_COUNT: Number of joined features from input table. Number of features from the input table that have beenjoined.. Type: [number] \nUNJOINABLE_COUNT: Number of unjoinable features from input table. Number of features from the input table that could notbe joined.. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef join_by_nearest():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    input_2_path = 'D:/Data/InputLayer2.shp'\n    output_path = 'C:/output_path/joined_layer.shp'\n    \n    # Load the input layers\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    input_2_layer = QgsVectorLayer(input_2_path, 'Input Layer 2', 'ogr')\n    \n    # Run the Join by Nearest algorithm\n    result = processing.run('native:joinbynearest', {\n        'INPUT': input_path,\n        'INPUT_2': input_2_path,\n        'FIELDS_TO_COPY': [],  # Leave empty to copy all fields\n        'DISCARD_NONMATCHING': False,  # Default: False\n        'PREFIX': 'joined_',\n        'NEIGHBORS': 1,  # Default value\n        'MAX_DISTANCE': 1000,  # Example max distance\n        'OUTPUT': output_path,  # Output path\n        'NON_MATCHING': 'TEMPORARY_OUTPUT'  # Default: [Skip output]\n    })\n    \n    # Load the joined layer to QGIS\n    joined_layer = QgsVectorLayer(result['OUTPUT'], 'Joined Layer', 'ogr')\n    QgsProject.instance().addMapLayer(joined_layer)\n\n# Execute the function\njoin_by_nearest()"
    },
    {
        "tool_id": "native:kmeansclustering",
        "toolname": "kmeansclustering",
        "tool_description": "Calculates the 2D distance based k-means cluster number for each input feature.\nK-means clustering aims to partition the features into k clusters in which each feature belongs to the cluster with the nearest mean. The mean point is represented by the barycenter of the clustered features.\nIf input geometries are lines or polygons, the clustering is based on the centroid of the feature.",
        "parameters": "INPUT: Input layer. Layer to analyze. Type: [vector: any]\nCLUSTERS: Number of clusters. Number of clusters to create with the features. Type: [number] Default: 5\nOUTPUT: Clusters. Specify the output vector layer for generated the clusters.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer]\nFIELD_NAME: Cluster field name. Name of the field where the associated cluster numbershall be stored. Type: [string] Default: \u2018CLUSTER_ID\u2019\nSIZE_FIELD_NAME: Cluster size field name. Name of the field with the count of features in the same cluster. Type: [string] Default: \u2018CLUSTER_SIZE\u2019",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_clusters():\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    parameters = {\n        'INPUT': input_layer,\n        'CLUSTERS': 5,\n        'OUTPUT': output_path,  # 'TEMPORARY_OUTPUT', 'memory:' or other options could be used\n        'FIELD_NAME': 'CLUSTER_ID',\n        'SIZE_FIELD_NAME': 'CLUSTER_SIZE'\n    }\n    \n    result = processing.run('native:kmeansclustering', parameters)\n    \n    clustered_layer = QgsVectorLayer(result['OUTPUT'], 'Clusters', 'ogr')\n    QgsProject.instance().addMapLayer(clustered_layer)\n\ngenerate_clusters()"
    },
    {
        "tool_id": "native:layertobookmarks",
        "toolname": "layertobookmarks",
        "tool_description": "Creates spatial bookmarks corresponding to the extent of features contained in a layer.",
        "parameters": "INPUT: Input Layer. The input vector layer. Type: [vector: line, polygon]\nDESTINATION: Bookmark destination. Select the destination for the bookmarks.One of: 0 \u2014 Project bookmarks 1 \u2014 User bookmarks. Type: [enumeration] Default: 0\nNAME_EXPRESSION: Name field. Field or expression that will give names to the generatedbookmarks. Type: [expression]\nGROUP_EXPRESSION: Group field. Field or expression that will provide groups for the generatedbookmarks. Type: [expression]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef convert_layer_to_bookmarks():\n    input_path = 'D:/Data/input_layer.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    parameters = {\n        'INPUT': input_layer,\n        'DESTINATION': 0,  # 0 \u2014 Project bookmarks, 1 \u2014 User bookmarks\n        'NAME_EXPRESSION': 'name_field',\n        'GROUP_EXPRESSION': 'group_field'\n    }\n    \n    result = processing.run('native:layertobookmarks', parameters)\n    \n    output_layer = QgsVectorLayer(output_path, 'Bookmarks Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nconvert_layer_to_bookmarks()"
    },
    {
        "tool_id": "native:lessthanfrequency",
        "toolname": "lessthanfrequency",
        "tool_description": "Evaluates on a cell-by-cell basis the frequency (number of times) the values of an input stack of rasters are less than the value of a value raster. The output raster extent and resolution is defined by the input raster layer and is always of Int32 type.\nIf multiband rasters are used in the data raster stack, the algorithm will always perform the analysis on the first band of the rasters - use GDAL to use other bands in the analysis. The output NoData value can be set manually.",
        "parameters": "INPUT_VALUE_RASTER: Input value raster. The input value layer serves as reference layer for the sample layers. Type: [raster]\nINPUT_VALUE_RASTER_BAND: Value raster band. Select the band you want to use as sample. Type: [raster band] Default: The first band of the raster layer \nINPUT_RASTERS: Input raster layers. Raster layers to evaluate.If multiband rasters are used in the data raster stack, the algorithmwill always perform the analysis on the first band of the rasters. Type: [raster] [list] \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the value raster or the data layer stackwill result in a NoData cell in the output raster. Type: [boolean] Default: False \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nOUTPUT_NO_DATA_VALUE: Output NoData value Optional. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nFOUND_LOCATIONS_COUNT: Count of cells with equal value occurrences. . Type: [number] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [number] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer] \nMEAN_FREQUENCY_PER_LOCATION: Mean frequency at valid cell locations. . Type: [number] \nOCCURRENCE_COUNT: Count of value occurrences. . Type: [number] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef lessthanfrequency_algorithm():\n    # Define input and output paths\n    input_value_raster_path = 'path/to/input_value_raster.tif'\n    input_rasters_paths = ['path/to/input_raster1.tif', 'path/to/input_raster2.tif']\n    output_path = 'path/to/output_raster.tif'\n\n    # Load the raster layers\n    input_value_raster = QgsRasterLayer(input_value_raster_path, 'Input Value Raster')\n    input_rasters = [QgsRasterLayer(path, f'Input Raster {i+1}') for i, path in enumerate(input_rasters_paths)]\n\n    # Define the parameters\n    parameters = {\n        'INPUT_VALUE_RASTER': input_value_raster,\n        'INPUT_VALUE_RASTER_BAND': 1,  # Default: The first band of the raster layer\n        'INPUT_RASTERS': input_rasters,\n        'IGNORE_NODATA': False,  # If unchecked, any NoData cells result in a NoData cell in the output raster\n        'OUTPUT': output_path,\n        'OUTPUT_NO_DATA_VALUE': -9999.0,  # Optional. Default: -9999.0\n    }\n\n    # Run the lessthanfrequency algorithm\n    result = processing.run(\"\"\"native:lessthanfrequency\", parameters)\n    \n                                   \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'LessThanFrequency Output')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nlessthanfrequency_algorithm()"
    },
    {
        "tool_id": "native:linedensity",
        "toolname": "linedensity",
        "tool_description": "Calculates for each raster cell, the density measure of linear features within a circular neighbourhood. This measure is obtained by summing all the line segments intersecting the circular neighbourhood and dividing this sum by the area of such neighbourhood. A weighting factor can be applied to the line segments.",
        "parameters": "INPUT: Input line layer. Input vector layer containing line features. Type: [vector: any]\nWEIGHT: Weight field. Field of the layer containing the weight factor to use duringthe calculation. Type: [number]\nRADIUS: Search Radius. Radius of the circular neighbourhood. Units can be specifiedhere.. Type: [number] Default: 10\nPIXEL_SIZE: Pixel size. Pixel size of the output raster layer in layer units.The raster has square pixels.. Type: [number] Default: 10\nOUTPUT: Line density raster. The output as a raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_line_density():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLines.shp'\n    output_path = 'C:/output_path/line_density.tif'\n\n    # Load the input line layer\n    input_layer = QgsVectorLayer(input_path, 'Input Line Layer', 'ogr')\n\n    # Define the parameters for the line density calculation\n    parameters = {\n        'INPUT': input_path,\n        'WEIGHT': 'weight_field',  # specify the name of the weight field in the layer\n        'RADIUS': 10,\n        'PIXEL_SIZE': 10,\n        'OUTPUT': output_path\n    }\n\n    # Run the Line Density algorithm\n    result = processing.run('native:linedensity', parameters)\n\n    # Load the output raster layer to QGIS\n    line_density_layer = QgsProject.instance().addMapLayer(result['OUTPUT'])\n\n# Execute the function\ncalculate_line_density()"
    },
    {
        "tool_id": "native:lineintersections",
        "toolname": "lineintersections",
        "tool_description": "Calculates for each raster cell, the density measure of linear features within a circular neighbourhood. This measure is obtained by summing all the line segments intersecting the circular neighbourhood and dividing this sum by the area of such neighbourhood. A weighting factor can be applied to the line segments.",
        "parameters": "INPUT: Input line layer. Input vector layer containing line features. Type: [vector: any]\nWEIGHT: Weight field. Field of the layer containing the weight factor to use duringthe calculation. Type: [number]\nRADIUS: Search Radius. Radius of the circular neighbourhood. Units can be specifiedhere.. Type: [number] Default: 10\nPIXEL_SIZE: Pixel size. Pixel size of the output raster layer in layer units.The raster has square pixels.. Type: [number] Default: 10\nOUTPUT: Line density raster. The output as a raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_line_density():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLines.shp'\n    output_path = 'C:/output_path/line_density.tif'\n\n    # Load the input line layer\n    input_layer = QgsVectorLayer(input_path, 'Input Line Layer', 'ogr')\n\n    # Define the parameters for the line density calculation\n    parameters = {\n        'INPUT': input_path,\n        'WEIGHT': 'weight_field',  # specify the name of the weight field in the layer\n        'RADIUS': 10,\n        'PIXEL_SIZE': 10,\n        'OUTPUT': output_path\n    }\n\n    # Run the Line Density algorithm\n    result = processing.run('native:linedensity', parameters)\n\n    # Load the output raster layer to QGIS\n    line_density_layer = QgsProject.instance().addMapLayer(result['OUTPUT'])\n\n# Execute the function\ncalculate_line_density()"
    },
    {
        "tool_id": "native:linesubstring",
        "toolname": "linesubstring",
        "tool_description": "Returns the portion of a line (or curve) which falls between the specified start and end distances (measured from the beginning of the line).\nZ and M values are linearly interpolated from existing values.\nIf a multipart geometry is encountered, only the first part is considered when calculating the substring.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nSTART_DISTANCE: Start distance. Distance along the input line to the start point ofthe output feature. Type: [number ] \nEND_DISTANCE: End distance. Distance along the input line to the end point ofthe output feature. Type: [number ] \nOUTPUT: Substring. Specify the output line vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] outputs = \nOUTPUT: Substring. The output line vector layer.. Type: [vector: line]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_line_substrings():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLineLayer.shp'\n    output_path = 'C:/Output/SubstringLayer.shp'\n\n    # Load the input shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Line Layer', 'ogr')\n\n    # Run the Line Substring algorithm\n    parameters = {\n        'INPUT': input_layer,\n        'START_DISTANCE': 10.0,\n        'END_DISTANCE': 50.0,\n        'OUTPUT': output_path  # options: [Create temporary layer, Save to File..., Save to Geopackage..., Save to Database Table..., Append to Layer...]\n    }\n    result = processing.run(\"\"\"native:linesubstring\", parameters)\n\n                                   \n    substring_layer = QgsVectorLayer(result['OUTPUT'], 'Line Substring', 'ogr')\n    QgsProject.instance().addMapLayer(substring_layer)\n\n                      \ncreate_line_substrings()"
    },
    {
        "tool_id": "native:loadlayer",
        "toolname": "loadlayer",
        "tool_description": "Loads a layer to the current project.",
        "parameters": "INPUT: Layer. Layer to load in the legend. Type: [layer]\nNAME: Loaded layer name. Name of the loaded layer. Type: [string] outputs = \nOUTPUT: Layer. The (renamed) loaded layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef load_layer_example():\n    # Define the input path and output path (if applicable)\n    input_path = \"\"\"D:/input_layer.shp\"\n    \n                                               \n    parameters = {\n        'INPUT': input_path,\n        'NAME': 'Loaded Layer Name'                                              \n    }\n\n                                  \n    result = processing.run(\"native:loadlayer\", parameters)\n\n                                     \n    loaded_layer = QgsVectorLayer(input_path, parameters['NAME'], 'ogr')\n    QgsProject.instance().addMapLayer(loaded_layer)\n\n                      \nload_layer_example()"
    },
    {
        "tool_id": "native:lowestpositioninrasterstack",
        "toolname": "lowestpositioninrasterstack",
        "tool_description": "Evaluates on a cell-by-cell basis the position of the raster with the lowest value in a stack of rasters. Position counts start with 1 and range to the total number of input rasters. The order of the input rasters is relevant for the algorithm. If multiple rasters feature the lowest value, the first raster will be used for the position value.\nIf multiband rasters are used in the data raster stack, the algorithm will always perform the analysis on the first band of the rasters - use GDAL to use other bands in the analysis. Any NoData cells in the raster layer stack will result in a NoData cell in the output raster unless the \u201cignore NoData\u201d parameter is checked. The output NoData value can be set manually. The output rasters extent and resolution is defined by a reference raster layer and is always of Int32 type.",
        "parameters": "INPUT_RASTERS: Input raster layers. List of raster layers to compare with. Type: [raster] [list]\nREFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, \nCRS, pixel dimensions). Type: [raster] \nIGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the data layer stackwill result in a NoData cell in the output raster. Type: [boolean] Default: False \nOUTPUT: Output layer. Specification of the output raster containing the result.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nOUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef perform_lowest_position_in_stack():\n    # Define input paths\n    input_rasters = [\n        \"\"\"C:/path_to_raster1.tif\",\n        \"C:/path_to_raster2.tif\",\n        \"C:/path_to_raster3.tif\"\n    ]\n    reference_layer_path = \"C:/path_to_reference_layer.tif\"\n    output_path = \"C:/output_directory/output_raster.tif\"\n\n                                     \n    reference_layer = QgsRasterLayer(reference_layer_path, 'Reference Layer')\n    \n                           \n    parameters = {\n        'INPUT_RASTERS': input_rasters,\n        'REFERENCE_LAYER': reference_layer_path,\n        'IGNORE_NODATA': False,                                  \n        'OUTPUT_NODATA_VALUE': -9999.0,                                   \n        'OUTPUT': output_path                 \n    }\n\n                           \n    result = processing.run(\"native:lowestpositioninrasterstack\", parameters)\n\n                                   \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Lowest Position in Stack')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nperform_lowest_position_in_stack()"
    },
    {
        "tool_id": "native:meancoordinates",
        "toolname": "meancoordinates",
        "tool_description": "Computes a point layer with the center of mass of geometries in an input layer.\nAn attribute can be specified as containing weights to be applied to each feature when computing the center of mass.\nIf an attribute is selected in the parameter, features will be grouped according to values in this field. Instead of a single point with the center of mass of the whole layer, the output layer will contain a center of mass for the features in each category.\nDefault menu: Vector \u25ba Analysis Tools",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nWEIGHT: Weight field Optional. Field to use if you want to perform a weighted mean. Type: [tablefield: numeric] \nUID: Unique \nID field. Unique field on which the calculation of the mean willbe made. Type: [tablefield: numeric] \nOUTPUT: Mean coordinates. Specify the (point vector) layer for the result. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Mean coordinates. Resulting point(s) layer. Type: [vector: point]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_mean_coordinates():\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/mean_coordinates.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'WEIGHT': 'Weight_Field',  # Optional. Set to an appropriate field name or None\n        'UID': 'Unique_ID_Field',  # Set to an appropriate field name\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"\"\"native:meancoordinates\", parameters)\n    \n    mean_coords_layer = QgsVectorLayer(result['OUTPUT'], 'Mean Coordinates', 'ogr')\n    QgsProject.instance().addMapLayer(mean_coords_layer)\n\ncalculate_mean_coordinates()"
    },
    {
        "tool_id": "native:mergelines",
        "toolname": "mergelines",
        "tool_description": "Joins all connected parts of MultiLineString geometries into single LineString geometries.\nIf any parts of the input MultiLineString geometries are not connected, the resultant geometry will be a MultiLineString containing any lines which could be merged and any non-connected line parts.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nOUTPUT: Merged. Specify the output line vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef merge_lines():\n    input_path = 'path/to/your/input_layer.shp'\n    output_path = 'path/to/your/output_layer.shp'\n  \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,  # Input line vector layer\n        'OUTPUT': output_path  # Create Temporary Layer (TEMPORARY_OUTPUT) | Save to File... | Save to Geopackage... | Save to Database Table... | Append to Layer...\n    }\n\n    result = processing.run('native:mergelines', parameters)\n\n    merged_layer = QgsVectorLayer(result['OUTPUT'], 'Merged Layer', 'ogr')\n    QgsProject.instance().addMapLayer(merged_layer)\n\nmerge_lines()"
    },
    {
        "tool_id": "native:mergevectorlayers",
        "toolname": "mergevectorlayers",
        "tool_description": "Combines multiple vector layers of the same geometry type into a single one.\nThe attribute table of the resulting layer will contain the fields from all input layers. If fields with the same name but different types are found then the exported field will be automatically converted into a string type field. New fields storing the original layer name and source are also added.\nIf any input layers contain Z or M values, then the output layer will also contain these values. Similarly, if any of the input layers are multi-part, the output layer will also be a multi-part layer.\nOptionally, the destination coordinate reference system (CRS) for the merged layer can be set. If it is not set, the CRS will be taken from the first input layer. All layers will be reprojected to match this CRS.\nDefault menu: Vector \u25ba Data Management Tools",
        "parameters": "LAYERS: Input Layers. The layers that are to be merged into asingle layer.Layers should be of the same geometry type.. Type: [vector: any] [list]\nCRS: Destination CRS Optional. Choose the CRS for the output layer.If not specified, the CRS of the first inputlayer is used.. Type: [crs]\nOUTPUT: Merged. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef merge_vector_layers():\n    # Define input and output paths\n    input_layer_paths = ['D:/Data/layer1.shp', 'D:/Data/layer2.shp']\n    output_path = 'C:/output_path/merged_output.shp'\n\n    # Load the shapefiles as vector layers\n    input_layers = [QgsVectorLayer(path, f'Layer {i+1}', 'ogr') for i, path in enumerate(input_layer_paths)]\n\n    # Run the Merge Vector Layers algorithm\n    result = processing.run('native:mergevectorlayers', {\n        'LAYERS': input_layers, # List of layers to be merged\n        'CRS': 'EPSG:4326',  # Optional; specify CRS if different from the first layer. If none, remove this line\n        'OUTPUT': output_path  # Specify the output path\n    })\n\n    # Load the merged layer to QGIS\n    merged_layer = QgsVectorLayer(result['OUTPUT'], 'Merged Layer', 'ogr')\n    QgsProject.instance().addMapLayer(merged_layer)\n\n# Execute the function\nmerge_vector_layers()"
    },
    {
        "tool_id": "native:meshcontours",
        "toolname": "meshcontours",
        "tool_description": "Creates contours as a vector layer from a mesh scalar dataset.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to export data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nDATASET_TIME: Dataset time. The time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nINCREMENT: Increment between contour levels Optional. Interval between generated levels.. Type: [number] Default: Not set \nMINIMUM: Minimum contour level Optional. Starting level values of contours.. Type: [number] Default: Not set \nMAXIMUM: Maximum contour level Optional. Maximum values of contours, i.e. no generated levels will be greater than this value.. Type: [number] Default: Not set \nCONTOUR_LEVEL_LIST: List of contours level Optional. List of wanted levels of contours (separated by commas).If filled, the increment, minimum, and maximum fields will not be considered.. Type: [number] Default: Not set \nCRS_OUTPUT: Output coordinate system Optional. Coordinate Reference System to assign to the output. Type: [crs] \nOUTPUT_LINES: Exported contour lines. Specify the output line layer representing the contoursof the mesh layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] \nOUTPUT_POLYGONS: Exported contour polygons. Specify the output polygon layer representing the contoursof the mesh layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT_LINES: Exported contour lines. Line layer representing the contours of the mesh layer.. Type: [vector: line] \nOUTPUT_POLYGONS: Exported contour polygons. Polygon layer representing the contours of the mesh layer.. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsMeshLayer, QgsProject\n\ndef export_mesh_contours():\n    input_mesh_layer = 'path/to/mesh_layer'  # Define the path to the input mesh layer\n    output_lines_path = 'path/to/output_lines.shp'  # Output path for contour lines\n    output_polygons_path = 'path/to/output_polygons.shp'  # Output path for contour polygons\n    \n    parameters = {\n        'INPUT': input_mesh_layer,\n        'DATASET_GROUPS': [],  # Type: [layer] [list]\n        'DATASET_TIME': 1,  # Options: 0: 'Current canvas time', 1: 'Defined date/time', 2: 'Dataset group time step'\n        'INCREMENT': None,  \n        'MINIMUM': None,  \n        'MAXIMUM': None,  \n        'CONTOUR_LEVEL_LIST': None,  \n        'CRS_OUTPUT': None,  \n        'OUTPUT_LINES': output_lines_path,\n        'OUTPUT_POLYGONS': output_polygons_path\n    }\n    \n    result = processing.run(\"\"\"native:meshcontours\", parameters)\n    \n    output_lines_layer = QgsMeshLayer(result['OUTPUT_LINES'], 'Contour_Lines', 'ogr')\n    QgsProject.instance().addMapLayer(output_lines_layer)\n    \n    output_polygons_layer = QgsMeshLayer(result['OUTPUT_POLYGONS'], 'Contour_Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(output_polygons_layer)\n\nexport_mesh_contours()"
    },
    {
        "tool_id": "native:meshexportcrosssection",
        "toolname": "meshexportcrosssection",
        "tool_description": "Extracts a mesh dataset\u2019s values from lines contained in a vector layer.\nEach line is discretized with a resolution distance parameter for extraction of values on its vertices.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to export data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nDATASET_TIME: Dataset time. The time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nINPUT_LINES: Lines for data export. Lines where the data will be extracted from the dataset mesh. Type: [vector: line] \nRESOLUTION: Line segmentation resolution. The distance between points on the lines where the datawill be extracted from the dataset mesh.. Type: [number] Default: 10.0 \nDATASET_DIGITS: Digits count for dataset value. Number of digits to round dataset values. Type: [number] Default: 2 \nOUTPUT: Exported data \nCSV file. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nOUTPUT: Exported data \nCSV file. . Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsMeshLayer, QgsVectorLayer, QgsProject\n\ndef export_mesh_cross_section():\n    input_mesh_path = 'D:/path_to_mesh_layer'\n    dataset_groups = []  # define your dataset groups here\n    dataset_time = None  # set to 0, 1, or 2 as needed\n    input_lines_path = 'D:/path_to_lines_layer.shp'\n    output_path = 'D:/output_directory/exported_data.csv'\n    \n    input_mesh = QgsMeshLayer(input_mesh_path, \"\"\"Input Mesh Layer\", \"ogr\")\n    input_lines = QgsVectorLayer(input_lines_path, \"Input Lines Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_mesh,\n        'DATASET_GROUPS': dataset_groups,\n        'DATASET_TIME': dataset_time,                                                                                        \n        'INPUT_LINES': input_lines,\n        'RESOLUTION': 10.0,\n        'DATASET_DIGITS': 2,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"native:meshexportcrosssection\", parameters)\n    \nexport_mesh_cross_section()"
    },
    {
        "tool_id": "native:meshexporttimeseries",
        "toolname": "meshexporttimeseries",
        "tool_description": "Extracts a mesh dataset\u2019s time series values from points contained in a vector layer.\nIf the time step is kept to its default value (0 hours), the time step used is the one of the two first datasets of the first selected dataset group.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to extract data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nSTARTING_TIME: Starting time. The start of the time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nFINISHING_TIME: Finishing time. The end of the time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nTIME_STEP: Time step (hours) Optional. Time between two consecutive steps to extract.Keep 0 to use time step of the first selected dataset group.. Type: [number] Default: 0 \nINPUT_POINTS: Points for data export. Vector layer containing points where the data will be extracted from the dataset mesh. Type: [vector: point] \nCOORDINATES_DIGITS: Digits count for coordinates. Number of digits to round coordinate values Default: 2. Type: [number] \nDATASET_DIGITS: Digits count for dataset value. Number of digits to round dataset values. Type: [number] Default: 2 \nOUTPUT: Exported data \nCSV file. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nOUTPUT: Exported data \nCSV file. \n.CSV file containing the mesh dataset time series valuesat the overlaying point features. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsMeshLayer, QgsVectorLayer, QgsProject\n\ndef export_mesh_timeseries():\n    # Define input layer paths \n    mesh_layer_path = \"\"\"D:/Data/ExampleMesh.qgsmesh\"\n    points_layer_path = \"D:/Data/PointsLayer.shp\"\n    output_path = \"D:/workspace_directory/output.csv\"\n    \n                                    \n    mesh_layer = QgsMeshLayer(mesh_layer_path, \"Input Mesh Layer\", \"mdal\")\n    points_layer = QgsVectorLayer(points_layer_path, \"Input Points\", \"ogr\")\n    \n                                                    \n    parameters = {\n        'INPUT': mesh_layer_path,  \n        'DATASET_GROUPS': [],                                    \n        'STARTING_TIME': None,                                                                                        \n        'FINISHING_TIME': None,                                                                                        \n        'TIME_STEP': None, \n        'INPUT_POINTS': points_layer_path,\n        'COORDINATES_DIGITS': None,\n        'DATASET_DIGITS': None, \n        'OUTPUT': output_path                            \n    }\n    \n                                            \n    result = processing.run(\"native:meshexporttimeseries\", parameters)\n    \n    print(\"Export complete:\", result)\n    \nexport_mesh_timeseries()"
    },
    {
        "tool_id": "native:meshrasterize",
        "toolname": "meshrasterize",
        "tool_description": "Creates a raster layer from a mesh dataset.\nFor data on volume (3D stacked dataset values), the exported dataset values are averaged on faces using the method defined in the mesh layer properties (default is Multi level averaging method). 1D meshes are not supported.",
        "parameters": "INPUT: Input mesh layer. The mesh layer to export data from. Type: [mesh]\nDATASET_GROUPS: Dataset groups. The dataset groups. Type: [layer] [list] \nDATASET_TIME: Dataset time. The time range to take into account 0 \u2014 Current canvas time 1 \u2014 Defined date/time 2 \u2014 Dataset group time step. Type: [datetime] \nEXTENT: Extent Optional. Specify the spatial extent on which to process the data. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nPIXEL_SIZE: Pixel size. Pixel size of the output raster layer.. Type: [number] Default: 1.0 \nCRS_OUTPUT: Output coordinate system Optional. Coordinate Reference System to assign to the output. Type: [crs] \nOUTPUT: Output raster layer. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] outputs = \nOUTPUT: Output raster layer. Output raster layer with dataset values computedfrom the mesh layer.. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsMeshLayer, QgsProject, QgsCoordinateReferenceSystem\n\ndef mesh_rasterize():\n    mesh_layer_path = 'D:/mesh_layer.2dm'  # input mesh layer\n    output_path = 'C:/Users/Output/output_raster.tif'  # output file path\n    \n    mesh_layer = QgsMeshLayer(mesh_layer_path, 'Input Mesh', 'mdal')\n\n    parameters = {\n        'INPUT': mesh_layer_path,\n        'DATASET_GROUPS': '1',  # Dataset group index or name\n        'DATASET_TIME': '0',  # 0: Current canvas time, 1: Defined date/time, 2: Dataset group time step\n        'EXTENT': None,  # Specify extent here if needed\n        'PIXEL_SIZE': 1.0,\n        'CRS_OUTPUT': QgsCoordinateReferenceSystem(),  # Specify CRS if needed, else leave empty\n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"\"\"native:meshrasterize\", parameters)\n\n    raster_layer = QgsProject.instance().mapLayersByName('Output Raster')[0]\n    QgsProject.instance().addMapLayer(raster_layer)\n\nmesh_rasterize()"
    },
    {
        "tool_id": "native:minimumenclosingcircle",
        "toolname": "minimumenclosingcircle",
        "tool_description": "Calculates the minimum enclosing circles of the features in the input layer.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSEGMENTS: Number of segments in circles. The number of segments used to approximate a circle.Minimum 8, maximum 100000.. Type: [number] Default: 72\nOUTPUT: Minimum enclosing circles. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef minimum_enclosing_circle():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Minimum Enclosing Circle algorithm\n    result = processing.run('native:minimumenclosingcircle', {\n        'INPUT': input_layer,\n        'SEGMENTS': 72,\n        'OUTPUT': output_path\n    })\n\n    # Load the resulting layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Minimum Enclosing Circles', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nminimum_enclosing_circle()"
    },
    {
        "tool_id": "native:modelerrastercalc",
        "toolname": "modelerrastercalc",
        "tool_description": "Calculates the minimum enclosing circles of the features in the input layer.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSEGMENTS: Number of segments in circles. The number of segments used to approximate a circle.Minimum 8, maximum 100000.. Type: [number] Default: 72\nOUTPUT: Minimum enclosing circles. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef minimum_enclosing_circle():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Minimum Enclosing Circle algorithm\n    result = processing.run('native:minimumenclosingcircle', {\n        'INPUT': input_layer,\n        'SEGMENTS': 72,\n        'OUTPUT': output_path\n    })\n\n    # Load the resulting layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Minimum Enclosing Circles', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nminimum_enclosing_circle()"
    },
    {
        "tool_id": "native:modelervirtualrastercalc",
        "toolname": "modelervirtualrastercalc",
        "tool_description": "Calculates the minimum enclosing circles of the features in the input layer.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSEGMENTS: Number of segments in circles. The number of segments used to approximate a circle.Minimum 8, maximum 100000.. Type: [number] Default: 72\nOUTPUT: Minimum enclosing circles. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef minimum_enclosing_circle():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Minimum Enclosing Circle algorithm\n    result = processing.run('native:minimumenclosingcircle', {\n        'INPUT': input_layer,\n        'SEGMENTS': 72,\n        'OUTPUT': output_path\n    })\n\n    # Load the resulting layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Minimum Enclosing Circles', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nminimum_enclosing_circle()"
    },
    {
        "tool_id": "native:multidifference",
        "toolname": "multidifference",
        "tool_description": "Calculates the minimum enclosing circles of the features in the input layer.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSEGMENTS: Number of segments in circles. The number of segments used to approximate a circle.Minimum 8, maximum 100000.. Type: [number] Default: 72\nOUTPUT: Minimum enclosing circles. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef minimum_enclosing_circle():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Minimum Enclosing Circle algorithm\n    result = processing.run('native:minimumenclosingcircle', {\n        'INPUT': input_layer,\n        'SEGMENTS': 72,\n        'OUTPUT': output_path\n    })\n\n    # Load the resulting layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Minimum Enclosing Circles', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nminimum_enclosing_circle()"
    },
    {
        "tool_id": "native:multiintersection",
        "toolname": "multiintersection",
        "tool_description": "Calculates the minimum enclosing circles of the features in the input layer.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nSEGMENTS: Number of segments in circles. The number of segments used to approximate a circle.Minimum 8, maximum 100000.. Type: [number] Default: 72\nOUTPUT: Minimum enclosing circles. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef minimum_enclosing_circle():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Minimum Enclosing Circle algorithm\n    result = processing.run('native:minimumenclosingcircle', {\n        'INPUT': input_layer,\n        'SEGMENTS': 72,\n        'OUTPUT': output_path\n    })\n\n    # Load the resulting layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Minimum Enclosing Circles', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nminimum_enclosing_circle()"
    },
    {
        "tool_id": "native:multiparttosingleparts",
        "toolname": "multiparttosingleparts",
        "tool_description": "Splits multipart features in the input layer into singlepart features.\nThe attributes of the output layer are the same as the original ones but divided into single features.\nAllows features in-place modification of point, line, and polygon features\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nOUTPUT: Single parts. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef multipart_to_singleparts():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Multipart Layer', 'ogr')\n\n    # Run the Multipart to Singleparts algorithm\n    result = processing.run('native:multiparttosingleparts', {\n        'INPUT': input_layer,\n        'OUTPUT': output_path  # options: Create Temporary Layer (TEMPORARY_OUTPUT), Save to...\n    })\n\n    # Load the single parts layer to QGIS\n    singleparts_layer = QgsVectorLayer(result['OUTPUT'], 'Single Parts', 'ogr')\n    QgsProject.instance().addMapLayer(singleparts_layer)\n\n# Execute the function\nmultipart_to_singleparts()"
    },
    {
        "tool_id": "native:multiringconstantbuffer",
        "toolname": "multiringconstantbuffer",
        "tool_description": "Computes multi-ring (donut) buffer for the features of the input layer, using a fixed or dynamic distance and number of rings.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nRINGS: Number of rings. The number of rings.It can be a unique value (same number of rings for all thefeatures) or it can be taken from features data (the number ofrings depends on feature values).. Type: [number ] Default: 1 \nDISTANCE: Distance between rings. Distance between the rings.It can be a unique value (same distance for all the features)or it can be taken from features data (the distance depends onfeature values).. Type: [number ] Default: 1.0 \nOUTPUT: Multi-ring buffer (constant distance). Specify the output polygon vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Multi-ring buffer (constant distance). The output polygon vector layer.. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef multiring_constant_buffer():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/output_multiring_buffer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'InputLayer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'RINGS': 3,\n        'DISTANCE': 5.0,\n        'OUTPUT': output_path  # Options: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026\n    }\n\n    result = processing.run(\"\"\"native:multiringconstantbuffer\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Multi-Ring Buffer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nmultiring_constant_buffer()"
    },
    {
        "tool_id": "native:multiunion",
        "toolname": "multiunion",
        "tool_description": "Computes multi-ring (donut) buffer for the features of the input layer, using a fixed or dynamic distance and number of rings.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nRINGS: Number of rings. The number of rings.It can be a unique value (same number of rings for all thefeatures) or it can be taken from features data (the number ofrings depends on feature values).. Type: [number ] Default: 1 \nDISTANCE: Distance between rings. Distance between the rings.It can be a unique value (same distance for all the features)or it can be taken from features data (the distance depends onfeature values).. Type: [number ] Default: 1.0 \nOUTPUT: Multi-ring buffer (constant distance). Specify the output polygon vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Multi-ring buffer (constant distance). The output polygon vector layer.. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef multiring_constant_buffer():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/output_multiring_buffer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'InputLayer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'RINGS': 3,\n        'DISTANCE': 5.0,\n        'OUTPUT': output_path  # Options: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026\n    }\n\n    result = processing.run(\"\"\"native:multiringconstantbuffer\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Multi-Ring Buffer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nmultiring_constant_buffer()"
    },
    {
        "tool_id": "native:nearestneighbouranalysis",
        "toolname": "nearestneighbouranalysis",
        "tool_description": "Performs nearest neighbor analysis for a point layer. The output tells you how your data are distributed (clustered, randomly or distributed).\nOutput is generated as an HTML file with the computed statistical values:\nDefault menu: Vector \u25ba Analysis Tools",
        "parameters": "INPUT: Input layer. Point vector layer to calculate the statistics on. Type: [vector: point]\nOUTPUT_HTML_FILE: Nearest neighbour Optional. Specification of the \nHTML file for the computed statistics.One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] outputs = \nOUTPUT_HTML_FILE: Nearest neighbour. \nHTML file with the computed statistics. Type: [html] \nOBSERVED_MD: Observed mean distance. Observed mean distance. Type: [number] \nEXPECTED_MD: Expected mean distance. Expected mean distance. Type: [number] \nNN_INDEX: Nearest neighbour index. Nearest neighbour index. Type: [number] \nPOINT_COUNT: Number of points. Number of points. Type: [number] \nZ_SCORE: Z-Score. Z-Score. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef perform_nearest_neighbour_analysis():\n    # Define input and output paths\n    input_path = 'D:/Data/input_points.shp'\n    output_path = 'C:/output_path/nearest_neighbour_analysis.html'\n  \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n\n    # Run the Nearest Neighbour Analysis algorithm\n    parameters = {\n        'INPUT': input_path,  # Point vector layer\n        'OUTPUT_HTML_FILE': output_path  # Nearest neighbour statistics output\n    }\n    \n    result = processing.run('native:nearestneighbouranalysis', parameters)\n\n# Execute the function\nperform_nearest_neighbour_analysis()"
    },
    {
        "tool_id": "native:offsetline",
        "toolname": "offsetline",
        "tool_description": "Offsets lines by a specified distance. Positive distances will offset lines to the left, and negative distances will offset them to the right.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nDISTANCE: Distance. Offset distance.You can use the Data Defined button on the right to choosea field from which the radius will be calculated.This way you can have different radius for each feature(see Variable distance buffer ).. Type: [number ] Default: 10.0\nSEGMENTS: Segments. Controls the number of line segments to use to approximatea quarter circle when creating rounded offsets.. Type: [number] Default: 8\nJOIN_STYLE: Join style. Specifies whether round, miter or beveled joins should beused when offsetting corners in a line.Options are: 0 \u2014 Round 1 \u2014 Miter 2 \u2014 Bevel Fig. 28.96 Round, miter, and bevel join styles \uf0c1. Type: [enumeration] Default: 0\nMITER_LIMIT: Miter limit. Sets the maximum distance from the offset geometry to usewhen creating a mitered join as a factor of the offset distance (only applicable for miterjoin styles).Minimum: 1.0 Fig. 28.97 A 10m buffer with a limit of 2 and a 10m buffer with a limit of 1 \uf0c1. Type: [number] Default: 2.0\nOUTPUT: Offset. Specify the output (offset) layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef offset_line():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLines.shp'\n    output_path = 'C:/output_path/offset_lines.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Lines', 'ogr')\n\n    # Run the Offset Line algorithm\n    result = processing.run('native:offsetline', {\n        'INPUT': input_path,\n        'DISTANCE': 10.0,\n        'SEGMENTS': 8,\n        'JOIN_STYLE': 0,  # 0 \u2014 Round, 1 \u2014 Miter, 2 \u2014 Bevel\n        'MITER_LIMIT': 2.0,\n        'OUTPUT': output_path\n    })\n\n    # Load the offset line layer to QGIS\n    offset_layer = QgsVectorLayer(result['OUTPUT'], 'Offset Lines', 'ogr')\n    QgsProject.instance().addMapLayer(offset_layer)\n\n# Execute the function\noffset_line()"
    },
    {
        "tool_id": "native:orderbyexpression",
        "toolname": "orderbyexpression",
        "tool_description": "Sorts a vector layer according to an expression: changes the feature index according to an expression.\nBe careful, it might not work as expected with some providers, the order might not be kept every time.",
        "parameters": "INPUT: Input Layer. Input vector layer to sort. Type: [vector: any]\nEXPRESSION: Expression. Expression to use for the sorting. Type: [expression] \nASCENDING: Sort ascending. If checked the vector layer will be sorted fromsmall to large values.. Type: [boolean] Default: True \nNULLS_FIRST: Sort nulls first. If checked, Null values are placed first. Type: [boolean] Default: False \nOUTPUT: Ordered. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Ordered. Output (sorted) vector layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef ordered_by_expression():\n    input_path = 'D:/Data/Input.shp'\n    output_path = 'D:/workspace_directory/output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'EXPRESSION': 'field_name',  # replace with the actual field name\n        'ASCENDING': True,  # if False, will sort from large to small values\n        'NULLS_FIRST': False,  # if True, will place null values first\n        'OUTPUT': output_path  # output options: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026\n    }\n\n    result = processing.run('native:orderbyexpression', parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Ordered Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nordered_by_expression()"
    },
    {
        "tool_id": "native:orientedminimumboundingbox",
        "toolname": "orientedminimumboundingbox",
        "tool_description": "Calculates the minimum area rotated rectangle for each feature in the input layer.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nOUTPUT: Bounding boxes. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef oriented_minimum_bounding_boxes():\n    input_path = 'D:/Data/Layer.shp'\n    output_path = 'C:/output_path/bounding_boxes.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:orientedminimumboundingbox', parameters)\n\n    bounding_boxes_layer = QgsVectorLayer(result['OUTPUT'], 'Bounding Boxes', 'ogr')\n    QgsProject.instance().addMapLayer(bounding_boxes_layer)\n\noriented_minimum_bounding_boxes()"
    },
    {
        "tool_id": "native:orthogonalize",
        "toolname": "orthogonalize",
        "tool_description": "Attempts to orthogonalize the geometries of the input line or polygon layer. This process shifts the vertices in the geometries to try to make every angle in the geometry either a right angle or a straight line.\nAllows features in-place modification of line and polygon features",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nANGLE_TOLERANCE: Maximum angle tolerance (degrees). Specify the maximum deviation from a right angle or straightline a vertex can have for it to be adjusted.Smaller tolerances mean that only vertices which are alreadycloser to right angles will be adjusted, and larger tolerancesmean that vertices which deviate further from right angles willalso be adjusted.. Type: [number] Default: 15\nMAX_ITERATIONS: Maximum algorithm iterations. Setting a larger number for the maximum number of iterationswill result in a more orthogonal geometry at the cost of extraprocessing time.. Type: [number] Default: 1000\nOUTPUT: Orthogonalized. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef orthogonalize_geometry():\n    # Define input and output paths\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/orthogonalized_output.shp'\n    \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    # Run the Orthogonalize algorithm\n    result = processing.run('native:orthogonalize', {\n        'INPUT': input_layer,\n        'ANGLE_TOLERANCE': 15,\n        'MAX_ITERATIONS': 1000,\n        'OUTPUT': output_path\n    })\n    \n    # Load the orthogonalized layer to QGIS\n    orthogonalized_layer = QgsVectorLayer(result['OUTPUT'], 'Orthogonalized Layer', 'ogr')\n    QgsProject.instance().addMapLayer(orthogonalized_layer)\n\n# Execute the function\northogonalize_geometry()\n```"
    },
    {
        "tool_id": "native:package",
        "toolname": "package",
        "tool_description": "Adds layers to a GeoPackage.\nIf the GeoPackage exists and OverwriteexistingGeoPackage is checked, it will be overwritten (removed and recreated). If the GeoPackage exists and OverwriteexistingGeoPackage is not checked, the layer will be appended.",
        "parameters": "LAYERS: Input layers. The (vector) layers to import into the GeoPackage.Raster layers are not supported. If a raster layer isadded, a QgsProcessingException will be thrown.. Type: [vector: any] [list]\nOVERWRITE: Overwrite existing GeoPackage. If the specified GeoPackage exists, setting this option to True will make sure that it is deleted and a new onewill be created before the layers are added.If set to False , layers will be appended.. Type: [boolean] Default: False \nSAVE_STYLES: Save layer styles into GeoPackage. Save the layer styles. Type: [boolean] Default: True \nSELECTED_FEATURES_ONLY: Save only selected features. If a layer has a selection, setting this option to True will result in only selected features being saved. Forlayers without a selection all features will be saved.. Type: [boolean] Default: False \nEXPORT_RELATED_LAYERS: Export related layers following relations defined in the project. If an input layer has relations set in the project,setting this option to True will result in exporting also its related layer(s).If the layer has features selected, then only their related features will be exportedunless the related layer was also an input layer.. Type: [boolean] Default: False \nOUTPUT: Destination GeoPackage. Specify where to store the GeoPackage file. One of Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nOUTPUT_LAYERS: Layers within new package. The list of layers added to the GeoPackage.. Type: [string] [list]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef export_to_geopackage():\n    # Define the input layers\n    input_layers = ['path/to/layer1.shp', 'path/to/layer2.shp']  # list of paths to vector layers\n\n    # Output path for GeoPackage\n    output_path = 'path/to/output.gpkg'\n\n    # Define processing parameters\n    parameters = {\n        'LAYERS': input_layers,\n        'OVERWRITE': False,\n        'SAVE_STYLES': True,\n        'SELECTED_FEATURES_ONLY': False,\n        'EXPORT_RELATED_LAYERS': False,\n        'OUTPUT': output_path\n    }\n\n    # Invoke the processing tool\n    result = processing.run(\"\"\"native:package\", parameters)\n\n                                              \n    output_gpkg_layer = QgsVectorLayer(output_path, 'GeoPackage_output', 'ogr')\n    QgsProject.instance().addMapLayer(output_gpkg_layer)\n\n                      \nexport_to_geopackage()"
    },
    {
        "tool_id": "native:pixelstopoints",
        "toolname": "pixelstopoints",
        "tool_description": "Creates a vector layer of points corresponding to each pixel in a raster layer.\nConverts a raster layer to a vector layer, by creating point features for each individual pixel\u2019s center in the raster layer. Any NoData pixels are skipped in the output.",
        "parameters": "INPUT_RASTER: Raster layer. Input raster layer. Type: [raster]\nRASTER_BAND: Band number. Raster band to extract data from. Type: [raster band] \nFIELD_NAME: Field name. Name of the field to store the raster band value. Type: [string] Default: \n\u2018VALUE\u2019 \nOUTPUT: Vector points. Specify the resulting point layer of pixels centroids.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Vector points. Resulting point layer with pixels centroids. Type: [vector: point]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef raster_to_points():\n    input_raster_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_points.shp'\n\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n    \n    parameters = {\n        'INPUT_RASTER': input_raster_path,\n        'RASTER_BAND': 1,\n        'FIELD_NAME': 'VALUE',\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"native:pixelstopoints\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Raster_to_Points', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nraster_to_points()"
    },
    {
        "tool_id": "native:pixelstopolygons",
        "toolname": "pixelstopolygons",
        "tool_description": "Creates a vector layer of polygons corresponding to each pixel in a raster layer.\nConverts a raster layer to a vector layer, by creating polygon features for each individual pixel\u2019s extent in the raster layer. Any NoData pixels are skipped in the output.",
        "parameters": "INPUT_RASTER: Raster layer. Input raster layer. Type: [raster]\nRASTER_BAND: Band number. Raster band to extract data from. Type: [raster band] \nFIELD_NAME: Field name. Name of the field to store the raster band value. Type: [string] Default: \n\u2018VALUE\u2019 \nOUTPUT: Vector polygons. Specify the resulting polygon layer of pixel extents.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Vector polygons. Resulting polygon layer of pixel extents. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef pixels_to_polygons():\n    input_raster_path = 'D:/input_raster.tif'\n    output_path = 'D:/output_vector.shp'\n\n    # Load the input raster\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\", \"gdal\")\n\n                                                     \n    parameters = {\n        'INPUT_RASTER': input_raster_path,\n        'RASTER_BAND': 1,\n        'FIELD_NAME': 'VALUE',\n        'OUTPUT': output_path                                                                                               \n    }\n\n                                        \n    result = processing.run(\"native:pixelstopolygons\", parameters)\n\n                                      \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Pixels_to_Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \npixels_to_polygons()"
    },
    {
        "tool_id": "native:pointonsurface",
        "toolname": "pointonsurface",
        "tool_description": "For each feature of the input layer, returns a point that is guaranteed to lie on the surface of the feature geometry.\nAllows features in-place modification of point features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nANGLE_TOLERANCE: Create point on surface for each part. If checked, a point will be created for each part of thegeometry.. Type: [boolean ]\nOUTPUT: Point. Specify the output point vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef point_on_surface_generator():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/output_points_layer.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    # Define the parameters\n    parameters = {\n        'INPUT': input_layer,\n        'ANGLE_TOLERANCE': True,  # Set to False if you do not want to create a point for each part\n        'OUTPUT': output_path\n    }\n    \n    # Run the Point on Surface algorithm\n    result = processing.run('native:pointonsurface', parameters)\n    \n    # Load the resulting point layer to QGIS\n    points_layer = QgsVectorLayer(result['OUTPUT'], 'Points on Surface', 'ogr')\n    QgsProject.instance().addMapLayer(points_layer)\n\n# Execute the function\npoint_on_surface_generator()"
    },
    {
        "tool_id": "native:pointsalonglines",
        "toolname": "pointsalonglines",
        "tool_description": "Creates points at regular intervals along line or polygon geometries. Created points will have new attributes added for the distance along the geometry and the angle of the line at the point.\nAn optional start and end offset can be specified, which controls how far from the start and end of the geometry the points should be created.",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nDISTANCE: Distance. Distance between two consecutive points along the line. Type: [number ] Default: 1.0 \nSTART_OFFSET: Start offset. Distance from the beginning of the input line, representing theposition of the first point.. Type: [number ] Default: 0.0 \nEND_OFFSET: End offset. Distance from the end of the input line, representing theposition beyond which no point feature shoud be created.. Type: [number ] Default: 0.0 \nOUTPUT: Interpolated points. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Interpolated points. Point vector layer with features placed along lines or polygonboundaries of the input layer.. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef interpolate_points():\n    input_path = 'D:/Data/InputLinesOrPolygons.shp'\n    output_path = 'C:/output_path/interpolated_points.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'DISTANCE': 1.0,\n        'START_OFFSET': 0.0,\n        'END_OFFSET': 0.0,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"\"\"native:pointsalonglines\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Interpolated Points', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninterpolate_points()"
    },
    {
        "tool_id": "native:pointstopath",
        "toolname": "pointstopath",
        "tool_description": "Converts a point layer to a line layer, by joining points in an order defined by an expression or a field in the input point layer.\nPoints can be grouped by a field or an expression to distinguish line features.\nIn addition to the line vector layer, a text file is output that describes the resulting line as a start point and a sequence of bearings / directions (relative to azimuth) and distances.",
        "parameters": "INPUT: Input point layer. Input point vector layer. Type: [vector: point]\nCLOSE_PATH: Create closed paths. If checked, the first and last points of the line will be connectedand close the generated path. Type: [boolean] Default: False \nORDER_EXPRESSION: Order expression Optional. Field or expression providing the order to connect the points in the path.If not set, the feature \nID ( $id ) is used.. Type: [expression] \nNATURAL_SORT: Sort text containing numbers naturally Optional. If checked, naturally sorts the features based on the provided expression(i.e., \u2018a9\u2019 < \u2018a10\u2019).. Type: [boolean] Default: False \nGROUP_EXPRESSION: Path group expression Optional. Point features of the same value in the field or expression will begrouped in the same line.If not set, a single path is drawn with all the input points.. Type: [expression] \nOUTPUT: Paths. Specify the line vector layer of the path. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] \nOUTPUT_TEXT_DIR: Directory for text output Optional. Specify the directory that will contain the descriptionfiles of points and paths. One of: Skip Output Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Skip output] outputs = \nOUTPUT: Paths. Line vector layer of the path. Type: [vector: line] \nOUTPUT_TEXT_DIR: Directory for text output. Directory containing description files of points and paths. Type: [folder]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef points_to_paths():\n    input_layer_path = \"\"\"D:/Data/InputPointLayer.shp\"\n    output_path = \"D:/workspace_directory/output_paths.shp\"\n    \n    input_layer = QgsVectorLayer(input_layer_path, \"Input Point Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_layer_path,\n        'CLOSE_PATH': False,                 \n        'ORDER_EXPRESSION': '',\n        'NATURAL_SORT': False,                 \n        'GROUP_EXPRESSION': '',\n        'OUTPUT': output_path,\n        'OUTPUT_TEXT_DIR': '',                                                                         \n    }\n    \n    result = processing.run(\"native:pointstopath\", parameters)\n    \n    paths_layer = QgsVectorLayer(result['OUTPUT'], 'Paths_Output', 'ogr')\n    QgsProject.instance().addMapLayer(paths_layer)\n\npoints_to_paths()"
    },
    {
        "tool_id": "native:pointtolayer",
        "toolname": "pointtolayer",
        "tool_description": "Creates a new vector layer that contains a single feature with geometry matching a point parameter. It can be used in models to convert a point into a point layer for algorithms which require a layer based input.",
        "parameters": "INPUT: Point. Input point, including CRS info(example: 397254,6214446 [EPSG:32632] ). If the CRS is not provided, the Project CRS will be used. The point can be specified by clicking on the map canvas.. Type: [coordinates]\nOUTPUT: Point. Specify the output layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsPointXY, QgsProject, QgsVectorLayer\nimport processing\n\ndef point_to_layer():\n    # Define the input point with CRS info\n    input_point = QgsPointXY(397254, 6214446)\n    crs_projection = 'EPSG:32632'\n    output_path = 'memory:'\n\n    # Set parameters\n    parameters = {\n        'INPUT': {'type': 'Point', 'coordinates': input_point, 'crs': crs_projection},\n        'OUTPUT': 'TEMPORARY_OUTPUT'  # Create Temporary Layer\n    }\n    \n    # Perform the point to layer operation\n    result = processing.run('native:pointtolayer', parameters)\n    \n    # Load the output layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Output_Point_Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\npoint_to_layer()"
    },
    {
        "tool_id": "native:poleofinaccessibility",
        "toolname": "poleofinaccessibility",
        "tool_description": "Calculates the pole of inaccessibility for a polygon layer, which is the most distant internal point from the boundary of the surface.\nThis algorithm uses the \u2018polylabel\u2019 algorithm (Vladimir Agafonkin, 2016), which is an iterative approach guaranteed to find the true pole of inaccessibility within a specified tolerance. A more precise tolerance (lower value) requires more iterations and will take longer to calculate.\nThe distance from the calculated pole to the polygon boundary will be stored as a new attribute in the output layer.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: polygon]\nTOLERANCE: Tolerance. Set the tolerance for the calculation. Type: [number] Default: 1.0\nOUTPUT: Point. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_pole_of_inaccessibility():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/PolygonData.shp'\n    output_layer_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Polygon Layer', 'ogr')\n\n    # Run the Pole of Inaccessibility algorithm\n    result = processing.run('native:poleofinaccessibility', {\n        'INPUT': input_layer,\n        'TOLERANCE': 1.0,\n        'OUTPUT': output_layer_path  # Create Temporary Layer, Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    })\n\n    # Load the result layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Pole of Inaccessibility', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\ncalculate_pole_of_inaccessibility()"
    },
    {
        "tool_id": "native:polygonfromlayerextent",
        "toolname": "polygonfromlayerextent",
        "tool_description": "Calculates the pole of inaccessibility for a polygon layer, which is the most distant internal point from the boundary of the surface.\nThis algorithm uses the \u2018polylabel\u2019 algorithm (Vladimir Agafonkin, 2016), which is an iterative approach guaranteed to find the true pole of inaccessibility within a specified tolerance. A more precise tolerance (lower value) requires more iterations and will take longer to calculate.\nThe distance from the calculated pole to the polygon boundary will be stored as a new attribute in the output layer.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: polygon]\nTOLERANCE: Tolerance. Set the tolerance for the calculation. Type: [number] Default: 1.0\nOUTPUT: Point. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_pole_of_inaccessibility():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/PolygonData.shp'\n    output_layer_path = 'C:/output_path/output_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Polygon Layer', 'ogr')\n\n    # Run the Pole of Inaccessibility algorithm\n    result = processing.run('native:poleofinaccessibility', {\n        'INPUT': input_layer,\n        'TOLERANCE': 1.0,\n        'OUTPUT': output_layer_path  # Create Temporary Layer, Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    })\n\n    # Load the result layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Pole of Inaccessibility', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\ncalculate_pole_of_inaccessibility()"
    },
    {
        "tool_id": "native:polygonize",
        "toolname": "polygonize",
        "tool_description": "Creates a polygon layer whose features boundaries are generated from a line layer of closed features.",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nKEEP_FIELDS: Keep fields from the input layer Optional. Check to keep the fields (only the table structure, not the values) of the input layer. Type: [boolean] Default: False \nOUTPUT: Polygons from lines. Specify the output polygon vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Polygons from lines. The output polygon vector layer from lines. Type: [vector: polygon]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef polygonize_lines():\n    input_path = 'D:/Data/Lines.shp'\n    output_path = 'C:/output_path/Polygons.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Lines', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'KEEP_FIELDS': False,  # Check to keep the fields (only the table structure, not the values) of the input layer\n        'OUTPUT': output_path  # One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026\n    }\n\n    result = processing.run(\"\"\"native:polygonize\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Polygons from Lines', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\npolygonize_lines()"
    },
    {
        "tool_id": "native:polygonstolines",
        "toolname": "polygonstolines",
        "tool_description": "Takes a polygon layer and creates a line layer, with lines representing the boundaries of the polygons in the input layer.\nThe attribute table of the output layer is the same as the one of the input layer.\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input polygon vector layer. Type: [vector: polygon]\nOUTPUT: Lines. Specify the output line vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef polygon_to_lines():\n    # Define input and output paths\n    input_path = 'D:/Data/PolygonData.shp'\n    output_path = 'C:/output_path/output_line_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Polygons', 'ogr')\n\n    # Run the Polygons to Lines algorithm\n    result = processing.run('native:polygonstolines', {\n        'INPUT': input_layer,\n        'OUTPUT': output_path\n    })\n\n    # Load the lines layer to QGIS\n    lines_layer = QgsVectorLayer(result['OUTPUT'], 'Lines', 'ogr')\n    QgsProject.instance().addMapLayer(lines_layer)\n\n# Execute the function\npolygon_to_lines()"
    },
    {
        "tool_id": "native:postgisexecutesql",
        "toolname": "postgisexecutesql",
        "tool_description": "Allows a SQL database query to be performed on a PostgreSQL database connected to QGIS. The algorithm won\u2019t create a new layer: it is designed to run queries on the layer itself.\nExample",
        "parameters": "DATABASE: Database (connection name). The database connection (not the database name).Existing connections will be shown in the combobox.. Type: [string]\nSQL: \nSQL query. Defines the \nSQL query, for example \nUPDATE my_table \nSET field=10 .. Type: [string] outputs =\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef execute_sql_on_postgis():\n    # Database connection and SQL query\n    parameters = {\n        'DATABASE': 'my_connection_name',  # Replace with your connection name\n        'SQL': \"\"\"UPDATE my_table SET field=10\",\n        'OUTPUT': '''    }\n    \n                                           \n    result = processing.run(\"native:postgisexecutesql\", parameters)\n\n                      \nexecute_sql_on_postgis()"
    },
    {
        "tool_id": "native:printlayoutmapextenttolayer",
        "toolname": "printlayoutmapextenttolayer",
        "tool_description": "Creates a polygon layer containing the extent of a print layout map item (or items), with attributes specifying the map size (in layout units, i.e. the reference map units), scale and rotation.\nIf the map item parameter is specified, then only the matching map extent will be exported. If it is not specified, all map extents from the layout will be exported.\nOptionally, a specific output CRS can be specified. If it is not specified, the original map item CRS will be used.",
        "parameters": "LAYOUT: Print layout.\nA print layout in the current project. Type: [enumeration] \nMAP: Map item Optional. The map item(s) whose information you want toextract.If none is provided then all the map itemsare processed.. Type: [enumeration] Default: All the map items \nOUTPUT: Extent. Specify the output vector layer for the extent(s). One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] \nCRS: Overrride \nCRS Optional. Select the \nCRS for the layer in which the informationwill be reported.. Type: [crs] Default: The layout \nCRS outputs = \nHEIGHT: Map height. . Type: [number] \nOUTPUT: Extent. Output polygon vector layer containing extents of allthe input layout map item(s). Type: [vector: polygon] \nROTATION: Map rotation. . Type: [number] \nSCALE: Map scale. . Type: [number] \nWIDTH: Map width. . Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef get_print_layout_map_extent():\n    output_path = \"\"\"D:/workspace_directory/output_extent_layer.shp\"                                \n    \n                           \n    parameters = {\n        'LAYOUT': '',                                 \n        'MAP': '',                                \n        'OUTPUT': output_path,                                                                                                                             \n        'CRS': ''                \n    }\n    \n                                  \n    result = processing.run(\"native:printlayoutmapextenttolayer\", parameters)\n    \n                                     \n    extent_layer = QgsVectorLayer(result['OUTPUT'], 'Map Extent Output', 'ogr')\n    QgsProject.instance().addMapLayer(extent_layer)\n\n                      \nget_print_layout_map_extent()"
    },
    {
        "tool_id": "native:printlayouttoimage",
        "toolname": "printlayouttoimage",
        "tool_description": "Exports a print layout as an image file (e.g. PNG or JPEG images)",
        "parameters": "LAYOUT: Print layout. Layout to export. Type: [layout]\nOUTPUT: Image file. Name (including path) of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] \nLAYERS: Map layers to assign to unlocked map item(s) Optional. Layers to display in the map item(s) whose contents are not locked. Type: [enumeration] [layer] \nDPI Default: Not set: \nDPI Optional. \nDPI of the output file(s). If not set, the value in the print layout settings will be used.. Type: [number] \nGEOREFERENCE: Generate world file. Determines if a world file should be generated. Type: [boolean] Default: True \nINCLUDE_METADATA: Export \nRDF metadata. Determines if \nRDF metadata (title, author, \u2026) should be generated. Type: [boolean] Default: True \nANTIALIAS: Enable antialiasing. Determines if antialiasing should be enabled. Type: [boolean] Default: True outputs = \nOUTPUT: Image file. Image file corresponding to the exported print layout. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef export_layout_to_image():\n    # Define the input layout and output file path\n    layout_name = 'MyLayout'\n    output_path = 'C:/Users/Output/layout_image.png'\n    \n    # Define the parameters\n    parameters = {\n        'LAYOUT': layout_name,  # Type: [layout]\n        'OUTPUT': output_path,  # Type: [file]\n        'LAYERS': [],  # Optional: [enumeration, layer]\n        'DPI': None,  # Optional: [number]\n        'GEOREFERENCE': True,  # Type: [boolean] Default: True\n        'INCLUDE_METADATA': True,  # Type: [boolean] Default: True\n        'ANTIALIAS': True  # Type: [boolean] Default: True\n    }\n    \n    # Execute the processing algorithm\n    result = processing.run(\"\"\"native:printlayouttoimage\", parameters)\n    \n                      \nexport_layout_to_image()"
    },
    {
        "tool_id": "native:printlayouttopdf",
        "toolname": "printlayouttopdf",
        "tool_description": "Exports a print layout as a PDF file.",
        "parameters": "LAYOUT: Print Layout. Layout to export. Type: [layout]\nOUTPUT: \nPDF file. Name (including path) of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] \nLAYERS: Map layers to assign to unlocked map item(s) Optional. Layers to display in the map item(s) whose contents are not locked. Type: [enumeration] [layer] \nDPI Default: Not set: \nDPI Optional. \nDPI of the output file(s). If not set, the value in the print layout settings will be used.. Type: [number] \nFORCE_VECTOR: Always export as vectors. Determines if vectorial data should be left as vectors. Type: [boolean] Default: False \nFORCE_RASTER: Always export as raster. Forces all the items in the map to be rasterized.This parameter takes precedence over the \nFORCE_VECTOR parameter.. Type: [boolean] Default: False \nGEOREFERENCE: Append georeference information. Determines if a world file should be generated. Type: [boolean] Default: True \nINCLUDE_METADATA: Export \nRDF metadata. Determines if \nRDF metadata (title, author, \u2026) should be generated. Type: [boolean] Default: True \nDISABLE_TILED: Disable tiled raster layer exports. Determines if raster should be tiled. Type: [boolean] Default: False \nSIMPLIFY: Simplify geometries to reduce output file size. Determines if geometries should be simplified to reduce output file size. Type: [boolean] Default: True \nTEXT_FORMAT: Text export. Determines if text should be exported as path or text objects.Possible options are: 0 - Always export text as paths (recommended) 1 - Always export texts as text objects. Type: [enumeration] Default: 0 \nIMAGE_COMPRESSION: Image compression. Determines compression level of the image and how suitable the file could befor printing outputs or post-production in external applications.Possible options are: 0 - Lossy \n(JPEG) 1 - Lossless. Type: [enumeration] Default: 0 \nSEPARATE_LAYERS: Export layers as separate \nPDF files. If True, then a separate \nPDF file will be created per layer per map item in thelayout. Additionally, separate \nPDF files may be created for other complex layout items,resulting in a set of \nPDF files which contain logical atomic components of the layout.. Type: [boolean] Default: False outputs = \nOUTPUT: \nPDF file. \nPDF file(s) corresponding to the exported print layout. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef export_layout_to_pdf(output_path):\n    # Define the parameters\n    parameters = {\n        'LAYOUT': 'My Layout',\n        'OUTPUT': output_path,\n        'LAYERS': [],  # Optional\n        'DPI': None,  # Optional\n        'FORCE_VECTOR': False,\n        'FORCE_RASTER': False,\n        'GEOREFERENCE': True,\n        'INCLUDE_METADATA': True,\n        'DISABLE_TILED': False,\n        'SIMPLIFY': True,\n        'TEXT_FORMAT': 0,  # 0 - Export as paths, 1 - Export as text objects\n        'IMAGE_COMPRESSION': 0,  # 0 - Lossy (JPEG), 1 - Lossless\n        'SEPARATE_LAYERS': False\n    }\n    # Run the export layout to PDF operation\n    processing.run(\"\"\"native:printlayouttopdf\", parameters)\n\n                                    \noutput_pdf_path = 'C:/Users/Output/My_Layout_Export.pdf'\n                      \nexport_layout_to_pdf(output_pdf_path)"
    },
    {
        "tool_id": "native:projectpointcartesian",
        "toolname": "projectpointcartesian",
        "tool_description": "Projects point geometries by a specified distance and bearing (azimuth).\nAllows features in-place modification of point features",
        "parameters": "INPUT: Input layer. Input point vector layer. Type: [vector: point]\nBEARING: Bearing (degrees from North). Clockwise angle starting from North, in degree (\u00b0) unit. Type: [number ] Default: 0.0\nDISTANCE: Distance. Distance to offset geometries, in layer units. Type: [number ] Default: 1.0\nOUTPUT: Projected. Specify the output point vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef project_points():\n    input_path = 'D:/Data/InputPoints.shp'\n    output_path = 'D:/Output/ProjectedPoints.shp'\n  \n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n    \n    parameters = {\n        'INPUT': input_path,\n        'BEARING': 45.0,\n        'DISTANCE': 5.0,\n        'OUTPUT': output_path  # Options: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026\n    }\n    \n    result = processing.run('native:projectpointcartesian', parameters)\n    \n    projected_layer = QgsVectorLayer(result['OUTPUT'], 'Projected Points', 'ogr')\n    QgsProject.instance().addMapLayer(projected_layer)\n\nproject_points()"
    },
    {
        "tool_id": "native:promotetomulti",
        "toolname": "promotetomulti",
        "tool_description": "Takes a vector layer with singlepart geometries and generates a new one in which all geometries are multipart.\nInput features which are already multipart features will remain unchanged.\nThis algorithm can be used to force geometries to multipart types in order to be compatible with data providers that require multipart features.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nOUTPUT: Multiparts. Specify the output multipart vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef promote_to_multi():\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/output_multiparts.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    parameters = {\n        'INPUT': input_layer,\n        'OUTPUT': output_path  # Options: 'TEMPORARY_OUTPUT', 'Save to File\u2026', 'Save to Geopackage\u2026', 'Save to Database Table\u2026', 'Append to Layer\u2026'\n    }\n    \n    result = processing.run('native:promotetomulti', parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Multiparts', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\npromote_to_multi()"
    },
    {
        "tool_id": "native:raiseexception",
        "toolname": "raiseexception",
        "tool_description": "Raises an exception and cancels a model\u2019s execution. The exception message can be customized, and optionally an expression based condition can be specified. If an expression condition is used, then the exception will only be raised if the expression result is true. A false result indicates that no exception will be raised, and the model execution can continue uninterrupted.",
        "parameters": "MESSAGE: Message. Message to display. Type: [string]\nCONDITION: Condition Optional. Expression to evaluate if true. Type: [expression] outputs =\n",
        "code_example": "import processing\n\ndef raise_exception_tool():\n    parameters = {\n        'MESSAGE': 'This is a sample message',\n        'CONDITION': '',  # Set an expression if needed\n    }\n    result = processing.run(\"\"\"native:raiseexception\", parameters)\n\nraise_exception_tool()"
    },
    {
        "tool_id": "native:raisemessage",
        "toolname": "raisemessage",
        "tool_description": "Raises an information message in the log. The message can be customized, and optionally an expression based condition can be specified. If an expression condition is used, then the message will only be logged if the expression result is true. A false result indicates that no message will be logged.",
        "parameters": "MESSAGE: Information message. Message to display. Type: [string]\nCONDITION: Condition Optional. Expression to evaluate if true. Type: [expression] outputs =\n",
        "code_example": "import processing\n\ndef raise_message():\n    parameters = {\n        'MESSAGE': 'This is an information message.',\n        'CONDITION': '',\n    }\n    \n    result = processing.run(\"\"\"native:raisemessage\", parameters)\n\nraise_message()"
    },
    {
        "tool_id": "native:raisewarning",
        "toolname": "raisewarning",
        "tool_description": "Raises a warning message in the log. The warning message can be customized, and optionally an expression based condition can be specified. If an expression condition is used, then the warning will only be logged if the expression result is true. A false result indicates that no warning will be logged.",
        "parameters": "MESSAGE: Message. Message to display. Type: [string]\nCONDITION: Condition Optional. Expression to evaluate if true. Type: [expression] outputs =\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsProject\nimport processing\n\ndef display_message_warning():\n    # Set the message processing parameters\n    parameters = {\n        'MESSAGE': 'This is a warning message',\n        'CONDITION': '''    }\n    # Run the raise warning algorithm\n    result = processing.run(\"\"\"native:raisewarning\", parameters)\n\n                      \ndisplay_message_warning()"
    },
    {
        "tool_id": "native:randomextract",
        "toolname": "randomextract",
        "tool_description": "Raises a warning message in the log. The warning message can be customized, and optionally an expression based condition can be specified. If an expression condition is used, then the warning will only be logged if the expression result is true. A false result indicates that no warning will be logged.",
        "parameters": "MESSAGE: Message. Message to display. Type: [string]\nCONDITION: Condition Optional. Expression to evaluate if true. Type: [expression] outputs =\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsProject\nimport processing\n\ndef display_message_warning():\n    # Set the message processing parameters\n    parameters = {\n        'MESSAGE': 'This is a warning message',\n        'CONDITION': '''    }\n    # Run the raise warning algorithm\n    result = processing.run(\"\"\"native:raisewarning\", parameters)\n\n                      \ndisplay_message_warning()"
    },
    {
        "tool_id": "native:randompointsinextent",
        "toolname": "randompointsinextent",
        "tool_description": "Creates a new point layer with a given number of random points, all of them within a given extent.\nA distance factor can be specified, to avoid points being too close to each other. If the minimum distance between points makes it impossible to create new points, either distance can be decreased or the maximum number of attempts may be increased.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "EXTENT: Input extent. Map extent for the random points Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nPOINTS_NUMBER: Number of points. Number of point to create. Type: [number] Default: 1 \nMIN_DISTANCE: Minimum distance between points. The minimum distance between points. Type: [number] Default: 0.0 \nTARGET_CRS: Target \nCRS. \nCRS of the random points layer. Type: [crs] Default: Project \nCRS \nOUTPUT: Random points. The output random points. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] \nMAX_ATTEMPTS: Maximum number of search attempts given the minimum distance. Maximum number of attempts to place the points. Type: [number] Default: 200 outputs = \nOUTPUT: Random points. The output random points layer.. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsCoordinateReferenceSystem\n\ndef create_random_points():\n    # Define the output path\n    output_path = \"\"\"D:/workspace_directory/random_points.shp\"\n    \n    target_crs = QgsCoordinateReferenceSystem(\"EPSG:4326\")                                                  \n    \n                                      \n    parameters = {\n        'EXTENT': '0,10,0,10',                        \n        'POINTS_NUMBER': 100,                           \n        'MIN_DISTANCE': 0.0,\n        'TARGET_CRS': target_crs,\n        'OUTPUT': output_path, \n        'MAX_ATTEMPTS': 200\n    }\n    \n                           \n    result = processing.run(\"native:randompointsinextent\", parameters)\n    \n                              \n    random_points_layer = QgsVectorLayer(result['OUTPUT'], 'Random Points', 'ogr')\n    QgsProject.instance().addMapLayer(random_points_layer)\n\ncreate_random_points()"
    },
    {
        "tool_id": "native:randompointsinpolygons",
        "toolname": "randompointsinpolygons",
        "tool_description": "Creates a point layer with points placed inside the polygons of another layer.\nFor each feature (polygon / multi-polygon) geometry in the input layer, the given number of points is added to the result layer.\nPer feature and global minimum distances can be specified in order to avoid points being too close in the output point layer. If a minimum distance is specified, it may not be possible to generate the specified number of points for each feature. The total number of generated points and missed points are available as output from the algorithm.\nThe illustration below shows the effect of per feature and global minimum distances and zero/non-zero minimum distances (generated with the same seed, so at least the first point generated will be the same).\nThe maximum number of tries per point can be specified. This is only relevant for non-zero minimum distance.\nA seed for the random number generator can be provided, making it possible to get identical random number sequences for different runs of the algorithm.\nThe attributes of the polygon feature on which a point was generated can be included (Include polygon attributes).\nIf you want approximately the same point density for all the features, you can data-define the number of points using the area of the polygon feature geometry.",
        "parameters": "INPUT: Input polygon layer. Input polygon vector layer. Type: [vector: line]\nPOINTS_NUMBER: Number of points for each feature. Number of points to create. Type: [number ] Default: 1 \nMIN_DISTANCE: Minimum distance between points Optional. The minimum distance between points within one polygon feature. Type: [number ] Default: 0.0 \nOUTPUT: Random points in polygons. The output random points. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] \nMIN_DISTANCE_GLOBAL: Global minimum distance between points Optional. The global minimum distance between points.Should be smaller than the Minimum distance betweenpoints (per feature) for that parameter to have an effect.. Type: [number ] Default: 0.0 \nMAX_TRIES_PER_POINT: Maximum number of search attempts (for Min. dist. > 0) Optional. The maximum number of tries per point.Only relevant if the minimum distance between points is set(and greater than 0).. Type: [number ] Default: 10 \nSEED: Random seed Optional. The seed to use for the random number generator.. Type: [number] Default: Not set \nINCLUDE_POLYGON_ATTRIBUTES: Include polygon attributes. If set, a point will get the attributes from the line onwhich it is placed.. Type: [boolean] Default: True outputs = \nOUTPUT: Random points in polygons. The output random points layer.. Type: [vector: point] \nFEATURES_WITH_EMPTY_OR_NO_GEOMETRY: Number of features with empty or no geometry. . Type: [number] \nOUTPUT_POINTS: Total number of points generated. . Type: [number] \nPOINTS_MISSED: Number of missed points. The number of points that could not be generated due tothe minimum distance constraint.. Type: [number] \nPOLYGONS_WITH_MISSED_POINTS: Number of features with missed points. Not including features with empty or no geometry. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_random_points():\n    input_path = \"\"\"D:/path_to_polygon_input.shp\"\n    output_path = \"D:/output_random_points.shp\"\n    input_layer = QgsVectorLayer(input_path, \"Polygon Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,                              \n        'POINTS_NUMBER': 1,                \n        'MIN_DISTANCE': 0.0,                  \n        'OUTPUT': output_path,                                                                                                                  \n        'MIN_DISTANCE_GLOBAL': 0.0,                  \n        'MAX_TRIES_PER_POINT': 10,                 \n        'SEED': None,                      \n        'INCLUDE_POLYGON_ATTRIBUTES': True                   \n    }\n\n    result = processing.run(\"native:randompointsinpolygons\", parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Random Points Output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ngenerate_random_points()"
    },
    {
        "tool_id": "native:randompointsonlines",
        "toolname": "randompointsonlines",
        "tool_description": "Creates a point layer with points placed on the lines of another layer.\nFor each feature (line / multi-line) geometry in the input layer, the given number of points is added to the result layer.\nPer feature and global minimum distances can be specified in order to avoid points being too close in the output point layer. If a minimum distance is specified, it may not be possible to generate the specified number of points for each feature. The total number of generated points and missed points are available as output from the algorithm.\nThe illustration below shows the effect of per feature and global minimum distances and zero/non-zero minimum distances (generated with the same seed, so at least the first point generated will be the same).\nThe maximum number of tries per point can be specified. This is only relevant for non-zero minimum distance.\nA seed for the random number generator can be provided, making it possible to get identical random number sequences for different runs of the algorithm.\nThe attributes of the line feature on which a point was generated can be included (Include line attributes).\nIf you want approximately the same point density for all the line features, you can data-define the number of points using the length of the line feature geometry.",
        "parameters": "INPUT: Input line layer. Input line vector layer. Type: [vector: line]\nPOINTS_NUMBER: Number of points for each feature. Number of points to create. Type: [number ] Default: 1 \nMIN_DISTANCE: Minimum distance between points (per feature) Optional. The minimum distance between points within one line feature. Type: [number ] Default: 0.0 \nOUTPUT: Random points on lines. The output random points. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] \nMIN_DISTANCE_GLOBAL: Global minimum distance between points Optional. The global minimum distance between points.Should be smaller than the Minimum distance betweenpoints (per feature) for that parameter to have an effect.. Type: [number ] Default: 0.0 \nMAX_TRIES_PER_POINT: Maximum number of search attempts (for Min. dist. > 0) Optional. The maximum number of tries per point.Only relevant if the minimum distance between points is set(and greater than 0).. Type: [number ] Default: 10 \nSEED: Random seed Optional. The seed to use for the random number generator.. Type: [number] Default: Not set \nINCLUDE_LINE_ATTRIBUTES: Include line attributes. If set, a point will get the attributes from the line onwhich it is placed.. Type: [boolean] Default: True outputs = \nOUTPUT: Random points on lines. The output random points layer.. Type: [vector: point] \nFEATURES_WITH_EMPTY_OR_NO_GEOMETRY: Number of features with empty or no geometry. . Type: [number] \nLINES_WITH_MISSED_POINTS: Number of features with missed points. Not including features with empty or no geometry. Type: [number] \nPOINTS_GENERATED: Total number of points generated. . Type: [number] \nPOINTS_MISSED: Number of missed points. The number of points that could not be generated due tothe minimum distance constraint.. Type: [number]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef random_points_on_lines():\n    input_path = 'D:/input_line_layer.shp'\n    output_path = 'C:/Users/Output/random_points_output.shp'\n    \n    input_layer = QgsVectorLayer(input_path, \"\"\"Line Layer\", \"ogr\")\n    \n    params = {\n        'INPUT': input_path,\n        'POINTS_NUMBER': 1,\n        'MIN_DISTANCE': 0.0,\n        'OUTPUT': output_path,\n        'MIN_DISTANCE_GLOBAL': None,\n        'MAX_TRIES_PER_POINT': None,\n        'SEED': None,\n        'INCLUDE_LINE_ATTRIBUTES': True\n    }\n    \n    result = processing.run(\"native:randompointsonlines\", params)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Random Points on Lines', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nrandom_points_on_lines()"
    },
    {
        "tool_id": "native:rasterbooleanand",
        "toolname": "rasterbooleanand",
        "tool_description": "Calculates the boolean AND for a set of input rasters. If all of the input rasters have a non-zero value for a pixel, that pixel will be set to 1 in the output raster. If any of the input rasters have 0 values for the pixel it will be set to 0 in the output raster.\nThe reference layer parameter specifies an existing raster layer to use as a reference when creating the output raster. The output raster will have the same extent, CRS, and pixel dimensions as this layer.\nBy default, a NoData pixel in ANY of the input layers will result in a NoData pixel in the output raster. If the Treat NoData values as false option is checked, then NoData inputs will be treated the same as a 0 input value.",
        "parameters": "INPUT: Input layers. List of input raster layers. Type: [raster] [list]\nREF_LAYER: Reference layer. The reference layer to create the output layerfrom (extent, \nCRS, pixel dimensions). Type: [raster] \nNODATA_AS_FALSE: Treat NoData values as false. Treat NoData values in the input files as 0 when performing theoperation. Type: [boolean] Default: False \nOUTPUT: Output layer. Specification of the output raster containing the result.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nNO_DATA: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 \nDATA_TYPE: Output data type. Output raster data type. Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 Int32 (Thirty two bit signed integer (qint32)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [crs] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer] \nNODATA_PIXEL_COUNT: NoData pixel count. The count of NoData pixels in the output raster layer. Type: [integer] \nTRUE_PIXEL_COUNT: True pixel count. The count of True pixels (value = 1) in the output raster layer. Type: [integer] \nFALSE_PIXEL_COUNT: False pixel count. The count of False pixels (value = 0) in the output rasterlayer. Type: [integer] \nOUTPUT: Output layer. Output raster layer containing the result. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef raster_boolean_and(input_paths, ref_layer_path, output_path):\n    parameters = {\n        'INPUT': input_paths,\n        'REF_LAYER': ref_layer_path,\n        'NODATA_AS_FALSE': False,\n        'OUTPUT': output_path,\n        'NO_DATA': -9999.0,\n        'DATA_TYPE': 5  # Options: 0 \u2014 Byte, 1 \u2014 Int16, 2 \u2014 UInt16, 3 \u2014 Int32, 4 \u2014 UInt32, 5 \u2014 Float32, 6 \u2014 Float64, 7 \u2014 CInt16, 8 \u2014 CInt32, 9 \u2014 CFloat32, 10 \u2014 CFloat64, 11 \u2014 Int8 \n    }\n\n    result = processing.run('native:rasterbooleanand', parameters)\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Boolean AND Result')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Example usage\ninput_paths = ['D:/Data/Raster1.tif', 'D:/Data/Raster2.tif']\nref_layer_path = 'D:/Data/ReferenceRaster.tif'\noutput_path = 'D:/Data/OutputRaster.tif'\nraster_boolean_and(input_paths, ref_layer_path, output_path)"
    },
    {
        "tool_id": "native:rastercalc",
        "toolname": "rastercalc",
        "tool_description": "This algorithm allows performing algebraic operations using raster layers.\nThe resulting layer will have its values computed according to an expression. The expression can contain numerical values, operators and references to any of the layers in the current project",
        "parameters": "INPUT: Input vector layer\nEXPRESSION: Raster-based expression that will be used to calculate the output raster layer. When writing the expression, raster layers are referred by their name and the number of the band, e.g., `layer_name@1`. For instance, the first band from a layer named DEM will be referred as DEM@1. Operators contains a number of calculation operators for pixels manipulation: \n                -Arithmetical: +, -, *, sqrt, abs, ln, \u2026 \n                -Trigonometric: sin, cos, tan, \u2026\n                -Comparison: =, !=, <, >=, \u2026\n                - Logical: IF, AND, OR, (, )\n                - Statistical: min, max\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "def rastercalc():\n\t\n    slope_path = 'D:/slope.tif'\n    slope_layer = QgsRasterLayer(slope_path, 'Slope Layer')\n\toutput_path = \"D:/Output_path/raster_calc_output.tif\"\n    parameters = {\n    'LAYERS':[slope_layer], # These are the list of all the layers loaded, these ae not the path\n    'EXPRESSION':'\"Slope Layer@1\"<0.3',\n    'EXTENT': None,\n    'CELL_SIZE':None,\n    'OUTPUT': output_path}\n    result = processing.run(\"native:rastercalc\", parameters)\n    \n    raster_calc_layer = QgsRasterLayer(result['OUTPUT'], 'Raster Calculator Result')\n    QgsProject.instance().addMapLayer(raster_calc_layer)\nrastercalc()"
    },
    {
        "tool_id": "native:rasterize",
        "toolname": "rasterize",
        "tool_description": "Creates a raster image of map canvas content.\nA map theme can be selected to render a predetermined set of layers with a defined style for each layer.\nAlternatively, a single layer can be selected if no map theme is set.\nIf neither map theme nor layer is set, the current map content will be rendered. The minimum extent entered will internally be extended to be a multiple of the tile size.",
        "parameters": "EXTENT: Minimum extent to render (xmin, xmax, ymin, ymax). Specify the extent of the output raster layer.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nTILE_SIZE: Tile size. Size of the tile of the output raster layer. Minimum value: 64.. Type: [number] Default: 1024 \nMAP_UNITS_PER_PIXEL: Map units per pixel. Pixel size (in map units). Minimum value: 0.0. Type: [number] Default: 100.0 \nMAKE_BACKGROUND_TRANSPARENT: Make background transparent. Allows exporting the map with a transparent background.Outputs an \nRGBA (instead of \nRGB) image if set to True .. Type: [boolean] Default: False \nMAP_THEME: Map theme to render Optional. Use an existing map theme for therendering.. Type: [enumeration] \nLAYER: Single layer to render Optional. Choose a single layer for the rendering. Type: [enumeration] \nOUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] outputs = \nOUTPUT: Output layer. Output raster layer. Type: [raster]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef rasterize():\n    output_path = \"\"\"C:/Users/Output/raster_output.tif\"\n    \n    parameters = {\n        'EXTENT': 'xmin,xmax,ymin,ymax',                           \n        'TILE_SIZE': 1024,\n        'MAP_UNITS_PER_PIXEL': 100.0,\n        'MAKE_BACKGROUND_TRANSPARENT': False,\n        'MAP_THEME': '',                                                                 \n        'LAYER': '',                                                             \n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"native:rasterize\", parameters)\n    \n    raster_layer = QgsRasterLayer(result['OUTPUT'], 'Rasterized_output')\n    QgsProject.instance().addMapLayer(raster_layer)\n\nrasterize()"
    },
    {
        "tool_id": "native:rasterlayerproperties",
        "toolname": "rasterlayerproperties",
        "tool_description": "Returns basic properties of the given raster layer, including the extent, size in pixels and dimensions of pixels (in map units), number of bands, and NoData value.\nThis algorithm is intended for use as a means of extracting these useful properties to use as the input values to other algorithms in a model - e.g. to allow to pass an existing raster\u2019s pixel sizes over to a GDAL raster algorithm.",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nBAND: Band number Optional. Whether to also return properties of a specific band.If a band is specified, the noData value for the selected band is also returned.. Type: [raster band] Default: Not set outputs = \nBAND_COUNT: Number of bands in raster. The number of bands in the raster. Type: [number] \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The raster layer extent in the \nCRS. Type: [string] \nHAS_NODATA_VALUE: Band has a NoData value set. Indicates whether the raster layer has a value set for NoData pixelsin the selected band. Type: [Boolean] \nHEIGHT_IN_PIXELS: Height in pixels. The number of columns in the raster layer. Type: [integer] \nNODATA_VALUE: Band NoData value. The value (if set) of the NoData pixels in the selected band. Type: [number] \nPIXEL_HEIGHT: Pixel size (height) in map units. Vertical size in map units of the pixel. Type: [integer] \nPIXEL_WIDTH: Pixel size (width) in map units. Horizontal size in map units of the pixel. Type: [integer] \nWIDTH_IN_PIXELS: Width in pixels. The number of rows in the raster layer. Type: [integer] \nX_MAX: Maximum x-coordinate. . Type: [number] \nX_MIN: Minimum x-coordinate. . Type: [number] \nY_MAX: Maximum y-coordinate. . Type: [number] \nY_MIN: Minimum y-coordinate. . Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef rasterlayerproperties():\n    # Define input and output paths\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/output_properties.txt'\n\n    # Load the raster file\n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n\n    # Run raster layer properties algorithm\n    result = processing.run('native:rasterlayerproperties', {\n        'INPUT': input_path,\n        'BAND': 1,  # Specify band number. Set to None if not specifying a band\n        'OUTPUT': output_path\n    })\n\n    # Output not loaded into QGIS as it's a properties text file\n    print(f\"\"\"Raster properties saved to {output_path}\")\n\n                      \nrasterlayerproperties()"
    },
    {
        "tool_id": "native:rasterlayerstatistics",
        "toolname": "rasterlayerstatistics",
        "tool_description": "Calculates basic statistics from the values in a given band of the raster layer. The output is loaded in the Processing \u25ba Results viewer menu.",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nBAND: Band number. If the raster is multiband, choose the band you want to getstatistics for.. Type: [raster band] Default: The first band of the input layer \nOUTPUT_HTML_FILE: Statistics. Specification of the output file: Skip Output Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] outputs = \nMAX: Maximum value. . Type: [number] \nMEAN: Mean value. . Type: [number] \nMIN: Minimum value. . Type: [number] \nOUTPUT_HTML_FILE: Statistics. The output file contains the following information: Analyzed file: path of the raster layer Minimum value: minimum value of the raster Maximum value: maximum value of the raster Range: difference between the maximum and minimum values Sum: total sum of the values Mean value: mean of the values Standard deviation: standard deviation of the values Sum of the squares: sum of the squared differences ofeach observation from the overall mean. Type: [html] \nRANGE: Range. . Type: [number] \nSTD_DEV: Standard deviation. . Type: [number] \nSUM: Sum. . Type: [number] \nSUM_OF_SQUARES: Sum of the squares. . Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef raster_statistics():\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/statistics.html'\n    \n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n    \n    parameters = {\n        'INPUT': input_path,\n        'BAND': 1,  # Specify the band number as needed; default is the first band\n        'OUTPUT_HTML_FILE': output_path  # Save to file\n    }\n    \n    result = processing.run('native:rasterlayerstatistics', parameters)\n    \n    # Load the statistics file if needed\n    # This step is generally not required for HTML output, adding map layer example here is optional:\n    # QgsProject.instance().addMapLayer(QgsRasterLayer(result['OUTPUT_HTML_FILE'], 'Statistics'))\n    \n# Execute the function\nraster_statistics()"
    },
    {
        "tool_id": "native:rasterlayeruniquevaluesreport",
        "toolname": "rasterlayeruniquevaluesreport",
        "tool_description": "Returns the count and area of each unique value in a given raster layer. The calculation of the area is done in the area unit of the layer\u2019s CRS.",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nBAND: Band number. If the raster is multiband, choose the band you want to getstatistics for.. Type: [raster band] Default: The first band of the input layer \nOUTPUT_HTML_FILE: Unique values report. Specification of the output file: Skip Output Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] \nOUTPUT_TABLE: Unique values table. Specification of the table for unique values: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Skip output] outputs = \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nNODATA_PIXEL_COUNT: NoData pixel count. The number of NoData pixels in the output raster layer. Type: [number] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer] \nOUTPUT_HTML_FILE: Unique values report. The output \nHTML file contains the following information: Analyzed file: the path of the raster layer Extent: xmin, ymin, xmax, ymax coordinates of the extent Projection: projection of the layer Width in pixels: number of columns and pixel width size Height in pixels: number of rows and pixel width size Total pixel count: count of all the pixels NoData pixel count: count of pixels with NoData value. Type: [html] \nOUTPUT_TABLE: Unique values table. \nA table with three columns: value : pixel value count : count of pixels with this value m2 or deg2 or ft2 or \u2026 : total area of pixels with this value.The column name depends on the area unit of the layer\u2019s CRSand the calculation is done in that unit.. Type: [table] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef raster_unique_values_report(input_raster_path):\n    # Define input and output paths\n    output_html_file_path = 'C:/output_path/unique_values_report.html'\n    output_table_path = 'C:/output_path/unique_values_table.csv'\n\n    # Load the raster file as a raster layer\n    input_layer = QgsRasterLayer(input_raster_path, 'Input Raster')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,  # If the raster is multiband, choose the band (Default: The first band of the input layer)\n        'OUTPUT_HTML_FILE': output_html_file_path,  # Save to File\n        'OUTPUT_TABLE': output_table_path  # Save to File\n    }\n\n    # Perform the unique values report operation\n    result = processing.run(\"\"\"native:rasterlayeruniquevaluesreport\", parameters)\n\n                                   \n    QgsProject.instance().addMapLayer(result['OUTPUT_HTML_FILE'])\n    QgsProject.instance().addMapLayer(result['OUTPUT_TABLE'])\n\n                      \ninput_raster_path = 'D:/Data/InputRaster.tif'                                 \nraster_unique_values_report(input_raster_path)"
    },
    {
        "tool_id": "native:rasterlayerzonalstats",
        "toolname": "rasterlayerzonalstats",
        "tool_description": "Calculates statistics for a raster layer\u2019s values, categorized by zones defined in another raster layer.",
        "parameters": "INPUT: Input Layer. Input raster layer. Type: [raster]\nBAND: Band number. If the raster is multiband choose the band for which you wantto calculate the statistics.. Type: [raster band] Default: The first band of the raster layer \nZONES: Zones layer. Raster layer defining zones.Zones are given by contiguous pixels having the same pixelvalue.. Type: [raster] \nZONES_BAND: Zones band number. If the raster is multiband, choose the band that definesthe zones. Type: [raster band] Default: The first band of the raster layer \nOUTPUT_TABLE: Statistics. Specification of the output report. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Create temporary layer] \nREF_LAYER: Reference layer Optional. Raster layer used to calculate the centroids that will beused as reference when determining the zones in the outputlayer. One of: 0 \u2014 Input layer: zones are determined by sampling the zone rasterlayer value at the centroid of each pixel from the source raster layer 1 \u2014 Zones layer: the input raster layer will be sampled at the centroidof each pixel from the zones raster layer. Type: [enumeration] Default: 0 outputs = \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nNODATA_PIXEL_COUNT: NoData pixel count. The number of NoData pixels in the output raster layer. Type: [number] \nOUTPUT_TABLE: Statistics. The output layer contains the following information for each zone : Area: the area in square raster units in the zone; Sum: the total sum of the pixel values in the zone; Count: the number of pixels in the zone; Min: the minimum pixel value in the zone; Max: the maximum pixel value in the zone; Mean: the mean of the pixel values in the zone;. Type: [table] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [number] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef raster_layer_zonal_stats():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/YourRasterLayer.tif'\n    zones_layer_path = 'D:/Data/ZonesLayer.tif'\n    output_path = 'C:/output_path/statistics_output.csv'\n\n    # Load the raster layers\n    input_layer = QgsRasterLayer(input_layer_path, 'Input Layer')\n    zones_layer = QgsRasterLayer(zones_layer_path, 'Zones Layer')\n\n    # Define the parameters for the raster layer zonal statistics algorithm\n    parameters = {\n        'INPUT': input_layer_path,\n        'BAND': 1,  # Default: The first band of the raster layer\n        'ZONES': zones_layer_path,\n        'ZONES_BAND': 1,  # Default: The first band of the raster layer\n        'OUTPUT_TABLE': output_path,\n        'REF_LAYER': 0  # 0 \u2014 Input layer, 1 \u2014 Zones layer\n    }\n\n    # Perform the raster layer zonal statistics operation\n    result = processing.run(\"\"\"native:rasterlayerzonalstats\", parameters)\n\n                                                                      \n    output_layer = QgsVectorLayer(result['OUTPUT_TABLE'], 'Zonal Statistics', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nraster_layer_zonal_stats()"
    },
    {
        "tool_id": "native:rasterlogicalor",
        "toolname": "rasterlogicalor",
        "tool_description": "Calculates statistics for a raster layer\u2019s values, categorized by zones defined in another raster layer.",
        "parameters": "INPUT: Input Layer. Input raster layer. Type: [raster]\nBAND: Band number. If the raster is multiband choose the band for which you wantto calculate the statistics.. Type: [raster band] Default: The first band of the raster layer \nZONES: Zones layer. Raster layer defining zones.Zones are given by contiguous pixels having the same pixelvalue.. Type: [raster] \nZONES_BAND: Zones band number. If the raster is multiband, choose the band that definesthe zones. Type: [raster band] Default: The first band of the raster layer \nOUTPUT_TABLE: Statistics. Specification of the output report. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Create temporary layer] \nREF_LAYER: Reference layer Optional. Raster layer used to calculate the centroids that will beused as reference when determining the zones in the outputlayer. One of: 0 \u2014 Input layer: zones are determined by sampling the zone rasterlayer value at the centroid of each pixel from the source raster layer 1 \u2014 Zones layer: the input raster layer will be sampled at the centroidof each pixel from the zones raster layer. Type: [enumeration] Default: 0 outputs = \nCRS_AUTHID: \nCRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] \nEXTENT: Extent. The spatial extent of the output raster layer. Type: [string] \nHEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] \nNODATA_PIXEL_COUNT: NoData pixel count. The number of NoData pixels in the output raster layer. Type: [number] \nOUTPUT_TABLE: Statistics. The output layer contains the following information for each zone : Area: the area in square raster units in the zone; Sum: the total sum of the pixel values in the zone; Count: the number of pixels in the zone; Min: the minimum pixel value in the zone; Max: the maximum pixel value in the zone; Mean: the mean of the pixel values in the zone;. Type: [table] \nTOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [number] \nWIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef raster_layer_zonal_stats():\n    # Define input and output paths\n    input_layer_path = 'D:/Data/YourRasterLayer.tif'\n    zones_layer_path = 'D:/Data/ZonesLayer.tif'\n    output_path = 'C:/output_path/statistics_output.csv'\n\n    # Load the raster layers\n    input_layer = QgsRasterLayer(input_layer_path, 'Input Layer')\n    zones_layer = QgsRasterLayer(zones_layer_path, 'Zones Layer')\n\n    # Define the parameters for the raster layer zonal statistics algorithm\n    parameters = {\n        'INPUT': input_layer_path,\n        'BAND': 1,  # Default: The first band of the raster layer\n        'ZONES': zones_layer_path,\n        'ZONES_BAND': 1,  # Default: The first band of the raster layer\n        'OUTPUT_TABLE': output_path,\n        'REF_LAYER': 0  # 0 \u2014 Input layer, 1 \u2014 Zones layer\n    }\n\n    # Perform the raster layer zonal statistics operation\n    result = processing.run(\"\"\"native:rasterlayerzonalstats\", parameters)\n\n                                                                      \n    output_layer = QgsVectorLayer(result['OUTPUT_TABLE'], 'Zonal Statistics', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nraster_layer_zonal_stats()"
    },
    {
        "tool_id": "native:rastersampling",
        "toolname": "rastersampling",
        "tool_description": "Extracts raster values at the point locations. If the raster layer is multiband, each band is sampled.\nThe attribute table of the resulting layer will have as many new columns as the raster layer band count.",
        "parameters": "INPUT: Input Layer. Point vector layer to use for sampling. Type: [vector: point]\nRASTERCOPY: Raster Layer. Raster layer to sample at the given point locations.. Type: [raster] \nCOLUMN_PREFIX: Output column prefix. Prefix for the names of the added columns.. Type: [string] Default: \n\u2018SAMPLE_\u2019 \nOUTPUT: Sampled Optional. Specify the output layer containing the sampled values.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Sampled. The output layer containing the sampled values.. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer, QgsRasterLayer\n\ndef raster_sampling():\n    input_vector_path = 'D:/Data/Points.shp'\n    input_raster_path = 'D:/Data/DEM.tif'\n    output_path = 'C:/output_path/sampled_points.shp'\n    \n    input_vector_layer = QgsVectorLayer(input_vector_path, 'Input Points', 'ogr')\n    input_raster_layer = QgsRasterLayer(input_raster_path, 'Input Raster')\n    \n    parameters = {\n        'INPUT': input_vector_path,\n        'RASTERCOPY': input_raster_path,\n        'COLUMN_PREFIX': 'SAMPLE_',\n        'OUTPUT': output_path  # One of: ['TEMPORARY_OUTPUT', 'Save to File\u2026', 'Save to Geopackage\u2026', 'Save to Database Table\u2026']\n    }\n\n    result = processing.run(\"native:rastersampling\", parameters)\n  \n    sampled_layer = QgsVectorLayer(result['OUTPUT'], 'Sampled Points', 'ogr')\n    QgsProject.instance().addMapLayer(sampled_layer)\n\nraster_sampling()"
    },
    {
        "tool_id": "native:rastersurfacevolume",
        "toolname": "rastersurfacevolume",
        "tool_description": "Calculates the volume under a raster surface relative to a given base level. This is mainly useful for Digital Elevation Models (DEM).",
        "parameters": "INPUT:\nINPUT layer. Input raster, representing a surface. Type: [raster] \nBAND: Band number. If the raster is multiband, choose the band that shall definethe surface.. Type: [raster band] Default: The first band of the raster layer \nLEVEL: Base level. Define a base or reference value.This base is used in the volume calculation according to the Method parameter (see below).. Type: [number] Default: 0.0 \nMETHOD: Method. Define the method for the volume calculation given by thedifference between the raster pixel value and the Base level .Options: 0 \u2014 Count Only Above Base Level: only pixels above the baselevel will add to the volume. 1 \u2014 Count Only Below Base Level: only pixels below the baselevel will add to the volume. 2 \u2014 Subtract Volumes Below Base level: pixels above thebase level will add to the volume, pixels below the baselevel will subtract from the volume. 3 \u2014 Add Volumes Below Base level: Add the volumeregardless whether the pixel is above or below the baselevel.This is equivalent to sum the absolute values of thedifference between the pixel value and the base level.. Type: [enumeration] Default: 0 \nOUTPUT_HTML_FILE: Surface volume report. Specification of the output \nHTML report. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [html] Default: [Save to temporary file] \nOUTPUT_TABLE: Surface volume table. Specification of the output table. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Skip output] outputs = \nVOLUME: Volume. The calculated volume. Type: [number] \nAREA: Area. The area in square map units. Type: [number] \nPIXEL_COUNT: Pixel_count. The total number of pixels that have been analyzed. Type: [number] \nOUTPUT_HTML_FILE: Surface volume report. The output report (containing volume, area andpixel count) in \nHTML format. Type: [html] \nOUTPUT_TABLE: Surface volume table. The output table (containing volume, area andpixel count). Type: [table]\n",
        "code_example": "from qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef calculate_surface_volume():\n    input_layer_path = 'D:/Data/ElevationData.tif'\n    output_html_path = 'C:/output_path/surface_volume_report.html'\n\n    input_layer = QgsRasterLayer(input_layer_path, 'Elevation Data')\n\n    # Define the parameters for the surface volume calculation\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,  # Choose the band number. Type: [raster band] Default: The first band of the raster layer\n        'LEVEL': 0.0,  # Define the base or reference value. Type: [number] Default: 0.0\n        'METHOD': 0,  # Options: 0 \u2014 Above Base Level, 1 \u2014 Below Base Level, 2 \u2014 Subtract Below Base, 3 \u2014 Add Below Base. Default: 0\n        'OUTPUT_HTML_FILE': output_html_path,  # Output HTML report. Type: [html] Default: [Save to temporary file]\n        'OUTPUT_TABLE': 'SkipOutput'  # Output table. Type: [table] Default: [Skip output]\n    }\n\n    # Run the surface volume calculation algorithm\n    result = processing.run('native:rastersurfacevolume', parameters)\n\n    # Optionally, load the result to QGIS (if OUTPUT_TABLE is specified)\n    if result.get('OUTPUT_TABLE') and result['OUTPUT_TABLE'] != 'SkipOutput':\n        output_table_layer = QgsVectorLayer(result['OUTPUT_TABLE'], 'Surface Volume Table', 'ogr')\n        QgsProject.instance().addMapLayer(output_table_layer)\n\n# Execute the function\ncalculate_surface_volume()"
    },
    {
        "tool_id": "native:reclassifybylayer",
        "toolname": "reclassifybylayer",
        "tool_description": "Reclassifies a raster band by assigning new class values based on the ranges specified in a vector table.",
        "parameters": "INPUT_RASTER: Raster layer. Raster layer to reclassify. Type: [raster]\nRASTER_BAND: Band number. If the raster is multiband, choose the band you want toreclassify.. Type: [raster band] Default: The first band of the raster layer \nINPUT_TABLE: Layer containing class breaks. Vector layer containing the values to use for classification.. Type: [vector: any] \nMIN_FIELD: Minimum class value field. Field with the minimum value of the range for the class.Use -inf to capture the lowest possible value.. Type: [tablefield: numeric] \nMAX_FIELD: Maximum class value field. Field with the maximum value of the range for the class.Use inf to capture the highest possible value.. Type: [tablefield: numeric] \nVALUE_FIELD: Output value field. Field with the value that will be assigned to the pixels thatfall in the class (between the corresponding min and maxvalues). Use nan to set the value of the range to NoData.. Type: [tablefield: numeric] \nOUTPUT: Reclassified raster. Specification of the output raster. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nNO_DATA: Output NoData value. Value to apply to NoData values.. Type: [number] Default: -9999.0 \nRANGE_BOUNDARIES: Range boundaries. Defines comparison rules for the classification.Options: 0 \u2014 min < value <= max 1 \u2014 min <= value < max 2 \u2014 min <= value <= max 3 \u2014 min < value < max. Type: [enumeration] Default: 0 \nNODATA_FOR_MISSING: Use NoData when no range matches value. Applies the NoData value to band values that do not fall inany class.If False, the original value is kept.. Type: [boolean] Default: False \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 Int32 (Thirty two bit signed integer (qint32)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Reclassified raster. Output raster layer with reclassified band values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\n\ndef reclassify_raster_layer(input_raster_path, input_table_path, output_path):\n    # Load the raster and table layers\n    input_raster = QgsRasterLayer(input_raster_path, 'Input Raster')\n    input_table = QgsVectorLayer(input_table_path, 'Input Table', 'ogr')\n\n    # Define the parameters\n    parameters = {\n        'INPUT_RASTER': input_raster,\n        'RASTER_BAND': 1,  # Default: The first band of the raster layer\n        'INPUT_TABLE': input_table,\n        'MIN_FIELD': 'min_value',  # Field with the minimum value of the range for the class\n        'MAX_FIELD': 'max_value',  # Field with the maximum value of the range for the class\n        'VALUE_FIELD': 'output_value',  # Field with the value assigned to the pixels\n        'OUTPUT': output_path,\n        'NO_DATA': -9999.0,\n        'RANGE_BOUNDARIES': 0,  # '0' = 'min < value <= max', '1' = 'min <= value < max', '2' = 'min <= value <= max', '3' = 'min < value < max'\n        'NODATA_FOR_MISSING': False,\n        'DATA_TYPE': 5  # '0' = Byte, '1' = Int16, '2' = UInt16, '3' = Int32, '4' = UInt32, '5' = Float32, '6' = Float64, '7' = CInt16, '8' = CInt32, '9' = CFloat32, '10' = CFloat64, '11' = Int8\n    }\n\n    # Execute the reclassification algorithm\n    result = processing.run(\"\"\"native:reclassifybylayer\", parameters)\n\n                                                           \n    reclassified_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Reclassified Raster')\n    QgsProject.instance().addMapLayer(reclassified_raster_layer)\n\n       \ninput_raster_path = '/path/to/input_raster.tif'\ninput_table_path = '/path/to/class_breaks.shp'\noutput_path = '/path/to/output_reclassified.tif'\nreclassify_raster_layer(input_raster_path, input_table_path, output_path)"
    },
    {
        "tool_id": "native:reclassifybytable",
        "toolname": "reclassifybytable",
        "tool_description": "Reclassifies a raster band by assigning new class values based on the ranges specified in a fixed table.",
        "parameters": "INPUT_RASTER: Raster layer. Raster layer to reclassify. Type: [raster]\nRASTER_BAND: Band number. Raster band for which you want to recalculate values.. Type: [raster band] Default: 1 \nTABLE: Reclassification table. \nA 3-columns table to fill with the values to set the boundariesof each class ( Minimum and Maximum ) and the new Value to assign to the band values that fall in the class.The value -inf can be used as minimum, inf as maximum,and nan can be used to set the output value to NoData.. Type: [table] \nOUTPUT: Reclassified raster. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nNO_DATA: Output NoData value. Value to apply to NoData values.. Type: [number] Default: -9999.0 \nRANGE_BOUNDARIES: Range boundaries. Defines comparison rules for the classification.Options: 0 \u2014 min < value <= max 1 \u2014 min <= value < max 2 \u2014 min <= value <= max 3 \u2014 min < value < max. Type: [enumeration] Default: 0 \nNODATA_FOR_MISSING: Use NoData when no range matches value. Applies the NoData value to band values that do not fall inany class.If False, the original value is kept.. Type: [boolean] Default: False \nDATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 \u2014 Byte (Eight bit unsigned integer (quint8)) 1 \u2014 Int16 (Sixteen bit signed integer (qint16)) 2 \u2014 UInt16 (Sixteen bit unsigned integer (quint16)) 3 \u2014 Int32 (Thirty two bit signed integer (qint32)) 4 \u2014 UInt32 (Thirty two bit unsigned integer (quint32)) 5 \u2014 Float32 (Thirty two bit floating point (float)) 6 \u2014 Float64 (Sixty four bit floating point (double)) 7 \u2014 CInt16 (Complex Int16) 8 \u2014 CInt32 (Complex Int32) 9 \u2014 CFloat32 (Complex Float32) 10 \u2014 CFloat64 (Complex Float64) 11 \u2014 Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help \u25ba About menu). Type: [enumeration] Default: 5 outputs = \nOUTPUT: Reclassified raster. Output raster layer with reclassified band values. Type: [raster]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef reclassify_raster(input_raster_path):\n    output_path = 'C:/output_path/reclassified_raster.tif'\n\n    input_raster_layer = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n\n    parameters = {\n        'INPUT_RASTER': input_raster_layer,\n        'RASTER_BAND': 1,              \n        'TABLE': [\n            [-float('inf'), 50, 1],\n            [50, 100, 2],\n            [100, float('inf'), 3]\n        ],\n        'OUTPUT': output_path,\n        'NO_DATA': -9999.0,                    \n        'RANGE_BOUNDARIES': 0,                                                                                              \n        'NODATA_FOR_MISSING': False,                  \n        'DATA_TYPE': 5                                                                                                                                        \n    }\n\n    result = processing.run('native:reclassifybytable', parameters)\n    \n    reclassified_layer = QgsRasterLayer(result['OUTPUT'], 'Reclassified Raster')\n    QgsProject.instance().addMapLayer(reclassified_layer)\n\ninput_raster_path = \"D:/Data/InputRaster.tif\"\nreclassify_raster(input_raster_path)"
    },
    {
        "tool_id": "native:rectanglesovalsdiamonds",
        "toolname": "rectanglesovalsdiamonds",
        "tool_description": "Creates a buffer area with a rectangle, oval or diamond shape for each feature of the input point layer.\nThe shape parameters can be fixed for all features or dynamic using a field or an expression.",
        "parameters": "INPUT: Input layer. Input point vector layer. Type: [vector: point]\nSHAPE: Buffer shape. The shape to use. One of: 0 \u2014 Rectangles 1 \u2014 Ovals 2 \u2014 Diamonds. Type: [enumeration] \nWIDTH: Width. Width of the buffer shape. Type: [number ] Default: 1.0 \nHEIGHT: Height. Height of the buffer shape. Type: [number ] Default: 1.0 \nROTATION: Rotation Optional. Rotation of the buffer shape. Type: [number ] Default: None \nSEGMENTS: Number of segments. Number of segments for a full circle ( Ovals shape). Type: [number] Default: 36 \nOUTPUT: Output. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Output. The output vector layer (with the buffer shapes). Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_buffers():\n    input_path = \"\"\"D:/Data/PointLayer.shp\"\n    output_path = \"D:/workspace_directory/output_layer.shp\"\n\n    input_layer = QgsVectorLayer(input_path, \"Input Points\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer,\n        'SHAPE': 1,                                                    \n        'WIDTH': 2.0,\n        'HEIGHT': 4.0,\n        'ROTATION': 45,\n        'SEGMENTS': 36,\n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"native:rectanglesovalsdiamonds\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Buffered Shapes', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ngenerate_buffers()"
    },
    {
        "tool_id": "native:refactorfields",
        "toolname": "refactorfields",
        "tool_description": "Allows editing the structure of the attribute table of a vector layer.\nFields can be modified in their type and name, using a fields mapping.\nThe original layer is not modified. A new layer is generated, which contains a modified attribute table, according to the provided fields mapping.\nThe Refactor fields algorithm allows to:",
        "parameters": "INPUT: Input layer. The layer to modify. Type: [vector: any]\nFIELDS_MAPPING: Fields mapping. List of output fields with their definitions.The embedded table lists all the fields of the source layerand allows you to edit them: Click to create a new field. Click to remove a field. Use and to change the selected field order. Click to reset to the default view. Click to invert the selection in the fields list. For each of the fields you\u2019d like to reuse, you need to fill the following options: Source expression ( expression ) [expression] Field or expression from the input layer. Field name ( name ) [string] Name of the field in the output layer.By default input field name is kept. Type ( type ) [enumeration] Data type of the output field.Available types depend on the output layer provider. Length ( length ) [number] Length of the output field. Precision ( precision ) [number] Precision of the output field. Constraints ( constraints ) [string] When using a template layer, indicates whether there are constraintsapplied to the template field. Hover over the cell to display the constraints. Field alias ( field_alias ) [string] \nNEW in 3.32 Set a name to use as alias for the field. Not supported by all format types.Existing aliases are displayed and will be copied to the destination layer if supported. Field comment ( field_comment ) [string] \nNEW in 3.32 Store a comment describing the field. Not supported by all format types.Existing comments are displayed and will be copied to the destination layer if supported. Load fields from template layer Allows to select a layer from the current project as a templateand (with Load fields ) fill the above \u201cFields mapping\u201d optionswith its fields and their definitions.. Type: [list] \nOUTPUT: Refactored. Specification of the output layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer] outputs = \nOUTPUT: Refactored. Output layer with refactored fields. Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef refactor_fields():\n    # Define input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_path = 'D:/output_layer.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n                           \n    fields_mapping = [{'expression': 'field_name', 'length': 255, 'name': 'new_field_name', 'precision': 0, 'type': 10}]                           \n    \n                                               \n    parameters = {\n        'INPUT': input_path,\n        'FIELDS_MAPPING': fields_mapping,\n        'OUTPUT': output_path\n    }\n    \n                                   \n    result = processing.run(\"native:refactorfields\", parameters)\n    \n                              \n    refactored_layer = QgsVectorLayer(result['OUTPUT'], 'Refactored Layer', 'ogr')\n    QgsProject.instance().addMapLayer(refactored_layer)\n\n                      \nrefactor_fields()\n```"
    },
    {
        "tool_id": "native:removeduplicatesbyattribute",
        "toolname": "removeduplicatesbyattribute",
        "tool_description": "Deletes duplicate rows by only considering the specified field / fields. The first matching row will be retained, and duplicates will be discarded.\nOptionally, these duplicate records can be saved to a separate output for analysis.",
        "parameters": "INPUT: Input layer. The input layer. Type: [vector: any]\nFIELDS: Fields to match duplicates by. Fields defining duplicates.Features with identical values for all these fields areconsidered duplicates.. Type: [tablefield: any] [list] \nOUTPUT: Filtered (no duplicates). Specify the output layer containing the unique features.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nDUPLICATES: Filtered (duplicates) Optional. Specify the output layer containing only the duplicates.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Skip output] outputs = \nDUPLICATES: Filtered (duplicates) Optional. Vector layer containing the removed features.Will not be produced if not specified (left as [Skip output] ).. Type: [same as input] Default: [Skip output] \nDUPLICATE_COUNT: Count of discarded duplicate records. Count of discarded duplicate records. Type: [number] \nOUTPUT: Filtered (no duplicates). Vector layer containing the unique features.. Type: [same as input] \nRETAINED_COUNT: Count of retained records. Count of unique records. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef remove_duplicates(input_layer_path):\n    output_path = 'C:/output_path/unique_features.shp'\n    duplicates_output_path = 'C:/output_path/duplicates_features.shp'\n   \n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer,\n        'FIELDS': ['field1', 'field2'],\n        'OUTPUT': output_path,                                                                                                        \n        'DUPLICATES': duplicates_output_path                                                                                                                       \n    }\n    \n    result = processing.run('native:removeduplicatesbyattribute', parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Unique Features', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n    \n    duplicates_layer = QgsVectorLayer(result['DUPLICATES'], 'Duplicates Features', 'ogr')\n    QgsProject.instance().addMapLayer(duplicates_layer)\n\nremove_duplicates('C:/input_data/input_layer.shp')"
    },
    {
        "tool_id": "native:removeduplicatevertices",
        "toolname": "removeduplicatevertices",
        "tool_description": "Removes duplicate vertices from features, wherever removing the vertices does not result in a degenerate geometry.\nThe tolerance parameter specifies the tolerance for coordinates when determining whether vertices are identical.\nBy default, Z values are not considered when detecting duplicate vertices. E.g. two vertices with the same X and Y coordinate but different Z values will still be considered duplicate and one will be removed. If the Use Z Value parameter is true, then the Z values are also tested and vertices with the same X and Y but different Z will be maintained.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nTOLERANCE: Tolerance. Vertices closer than the specified distance are consideredduplicates. Type: [number ] Default: 0.000001\nUSE_Z_VALUE: Use Z value. If the Use Z Value parameter is true, then the Zvalues are also tested and vertices with the same X and Y butdifferent Z will be maintained.. Type: [boolean ] Default: False\nOUTPUT: Cleaned. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef remove_duplicate_vertices():\n    input_path = 'C:/path_to_your_input_layer/input_layer.shp'\n    output_path = 'C:/output_path/cleaned_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'TOLERANCE': 0.000001,\n        'USE_Z_VALUE': False,\n        'OUTPUT': output_path  # One of: Create Temporary Layer (TEMPORARY_OUTPUT), Save to File, Save to Geopackage, Save to Database Table, Append to Layer\n    }\n\n    result = processing.run('native:removeduplicatevertices', parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Cleaned Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nremove_duplicate_vertices()"
    },
    {
        "tool_id": "native:removenullgeometries",
        "toolname": "removenullgeometries",
        "tool_description": "Removes any features which do not have a geometry from a vector layer. All other features will be copied unchanged.\nThe features with null geometries can be saved to a separate layer.\nIf Also remove empty geometries is checked, the algorithm removes features whose geometries have no coordinates, i.e., geometries that are empty. In that case, also the null output will reflect this option, containing both null and empty geometries.",
        "parameters": "INPUT: Input layer. Input vector layer (with non-NULL geometries). Type: [vector: any]\nREMOVE_EMPTY: Also remove empty geometries. . Type: [boolean] \nOUTPUT Optional: Non null geometries. Specify the output vector layer for the non-NULL (andnon-empty) geometries.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nNULL_OUTPUT: Null geometries Optional. Specify the output vector layer for the \nNULL (and empty) geometries.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Skip output] outputs = \nNULL_OUTPUT: Null geometries. Output vector layer (for \nNULL and, if chosen, empty geometries). Type: [same as input] \nOUTPUT: Non null geometries. The output vector layer (without \nNULL and, if chosen, empty geometries). Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef remove_null_geometries():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/NonNullGeometries.shp'\n  \n    # Load the input shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Remove Null Geometries algorithm\n    result = processing.run('native:removenullgeometries', {\n        'INPUT': input_path,\n        'REMOVE_EMPTY': True,  # Options: [True, False]\n        'OUTPUT': output_path,\n        'NULL_OUTPUT': 'TEMPORARY_OUTPUT'  # Options: ['TEMPORARY_OUTPUT', 'Skip output', 'Save to File...', 'Save to Geopackage...', 'Save to Database Table...']\n    })\n\n    # Load the result layer into QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Non-null Geometries', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nremove_null_geometries()"
    },
    {
        "tool_id": "native:renamelayer",
        "toolname": "renamelayer",
        "tool_description": "Renames a layer.",
        "parameters": "INPUT: Layer. Layer to rename. Type: [layer]\nNAME: New name. The new name of the layer. Type: [string] outputs = \nOUTPUT: Layer. The (renamed) output layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef rename_layer():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Layer to rename\", \"ogr\")\n    \n                             \n    rename_params = {\n        'INPUT': input_layer,\n        'NAME': 'NewLayerName'                          \n    }\n    \n                                   \n    processing.run(\"native:renamelayer\", rename_params)\n    \n                      \nrename_layer()"
    },
    {
        "tool_id": "native:renametablefield",
        "toolname": "renametablefield",
        "tool_description": "Renames a layer.",
        "parameters": "INPUT: Layer. Layer to rename. Type: [layer]\nNAME: New name. The new name of the layer. Type: [string] outputs = \nOUTPUT: Layer. The (renamed) output layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef rename_layer():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Layer to rename\", \"ogr\")\n    \n                             \n    rename_params = {\n        'INPUT': input_layer,\n        'NAME': 'NewLayerName'                          \n    }\n    \n                                   \n    processing.run(\"native:renamelayer\", rename_params)\n    \n                      \nrename_layer()"
    },
    {
        "tool_id": "native:repairshapefile",
        "toolname": "repairshapefile",
        "tool_description": "Repairs a broken ESRI Shapefile dataset by (re)creating the SHX file.",
        "parameters": "INPUT: Input Shapefile. Full path to the ESRI Shapefile dataset with a missing orbroken SHX file. Type: [file]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef repair_shapefile():\n    input_path = 'D:/Data/BrokenShapefile.shp'\n    output_path = 'C:/output_path/repaired_shapefile.shp'\n\n    result = processing.run('native:repairshapefile', {\n        'INPUT': input_path,\n        'OUTPUT': output_path\n    })\n\n    repaired_layer = QgsVectorLayer(result['OUTPUT'], 'Repaired Shapefile', 'ogr')\n    QgsProject.instance().addMapLayer(repaired_layer)\n\nrepair_shapefile()"
    },
    {
        "tool_id": "native:reprojectlayer",
        "toolname": "reprojectlayer",
        "tool_description": "Reprojects a vector layer in a different CRS. The reprojected layer will have the same features and attributes of the input layer.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input Layer. Input vector layer to reproject. Type: [vector: any]\nTARGET_CRS: Target \nCRS. Destination coordinate reference system. Type: [crs] Default: \nEPSG:4326 - \nWGS 84 \nCONVERT_CURVED_GEOMETRIES: Convert curved geometries to straight segments \nNEW in 3.32 Optional. If checked, curved geometries will be converted to straight segments in the process,avoiding potential distortion issues.. Type: [boolean] Default: False \nOUTPUT: Reprojected. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nOPERATION: Coordinate Operation Optional. Specific operation to use for a particular reprojection task, insteadof always forcing use of the current project\u2019s transformation settings.Useful when reprojecting a particular layer and control over the exacttransformation pipeline is required. Requires proj version >= 6. Read more at Datum Transformations .. Type: [string] outputs = \nOUTPUT: Reprojected. Output (reprojected) vector layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef reproject_layer(input_layer_path, output_path):\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Layer', 'ogr')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_layer_path,\n        'TARGET_CRS': 'EPSG:4326',  # Default CRS\n        'CONVERT_CURVED_GEOMETRIES': False,  # Default value for optional parameter\n        'OUTPUT': output_path,\n        'OPERATION': ''  # Optional parameter if specific operation needed\n    }\n\n    # Run the reproject layer algorithm\n    result = processing.run('native:reprojectlayer', parameters)\n    \n    # Load the reprojected layer into QGIS\n    reprojected_layer = QgsVectorLayer(result['OUTPUT'], 'Reprojected Layer', 'ogr')\n    QgsProject.instance().addMapLayer(reprojected_layer)\n\n# Define paths\ninput_layer_path = \"\"\"D:/Data/InputLayer.shp\"\noutput_path = \"D:/workspace_directory/reprojected_layer.shp\"\n\n                      \nreproject_layer(input_layer_path, output_path)"
    },
    {
        "tool_id": "native:rescaleraster",
        "toolname": "rescaleraster",
        "tool_description": "Rescales raster layer to a new value range, while preserving the shape (distribution) of the raster\u2019s histogram (pixel values). Input values are mapped using a linear interpolation from the source raster\u2019s minimum and maximum pixel values to the destination minimum and miximum pixel range.\nBy default the algorithm preserves the original NoData value, but there is an option to override it.",
        "parameters": "INPUT: Input Raster. Raster layer to use for rescaling. Type: [raster]\nBAND: Band number. If the raster is multiband, choose a band.. Type: [raster band] Default: The first band of the input layer\nMINIMUM: New minimum value. Minimum pixel value to use in the rescaled layer. Type: [number] Default value: 0.0\nMAXIMUM: New maximum value. Maximum pixel value to use in the rescaled layer. Type: [number] Default value: 255.0\nNODATA: New NoData value Optional. Value to assign to the NoData pixels.If unset, original NoData values are preserved.. Type: [number] Default value: Not set\nOUTPUT: Rescaled. Specification of the output raster layer.One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file]",
        "code_example": "# Import necessary modules from qgis.core import QgsRasterLayer, QgsProject import processing\n\ndef rescale_raster():\n    # Define input and output paths\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/RescaledRaster.tif'\n  \n    # Load the raster file as a raster layer\n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n\n    # Run the Rescale Raster algorithm\n    result = processing.run('native:rescaleraster', {\n        'INPUT': input_layer,\n        'BAND': 1,  # Default: The first band of the input layer\n        'MINIMUM': 0.0,\n        'MAXIMUM': 255.0,\n        'NODATA': None,  # Default value: Not set\n        'OUTPUT': output_path\n    })\n\n# Execute the function\nrescale_raster()"
    },
    {
        "tool_id": "native:retainfields",
        "toolname": "retainfields",
        "tool_description": "Takes a vector layer and generates a new one that retains only the selected fields. All other fields will be dropped.",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nFIELDS: Fields to retain. List of fields to keep in the layer. Type: [tablefield: any] [list] \nOUTPUT: Retained fields. Specification of the output layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Retained fields. Output layer with the retained fields. Type: [vector: same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef retain_fields(input_layer_path):\n    output_path = \"\"\"D:/workspace_directory/output_layer.shp\"\n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELDS': ['field1', 'field2'],                                 \n        'OUTPUT': output_path                                                                                                                 \n    }\n    \n    result = processing.run(\"native:retainfields\", parameters)\n    retained_fields_layer = QgsVectorLayer(result['OUTPUT'], 'Retained Fields Output', 'ogr')\n    QgsProject.instance().addMapLayer(retained_fields_layer)\n    \ninput_layer_path = \"D:/Data/PrevalenceData.shp\"\nretain_fields(input_layer_path)"
    },
    {
        "tool_id": "native:reverselinedirection",
        "toolname": "reverselinedirection",
        "tool_description": "Inverts the direction of a line layer.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nOUTPUT: Reversed. Specify the output line vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef reverse_line_direction():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLines.shp'\n    output_path = 'C:/output_path/reversed_lines.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Lines', 'ogr')\n\n    # Run the Reverse Line Direction algorithm\n    result = processing.run('native:reverselinedirection', {\n        'INPUT': input_path,\n        'OUTPUT': output_path  # Create Temporary Layer (TEMPORARY_OUTPUT), Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    })\n\n    # Load the reversed line layer to QGIS\n    reversed_layer = QgsVectorLayer(result['OUTPUT'], 'Reversed Lines', 'ogr')\n    QgsProject.instance().addMapLayer(reversed_layer)\n\n# Execute the function\nreverse_line_direction()"
    },
    {
        "tool_id": "native:rotatefeatures",
        "toolname": "rotatefeatures",
        "tool_description": "Rotates feature geometries by the specified angle clockwise. The rotation occurs around each feature\u2019s centroid, or optionally around a unique preset point.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nANGLE: Rotation (degrees clockwise). Angle of the rotation in degrees. Type: [number ] Default: 0.0 \nANCHOR: Rotation anchor point (x, y) Optional. \nX,Y coordinates of the point to rotate thefeatures around.If not set the rotation occurs around eachfeature\u2019s centroid.. Type: [point] Default: None \nOUTPUT: Rotated. Specify the output vector layer (with rotated geometries).One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Rotated. The output vector layer with rotated geometries. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef rotate_features():\n    input_path = \"\"\"D:/Data/InputLayer.shp\"\n    output_path = \"D:/workspace_directory/output_layer.shp\"\n\n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer,\n        'ANGLE': 45.0,                                        \n        'ANCHOR': '120.0, 35.0',                                  \n        'OUTPUT': output_path                           \n    }\n\n    result = processing.run(\"native:rotatefeatures\", parameters)\n\n    rotated_layer = QgsVectorLayer(result['OUTPUT'], 'Rotated Layer', 'ogr')\n    QgsProject.instance().addMapLayer(rotated_layer)\n\nrotate_features()"
    },
    {
        "tool_id": "native:roundness",
        "toolname": "roundness",
        "tool_description": "Calculates the roundness of each feature and stores it as a new field. The input vector layer must contain polygons.\nThe roundness of a polygon is defined as 4\u03c0 \u00d7 polygon area / perimeter\u00b2. The roundness value varies between 0 and 1. A perfect circle has a roundness of 1, while a completely flat polygon has a roundness of 0.\nAllows features in-place modification of polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: polygon]\nOUTPUT: Roundness. Specify the output vector layer (with roundness field).One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef calculate_roundness():\n    # Define input and output paths\n    input_path = 'D:/Data/Polygons.shp'\n    output_path = 'C:/output_path/roundness_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Polygons', 'ogr')\n\n    # Run the Roundness algorithm\n    result = processing.run('native:roundness', {\n        'INPUT': input_layer,\n        'OUTPUT': output_path  # Create Temporary Layer | Save to File\u2026 | Save to Geopackage\u2026 | Save to Database Table\u2026 | Append to Layer\u2026\n    })\n\n    # Load the output layer to QGIS\n    roundness_layer = QgsVectorLayer(result['OUTPUT'], 'Roundness', 'ogr')\n    QgsProject.instance().addMapLayer(roundness_layer)\n\n# Execute the function\ncalculate_roundness()"
    },
    {
        "tool_id": "native:roundrastervalues",
        "toolname": "roundrastervalues",
        "tool_description": "Rounds the cell values of a raster dataset according to the specified number of decimals.\nAlternatively, a negative number of decimal places may be used to round values to powers of a base n. For example, with a Base value n of 10 and Decimal places of -1, the algorithm rounds cell values to multiples of 10, -2 rounds to multiples of 100, and so on. Arbitrary base values may be chosen, the algorithm applies the same multiplicative principle. Rounding cell values to multiples of a base n may be used to generalize raster layers.\nThe algorithm preserves the data type of the input raster. Therefore byte/integer rasters can only be rounded to multiples of a base n, otherwise a warning is raised and the raster gets copied as byte/integer raster.",
        "parameters": "INPUT: Input raster. The raster to process.. Type: [raster]\nBAND: Band number. The band of the raster. Type: [number] Default: 1\nROUNDING_DIRECTION: Rounding direction. How to choose the target rounded value. Options are: 0 \u2014 Round up 1 \u2014 Round to nearest 2 \u2014 Round down. Type: [list] Default: 1\nDECIMAL_PLACES: Number of decimals places. Number of decimals places to round to.Use negative values to round cell values to a multiple of a base n. Type: [number] Default: 2\nOUTPUT: Output raster. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file]\nBASE_N: Base n for rounding to multiples of n. When the DECIMAL_PLACES parameter is negative,raster values are rounded to multiples of the base n value. Type: [number] Default: 10",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef round_raster_values():\n    # Define input and output paths\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/OutputPath/OutputRaster.tif'\n  \n    # Load the raster layer\n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n\n    # Run the Round Raster Values algorithm\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,\n        'ROUNDING_DIRECTION': 1,  # 0 \u2014 Round up, 1 \u2014 Round to nearest, 2 \u2014 Round down\n        'DECIMAL_PLACES': 2,\n        'OUTPUT': output_path,\n        'BASE_N': 10\n    }\n\n    result = processing.run('native:roundrastervalues', parameters)\n\n    # Load the rounded raster layer to QGIS\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Rounded Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nround_raster_values()"
    },
    {
        "tool_id": "native:ruggednessindex",
        "toolname": "ruggednessindex",
        "tool_description": "Rounds the cell values of a raster dataset according to the specified number of decimals.\nAlternatively, a negative number of decimal places may be used to round values to powers of a base n. For example, with a Base value n of 10 and Decimal places of -1, the algorithm rounds cell values to multiples of 10, -2 rounds to multiples of 100, and so on. Arbitrary base values may be chosen, the algorithm applies the same multiplicative principle. Rounding cell values to multiples of a base n may be used to generalize raster layers.\nThe algorithm preserves the data type of the input raster. Therefore byte/integer rasters can only be rounded to multiples of a base n, otherwise a warning is raised and the raster gets copied as byte/integer raster.",
        "parameters": "INPUT: Input raster. The raster to process.. Type: [raster]\nBAND: Band number. The band of the raster. Type: [number] Default: 1\nROUNDING_DIRECTION: Rounding direction. How to choose the target rounded value. Options are: 0 \u2014 Round up 1 \u2014 Round to nearest 2 \u2014 Round down. Type: [list] Default: 1\nDECIMAL_PLACES: Number of decimals places. Number of decimals places to round to.Use negative values to round cell values to a multiple of a base n. Type: [number] Default: 2\nOUTPUT: Output raster. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file]\nBASE_N: Base n for rounding to multiples of n. When the DECIMAL_PLACES parameter is negative,raster values are rounded to multiples of the base n value. Type: [number] Default: 10",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsProject\nimport processing\n\ndef round_raster_values():\n    # Define input and output paths\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/OutputPath/OutputRaster.tif'\n  \n    # Load the raster layer\n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n\n    # Run the Round Raster Values algorithm\n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,\n        'ROUNDING_DIRECTION': 1,  # 0 \u2014 Round up, 1 \u2014 Round to nearest, 2 \u2014 Round down\n        'DECIMAL_PLACES': 2,\n        'OUTPUT': output_path,\n        'BASE_N': 10\n    }\n\n    result = processing.run('native:roundrastervalues', parameters)\n\n    # Load the rounded raster layer to QGIS\n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Rounded Raster')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nround_raster_values()"
    },
    {
        "tool_id": "native:savefeatures",
        "toolname": "savefeatures",
        "tool_description": "Saves vector features to a specified file dataset. For dataset formats supporting layers, an optional layer name parameter can be used to specify a custom string. Optional GDAL-defined dataset and layer options can be specified. For more information on this, read the online GDAL documentation on the format.",
        "parameters": "INPUT: Vector features. Input vector layer.. Type: [vector: any]\nOUTPUT: Saved features. Specify the file to save the features to. One of: Save to a Temporary File Save to File\u2026. Type: [same as input] Default: [Save to temporary file] \nLAYER_NAME: Layer name Optional. Name to use for the output layer. Type: [string] \nDATASOURCE_OPTIONS: GDAL dataset options Optional. GDAL dataset creation options of the output format.Separate individual options with semicolons.. Type: [string] \nLAYER_OPTIONS: GDAL layer options Optional. GDAL layer creation options of the output format.Separate individual options with semicolons.. Type: [string]ACTION_ON_EXISTING_FILE: Action to take on pre-existing file. How to manage existing features. Valid methods are: 0 \u2014 Create or overwrite file1 \u2014 Create or overwrite layer2 \u2014 Append features to existing layer, but do not create new fields3 \u2014 Append features to existing layer, and create new fields if needed. Type: [enumeration] Default: 0 \nOUTPUT: Saved features. Vector layer with the saved features.. Type: [same as input] \nFILE_PATH: File name and path. Output file name and path.. Type: [string] \nLAYER_NAME: Layer name. Name of the layer, if any.. Type: [string]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef save_features():\n    # Define input and output paths\n\tinput_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n  \n    # Load the shapefile as a vector layer\n\tinput_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the save features algorithm\n\tresult = processing.run('native:savefeatures', {\n\t'INPUT': input_path,\n\t'OUTPUT': output_path,\n\t'LAYER_NAME': 'Saved Layer',\n\t'DATASOURCE_OPTIONS': '',\n\t'LAYER_OPTIONS': '',\n\t'ACTION_ON_EXISTING_FILE': 0  # Options: [0, 1, 2, 3]\n    })\n\n    # Load the saved features layer to QGIS\n\tsaved_features_layer = QgsVectorLayer(result['OUTPUT'], 'Saved Features', 'ogr')\n    QgsProject.instance().addMapLayer(saved_features_layer)\n\n# Execute the function\nsave_features()"
    },
    {
        "tool_id": "native:savelog",
        "toolname": "savelog",
        "tool_description": "Saves the model\u2019s execution log to a file. Optionally, the log can be saved in a HTML formatted version.",
        "parameters": "USE_HTML: Use\nHTML. Use \nHTML formatting. Type: [Boolean] Default: False outputs = \nOUTPUT: File. Destination of the log. Type: [string]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef save_log_as_html():\n    # Define the parameters\n    output_path = \"\"\"D:/workspace_directory/output_log.html\"\n    parameters = {\n        'USE_HTML': True,                          \n        'OUTPUT': output_path\n    }\n                                \n    result = processing.run(\"native:savelog\", parameters)\n                                  \n    \nsave_log_as_html()"
    },
    {
        "tool_id": "native:saveselectedfeatures",
        "toolname": "saveselectedfeatures",
        "tool_description": "Saves the selected features as a new layer.",
        "parameters": "INPUT: Input Layer. Layer to save the selection from. Type: [vector: any]\nOUTPUT: Selected features. Specify the vector layer for the selected features.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef save_selected_features():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/selected_features.shp'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    # Define the parameters for 'native:saveselectedfeatures'\n    params = {\n        'INPUT': input_layer,\n        'OUTPUT': output_path  # Options: Create Temporary Layer (TEMPORARY_OUTPUT), Save to File, Save to Geopackage, Save to Database Table\n    }\n    \n    # Run the algorithm\n    result = processing.run('native:saveselectedfeatures', params)\n    \n    # Load the resulting selected features layer to QGIS\n    selected_layer = QgsVectorLayer(result['OUTPUT'], 'Selected Features', 'ogr')\n    QgsProject.instance().addMapLayer(selected_layer)\n\n# Execute the function\nsave_selected_features()"
    },
    {
        "tool_id": "native:segmentizebymaxangle",
        "toolname": "segmentizebymaxangle",
        "tool_description": "Segmentizes a geometry by converting curved sections to linear sections.\nThe segmentization is performed by specifying the maximum allowed radius angle between vertices on the straightened geometry (e.g the angle of the arc created from the original arc center to consecutive output vertices on the linearized geometry). Non-curved geometries will be retained without change.",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nANGLE: Maximum angle between vertices (degrees). Maximum allowed radius angle between verticeson the straightened geometry. Type: [number ] Default: 5.0 \nOUTPUT: Segmentized. Specify the output vector layer (with segmentized geometries).One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Segmentized. The output vector layer with segmentized geometries. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef segmentize_by_max_angle():\n    input_path = 'D:/Data/your_input_layer.shp'  # specify the input layer path\n    output_path = 'C:/output_path/segmentized_output.shp'  # specify the output layer path\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'ANGLE': 5.0,  # default angle value\n        'OUTPUT': output_path  # Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026\n    }\n    \n    result = processing.run(\"\"\"native:segmentizebymaxangle\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Segmentized Geometries', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nsegmentize_by_max_angle()"
    },
    {
        "tool_id": "native:segmentizebymaxdistance",
        "toolname": "segmentizebymaxdistance",
        "tool_description": "Segmentizes a geometry by converting curved sections to linear sections.\nThe segmentization is performed by specifying the maximum allowed offset distance between the original curve and the segmentized representation. Non-curved geometries will be retained without change.",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nDISTANCE: Maximum offset distance. Maximum allowed offset distance between theoriginal curve and the segmentized representation,in the layer units.. Type: [number ] Default: 1.0\nOUTPUT: Segmentized. Specify the output vector layer (with segmentized geometries).One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef segmentize_max_distance():\n    # Define input and output paths\n    input_path = 'D:/Data/MyLineLayer.shp'\n    output_path = 'C:/output_path/segmentized_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Lines or Polygons', 'ogr')\n\n    # Run the Segmentize by Maximum Distance algorithm\n    result = processing.run('native:segmentizebymaxdistance', {\n        'INPUT': input_layer,\n        'DISTANCE': 1.0,\n        'OUTPUT': output_path  # Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer...\n    })\n\n    # Load the segmentized layer to QGIS\n    segmentized_layer = QgsVectorLayer(result['OUTPUT'], 'Segmentized Layer', 'ogr')\n    QgsProject.instance().addMapLayer(segmentized_layer)\n\n# Execute the function\nsegmentize_max_distance()"
    },
    {
        "tool_id": "native:selectbylocation",
        "toolname": "selectbylocation",
        "tool_description": "Segmentizes a geometry by converting curved sections to linear sections.\nThe segmentization is performed by specifying the maximum allowed offset distance between the original curve and the segmentized representation. Non-curved geometries will be retained without change.",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nDISTANCE: Maximum offset distance. Maximum allowed offset distance between theoriginal curve and the segmentized representation,in the layer units.. Type: [number ] Default: 1.0\nOUTPUT: Segmentized. Specify the output vector layer (with segmentized geometries).One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef segmentize_max_distance():\n    # Define input and output paths\n    input_path = 'D:/Data/MyLineLayer.shp'\n    output_path = 'C:/output_path/segmentized_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Lines or Polygons', 'ogr')\n\n    # Run the Segmentize by Maximum Distance algorithm\n    result = processing.run('native:segmentizebymaxdistance', {\n        'INPUT': input_layer,\n        'DISTANCE': 1.0,\n        'OUTPUT': output_path  # Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer...\n    })\n\n    # Load the segmentized layer to QGIS\n    segmentized_layer = QgsVectorLayer(result['OUTPUT'], 'Segmentized Layer', 'ogr')\n    QgsProject.instance().addMapLayer(segmentized_layer)\n\n# Execute the function\nsegmentize_max_distance()"
    },
    {
        "tool_id": "native:selectwithindistance",
        "toolname": "selectwithindistance",
        "tool_description": "creates a selection in a vector layer. Features are selected wherever they are within the specified maximum distance from the features in an additional reference layer.",
        "parameters": "INPUT: Select features from. Input vector layer to select features from. Type: [vector: any]\nREFERENCE: By comparing to the features from. Vector layer whose features closeness is used. Type: [vector: any] \nDISTANCE: Where the features are within. The maximum distance around reference featuresto select input features. Type: [number] Default: 100 \nMETHOD: Modify current selection by. How the selection of the algorithm should be managed.One of: 0 \u2014 creating new selection 1 \u2014 adding to current selection 2 \u2014 selecting within current selection 3 \u2014 removing from current selection. Type: [enumeration] Default: 0 outputs = \nINPUT: Input layer. The input layer with features selected. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef select_within_distance():\n    # Define input and reference layer paths\n    input_layer_path = 'D:/path/to/input_layer.shp'\n    reference_layer_path = 'D:/path/to/reference_layer.shp'\n    output_path = 'D:/workspace_directory/selected_output.shp'\n\n    # Load the input and reference layers\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n    reference_layer = QgsVectorLayer(reference_layer_path, \"Reference Layer\", \"ogr\")\n\n                                                                       \n    parameters = {\n        'INPUT': input_layer_path,\n        'REFERENCE': reference_layer_path,\n        'DISTANCE': 100,\n        'METHOD': 0,                                                                                                                                                                         \n        'OUTPUT': output_path\n    }\n\n                                              \n    result = processing.run(\"native:selectwithindistance\", parameters)\n\n                                               \n    selected_layer = QgsVectorLayer(result['OUTPUT'], 'Selected_within_distance', 'ogr')\n    QgsProject.instance().addMapLayer(selected_layer)\n\n                      \nselect_within_distance()"
    },
    {
        "tool_id": "native:serviceareafromlayer",
        "toolname": "serviceareafromlayer",
        "tool_description": "This algorithm creates a new vector with all the edges or parts of edges of a network line layer that can be reached within a distance or a time, starting from features of a point layer.\nThe distance and the time (both referred to as \"travel cost\") must be specified respectively in the network layer units or in hours.",
        "parameters": "INPUT:,\nSTRATEGY: \nDIRECTION_FIELD: \nVALUE_FORWARD: \nVALUE_BACKWARD: \nVALUE_BOTH: \nDEFAULT_DIRECTION: \nSPEED_FIELD: \nDEFAULT_SPEED: \nTOLERANCE: \nSTART_POINTS: \nTRAVEL_COST2: \nINCLUDE_BOUNDS: \nOUTPUT_LINES: \nOUTPUT: code_examples = def service_area_from_layer(): # Define input and output paths input_path = D:/Data/InputRoadNetwork.shp output_line_path = C:/output_path/output_line.shp output_path = C:/output_path/ServiceArea_output.shp # Define the parameters parameters = { INPUT:D:/Case_Studies/Data/Network_Analysis/Roads.shp, \nSTRATEGY:0, \nDIRECTION_FIELD:, \nVALUE_FORWARD:, \nVALUE_BACKWARD:, \nVALUE_BOTH:, \nDEFAULT_DIRECTION:2, \nSPEED_FIELD:, \nDEFAULT_SPEED:50, \nTOLERANCE:0, START_POINTS:D:/Case_Studies/Data/HospitalData.shp, \nTRAVEL_COST2:240, INCLUDE_BOUNDS:False, \nOUTPUT_LINES: output_line_path \nOUTPUT: output_path } # Run the service area from layer algorithm result = processing.run(native:serviceareafromlayer, parameters) # Load the output layer into \nQGIS output_layer = QgsVectorLayer(result[OUTPUT], Service area, ogr) QgsProject.instance().addMapLayer(output_layer) service_area_from_layer()\n",
        "code_example": ""
    },
    {
        "tool_id": "native:serviceareafrompoint",
        "toolname": "serviceareafrompoint",
        "tool_description": "Returns all the edges or parts of edges of a network that can be reached within a given distance or time, starting from a point feature. This allows the evaluation of accessibility within a network, e.g. what are the places I can navigate to on a road network without spending a cost greater than a given value (the cost can be distance or time).",
        "parameters": "INPUT: Vector layer representing the network. Line vector layer representing the network to be covered. Type: [vector: line]\nSTART_POINT: Start point (x, y). Coordinate of the point to calculate the servicearea around.. Type: [coordinates] \nSTRATEGY: Path type to calculate. The type of path to calculate. One of: 0 \u2014 Shortest 1 \u2014 Fastest. Type: [enumeration] Default: 0 \nTRAVEL_COST: Travel cost (distance for \u201cShortest\u201d, time for \u201cFastest\u201d). The value is estimated as a distance (in the networklayer units) when looking for the Shortest path andas time (in hours) for the Fastest path.. Type: [number] Default: 0 \nOUTPUT_LINES: Service area (lines). Specify the output line layer for the service area.One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] \nOUTPUT: Service area (boundary nodes). Specify the output point layer for the service areaboundary nodes. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Skip output] \nDIRECTION_FIELD: Direction field Optional. The field used to specify directions for the network edges. The values used in this field are specified with the threeparameters Value for forward direction , Value for backward direction and Value for both directions .Forward and reverse directions correspond to a one-way edge,\u201cboth directions\u201d indicates a two-way edge.If a feature does not have a value in this field, or no fieldis set then the default direction setting (provided withthe Default direction parameter) is used.. Type: [tablefield: string] Default: 0.0 \nVALUE_FORWARD: Value for forward direction Optional. Value set in the direction field to identify edges with aforward direction. Type: [string] Default: \u2018\u2019 (empty string) \nVALUE_BACKWARD: Value for backward direction Optional. Value set in the direction field to identify edges with abackward direction. Type: [string] Default: \u2018\u2019 (empty string) \nVALUE_BOTH: Value for both directions Optional. Value set in the direction field to identifybidirectional edges. Type: [string] Default: \u2018\u2019 (empty string) \nDEFAULT_DIRECTION: Default direction. If a feature has no value set in the direction field orif no direction field is set, then this direction valueis used. One of: 0 \u2014 Forward direction 1 \u2014 Backward direction 2 \u2014 Both directions. Type: [enumeration] Default: 2 \nSPEED_FIELD: Speed field Optional. Field providing the speed value (in km/h ) for theedges of the network when looking for the fastest path. If a feature does not have a value in this field, orno field is set then the default speed value (providedwith the Default speed parameter) is used.. Type: [tablefield: string] \nDEFAULT_SPEED: Default speed (km/h). Value to use to calculate the travel time if no speedfield is provided for an edge. Type: [number] Default: 50.0 \nTOLERANCE: Topology tolerance. Two lines with nodes closer than the specifiedtolerance are considered connected. Type: [number] Default: 0.0 outputs = \nOUTPUT: Service area (boundary nodes). The output point layer with the service area boundarynodes.. Type: [vector: point] \nOUTPUT_LINES: Service area (lines). Line layer representing the parts of the networkthat can be serviced by the start point, for thegiven cost.. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef calculate_service_area():\n    input_path = 'path/to/network_layer.shp'\n    output_path = 'path/to/output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, \"\"\"Network Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'START_POINT': 'x_coordinate, y_coordinate',\n        'STRATEGY': 0,                                                \n        'TRAVEL_COST': 0.0,\n        'OUTPUT_LINES': 'TEMPORARY_OUTPUT',                     \n        'OUTPUT': output_path,                                                 \n        'DIRECTION_FIELD': '',\n        'VALUE_FORWARD': '',\n        'VALUE_BACKWARD': '',\n        'VALUE_BOTH': '',\n        'DEFAULT_DIRECTION': 2,                                                                                \n        'SPEED_FIELD': '',\n        'DEFAULT_SPEED': 50.0,\n        'TOLERANCE': 0.0\n    }\n\n    result = processing.run(\"native:serviceareafrompoint\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Service Area Boundary Nodes', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ncalculate_service_area()"
    },
    {
        "tool_id": "native:setlayerencoding",
        "toolname": "setlayerencoding",
        "tool_description": "Sets the encoding used for reading a layer\u2019s attributes. No permanent changes are made to the layer, rather it affects only how the layer is read during the current session.",
        "parameters": "INPUT: Saved features. Vector layer to set the encoding.. Type: [vector: any]\nENCODING: Encoding. Text encoding to assign to the layer in the current \nQGIS session.. Type: [string] outputs = \nOUTPUT: Output layer. Input vector layer with the set encoding.. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef set_layer_encoding():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Data Layer', 'ogr')\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_path,\n        'ENCODING': 'UTF-8',  # Specify the encoding format\n    }\n\n    # Perform the set layer encoding operation\n    result = processing.run(\"\"\"native:setlayerencoding\", parameters)\n\n                      \nset_layer_encoding()"
    },
    {
        "tool_id": "native:setlayerstyle",
        "toolname": "setlayerstyle",
        "tool_description": "Applies a provided style to a layer. The style must be defined in a QML file.\nNo new output are created: the style is immediately assigned to the layer.",
        "parameters": "INPUT: Input Layer. Input layer you want to apply the style to. Type: [layer]\nSTYLE: Style file. Path to the .qml file of the style. Type: [file] outputs = \nOUTPUT: . The input layer with the new style assigned. No new layer is created.. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef apply_style_to_layer():\n    input_path = 'D:/input_layer.shp'\n    style_path = 'D:/style_file.qml'\n    output_path = 'C:/Users/Output/styled_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'STYLE': style_path,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"native:setlayerstyle\", parameters)\n    \n    styled_layer = QgsVectorLayer(output_path, 'Styled Layer', 'ogr')\n    QgsProject.instance().addMapLayer(styled_layer)\n\napply_style_to_layer()"
    },
    {
        "tool_id": "native:setmfromraster",
        "toolname": "setmfromraster",
        "tool_description": "Uses values sampled from a band within a raster layer to set the M value for every overlapping vertex in the feature geometry. The raster values can optionally be scaled by a preset amount.\nIf M values already exist in the layer, they will be overwritten with the new value. If no M values exist, the geometry will be upgraded to include M values.\nAllows features in-place modification of point, line, and polygon features with M enabled",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nRASTER: Raster layer. Raster layer with M values. Type: [raster]\nBAND: Band number. The raster band from which the M values are taken. Type: [raster band] Default: 1\nNODATA: Value for NoData or non-intersecting vertices. Value to use in case the vertex does not intersect(a valid pixel of) the raster. Type: [number ] Default: 0.0\nSCALE: Scale factor. Scaling value: the band values are multiplied by this value.. Type: [number ] Default: 1.0\nOFFSET: Offset. Offset value: it is algebraically added to the bandvalues after applying the \u201cScale factor\u201d.. Type: [number ] Default: 0.0\nOUTPUT: Updated. Specify the output vector layer (with updated M values).One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef set_m_from_raster():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    raster_path = 'D:/Data/InputRaster.tif'\n    output_path = 'C:/output_path/UpdatedLayer.shp'\n\n    # Define the parameters\n    parameters = {\n        'INPUT': input_path,\n        'RASTER': raster_path,\n        'BAND': 1,  # Default band number\n        'NODATA': 0.0,  # Default value for NoData\n        'SCALE': 1.0,  # Default scale factor\n        'OFFSET': 0.0,  # Default offset\n        'OUTPUT': output_path\n    }\n\n    # Run the Set M from Raster algorithm\n    result = processing.run('native:setmfromraster', parameters)\n\n    # Load the updated layer to QGIS\n    updated_layer = QgsVectorLayer(result['OUTPUT'], 'UpdatedLayer', 'ogr')\n    QgsProject.instance().addMapLayer(updated_layer)\n\n# Execute the function\nset_m_from_raster()"
    },
    {
        "tool_id": "native:setmvalue",
        "toolname": "setmvalue",
        "tool_description": "Sets the M value for geometries in a layer.\nIf M values already exist in the layer, they will be overwritten with the new value. If no M values exist, the geometry will be upgraded to include M values and the specified value used as the initial M value for all geometries.\nAllows features in-place modification of point, line, and polygon features with M enabled",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nM_VALUE: \nM Value. \nM value to assign to the feature geometries. Type: [number ] Default: 0.0 \nOUTPUT: \nM Added. Specify the output vector layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: \nM Added. The output vector layer (with \nM values assigned to thegeometries). Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef set_m_value(input_layer_path, output_layer_path):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'M_VALUE': 0.0,\n        'OUTPUT': output_layer_path                                                                                                                          \n    }\n    \n    result = processing.run(\"native:setmvalue\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'M Added Layer', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = \"D:/Data/PrevalenceData.shp\"\noutput_layer_path = \"D:/workspace_directory/output_layer.shp\"\nset_m_value(input_layer_path, output_layer_path)"
    },
    {
        "tool_id": "native:setprojectvariable",
        "toolname": "setprojectvariable",
        "tool_description": "Sets an expression variable for the current project.",
        "parameters": "NAME: Variable name. Name of the variable. Type: [string]\nVALUE: Variable value. Value to be stored. Type: [string] outputs =\n",
        "code_example": "import processing\n\ndef set_project_variable():\n    parameters = {\n        'NAME': 'VariableName',  # Example variable name\n        'VALUE': 'VariableValue',  # Example variable value\n    }\n    processing.run(\"\"\"native:setprojectvariable\", parameters)\n\nset_project_variable()"
    },
    {
        "tool_id": "native:setzfromraster",
        "toolname": "setzfromraster",
        "tool_description": "Uses values sampled from a band within a raster layer to set the Z value for every overlapping vertex in the feature geometry. The raster values can optionally be scaled by a preset amount.\nIf Z values already exist in the layer, they will be overwritten with the new value. If no Z values exist, the geometry will be upgraded to include the Z dimension.\nAllows features in-place modification of point, line, and polygon features with Z enabled",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nRASTER: Raster layer. Raster layer with Z values. Type: [raster]\nBAND: Band number. The raster band to take the Z values from. Type: [raster band] Default: 1\nNODATA: Value for NoData or non-intersecting vertices. Value to use in case the vertex does not intersect(a valid pixel of) the raster. Type: [number ] Default: 0\nSCALE: Scale factor. Scaling value: the band values are multipliedby this value.. Type: [number ] Default: 1.0\nOFFSET: Offset. Offset value: it is algebraically added to the bandvalues after applying the \u201cScale factor\u201d.. Type: [number ] Default: 0.0\nOUTPUT: Updated. Specify the output vector layer (with Z valuesfrom the raster layer). One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer, QgsRasterLayer\n\ndef set_z_from_raster(input_layer_path, raster_layer_path, output_layer_path):\n    # Load the vector layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Vector Layer', 'ogr')\n    \n    # Load the raster layer\n    raster_layer = QgsRasterLayer(raster_layer_path, 'Input Raster Layer')\n    \n    # Define the parameters\n    parameters = {\n        'INPUT': input_layer,\n        'RASTER': raster_layer,\n        'BAND': 1,  # Default value\n        'NODATA': 0,  # Default value\n        'SCALE': 1.0,  # Default value\n        'OFFSET': 0.0,  # Default value\n        'OUTPUT': output_layer_path  # Specify the output layer path\n    }\n\n    # Run the Set Z from Raster algorithm\n    result = processing.run('native:setzfromraster', parameters)\n\n    # Load the updated layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Updated Layer with Z Values', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Example usage\ninput_layer_path = 'D:/Data/InputVectorLayer.shp'\nraster_layer_path = 'D:/Data/InputRasterLayer.tif'\noutput_layer_path = 'D:/workspace_directory/output_layer.shp'\nset_z_from_raster(input_layer_path, raster_layer_path, output_layer_path)"
    },
    {
        "tool_id": "native:setzvalue",
        "toolname": "setzvalue",
        "tool_description": "Sets the Z value for geometries in a layer.\nIf Z values already exist in the layer, they will be overwritten with the new value. If no Z values exist, the geometry will be upgraded to include Z values and the specified value used as the initial Z value for all geometries.\nAllows features in-place modification of point, line, and polygon features with Z enabled",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nZ_VALUE: Z Value. Z value to assign to the feature geometries. Type: [number ] Default: 0.0\nOUTPUT: Z Added. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef set_z_value():\n\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n  \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the set z value algorithm\n    result = processing.run('native:setzvalue', {\n        'INPUT': input_layer,\n        'Z_VALUE': 10.0,\n        'OUTPUT': output_path\n    })\n\n    # Load the modified layer to QGIS\n    z_value_layer = QgsVectorLayer(result['OUTPUT'], 'Z Value Added', 'ogr')\n    QgsProject.instance().addMapLayer(z_value_layer)\n\n# Execute the function\nset_z_value()"
    },
    {
        "tool_id": "native:shortestline",
        "toolname": "shortestline",
        "tool_description": "Creates a line layer as the shortest line between the source and the destination layer. By default only the first nearest feature of the destination layer is taken into account. The n-nearest neighboring features number can be specified. If a maximum distance is specified, then only features which are closer than this distance will be considered.\nThe output features will contain all the source layer attributes, all the attributes from the n-nearest feature and the additional field of the distance.",
        "parameters": "SOURCE: Source layer. Origin layer for which to search for nearest neighbors. Type: [vector: any]\nDESTINATION: Destination layer. Target Layer in which to search for nearest neighbors. Type: [vector: any]\nMETHOD: Method. Shortest distance calculation methodPossible values are: 0 \u2014 Distance to nearest point on feature 1 \u2014 Distance to feature centroid. Type: [enumeration] Default: 0\nNEIGHBORS: Maximum number of neighbors. Maximum number of neighbors to look for. Type: [number] Default: 1\nDISTANCE: Maximum distance Optional. Only destination features which are closer than this distancewill be considered.. Type: [number]\nOUTPUT: Shortest lines. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef find_shortest_lines():\n    # Define input and output paths\n    source_path = 'D:/Data/Source.shp'\n    destination_path = 'D:/Data/Destination.shp'\n    output_path = 'D:/output_path/shortest_lines.shp'\n\n    # Load the shapefiles as vector layers\n    source_layer = QgsVectorLayer(source_path, 'Source Layer', 'ogr')\n    destination_layer = QgsVectorLayer(destination_path, 'Destination Layer', 'ogr')\n\n    # Run the Shortest Line algorithm\n    result = processing.run('native:shortestline', {\n        'SOURCE': source_layer,\n        'DESTINATION': destination_layer,\n        'METHOD': 0,  # 0 \u2014 Distance to nearest point on feature, 1 \u2014 Distance to feature centroid\n        'NEIGHBORS': 1,\n        'DISTANCE': None,\n        'OUTPUT': output_path\n    })\n\n    # Load the shortest lines layer to QGIS\n    shortest_lines_layer = QgsVectorLayer(result['OUTPUT'], 'Shortest Lines', 'ogr')\n    QgsProject.instance().addMapLayer(shortest_lines_layer)\n\n# Execute the function\nfind_shortest_lines()"
    },
    {
        "tool_id": "native:shortestpathlayertopoint",
        "toolname": "shortestpathlayertopoint",
        "tool_description": "Computes the optimal (shortest or fastest) routes from multiple start points defined by a vector layer and a given end point.",
        "parameters": "INPUT: Vector layer representing network. Line vector layer representing the network to be covered. Type: [vector: line]\nSTRATEGY: Path type to calculate. The type of path to calculate. One of: 0 \u2014 Shortest 1 \u2014 Fastest. Type: [enumeration] Default: 0 \nSTART_POINTS: Vector layer with start points. Point vector layer whose features are used as startpoints of the routes. Type: [vector: point] \nEND_POINT: End point (x, y). Point feature representing the end point of the routes. Type: [coordinates] \nOUTPUT: Shortest path. Specify the output line layer for the shortest paths.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] \nDIRECTION_FIELD: Direction field Optional. The field used to specify directions for the network edges. The values used in this field are specified with the threeparameters Value for forward direction , Value for backward direction and Value for both directions .Forward and reverse directions correspond to a one-way edge,\u201cboth directions\u201d indicates a two-way edge.If a feature does not have a value in this field, or no fieldis set then the default direction setting (provided withthe Default direction parameter) is used.. Type: [tablefield: string] Default: 0.0 \nVALUE_FORWARD: Value for forward direction Optional. Value set in the direction field to identify edges with aforward direction. Type: [string] Default: \u2018\u2019 (empty string) \nVALUE_BACKWARD: Value for backward direction Optional. Value set in the direction field to identify edges with abackward direction. Type: [string] Default: \u2018\u2019 (empty string) \nVALUE_BOTH: Value for both directions Optional. Value set in the direction field to identifybidirectional edges. Type: [string] Default: \u2018\u2019 (empty string) \nDEFAULT_DIRECTION: Default direction. If a feature has no value set in the direction field orif no direction field is set, then this direction valueis used. One of: 0 \u2014 Forward direction 1 \u2014 Backward direction 2 \u2014 Both directions. Type: [enumeration] Default: 2 \nSPEED_FIELD: Speed field Optional. Field providing the speed value (in km/h ) for theedges of the network when looking for the fastest path. If a feature does not have a value in this field, orno field is set then the default speed value (providedwith the Default speed parameter) is used.. Type: [tablefield: string] \nDEFAULT_SPEED: Default speed (km/h). Value to use to calculate the travel time if no speedfield is provided for an edge. Type: [number] Default: 50.0 \nTOLERANCE: Topology tolerance. Two lines with nodes closer than the specifiedtolerance are considered connected. Type: [number] Default: 0.0 outputs = \nOUTPUT: Shortest path. Line layer of the shortest or fastest pathfrom each of the start points to the end point. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef shortest_path_algorithm():\n    network_layer_path = 'D:/network_layer.shp'\n    start_points_path = 'D:/start_points.shp'\n    output_path = 'D:/output_shortest_path.shp'\n    end_point = (34.0522, -118.2437)\n\n    network_layer = QgsVectorLayer(network_layer_path, \"\"\"Network Layer\", \"ogr\")\n    start_points_layer = QgsVectorLayer(start_points_path, \"Start Points\", \"ogr\")\n\n    parameters = {\n        'INPUT': network_layer_path,\n        'STRATEGY': 0,                           \n        'START_POINTS': start_points_path,\n        'END_POINT': end_point,\n        'OUTPUT': output_path,\n        'DIRECTION_FIELD': '',\n        'VALUE_FORWARD': '',\n        'VALUE_BACKWARD': '',\n        'VALUE_BOTH': '',\n        'DEFAULT_DIRECTION': 2,                                                                   \n        'SPEED_FIELD': '',\n        'DEFAULT_SPEED': 50.0,\n        'TOLERANCE': 0.0\n    }\n\n    result = processing.run(\"native:shortestpathlayertopoint\", parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Shortest_Path_Output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nshortest_path_algorithm()"
    },
    {
        "tool_id": "native:shortestpathpointtolayer",
        "toolname": "shortestpathpointtolayer",
        "tool_description": "Computes the optimal (shortest or fastest) routes between a given start point and multiple end points defined by a point vector layer.",
        "parameters": "INPUT: Vector layer representing network. Line vector layer representing the network to be covered. Type: [vector: line]\nSTRATEGY: Path type to calculate. The type of path to calculate. One of: 0 \u2014 Shortest 1 \u2014 Fastest. Type: [enumeration] Default: 0 \nSTART_POINT: Start point (x, y). Point feature representing the start point of the routes. Type: [coordinates] \nEND_POINTS: Vector layer with end points. Point vector layer whose features are used as endpoints of the routes. Type: [vector: point] \nOUTPUT: Shortest path. Specify the output line layer for the shortest paths.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] \nDIRECTION_FIELD: Direction field Optional. The field used to specify directions for the network edges. The values used in this field are specified with the threeparameters Value for forward direction , Value for backward direction and Value for both directions .Forward and reverse directions correspond to a one-way edge,\u201cboth directions\u201d indicates a two-way edge.If a feature does not have a value in this field, or no fieldis set then the default direction setting (provided withthe Default direction parameter) is used.. Type: [tablefield: string] Default: 0.0 \nVALUE_FORWARD: Value for forward direction Optional. Value set in the direction field to identify edges with aforward direction. Type: [string] Default: \u2018\u2019 (empty string) \nVALUE_BACKWARD: Value for backward direction Optional. Value set in the direction field to identify edges with abackward direction. Type: [string] Default: \u2018\u2019 (empty string) \nVALUE_BOTH: Value for both directions Optional. Value set in the direction field to identifybidirectional edges. Type: [string] Default: \u2018\u2019 (empty string) \nDEFAULT_DIRECTION: Default direction. If a feature has no value set in the direction field orif no direction field is set, then this direction valueis used. One of: 0 \u2014 Forward direction 1 \u2014 Backward direction 2 \u2014 Both directions. Type: [enumeration] Default: 2 \nSPEED_FIELD: Speed field Optional. Field providing the speed value (in km/h ) for theedges of the network when looking for the fastest path. If a feature does not have a value in this field, orno field is set then the default speed value (providedwith the Default speed parameter) is used.. Type: [tablefield: string] \nDEFAULT_SPEED: Default speed (km/h). Value to use to calculate the travel time if no speedfield is provided for an edge. Type: [number] Default: 50.0 \nTOLERANCE: Topology tolerance. Two lines with nodes closer than the specifiedtolerance are considered connected. Type: [number] Default: 0.0 outputs = \nOUTPUT: Shortest path. Line layer of the shortest or fastest pathfrom each of the start points to the end point. Type: [vector: line]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_shortest_path():\n    input_network_path = 'D:/network_layer.shp'\n    output_path = 'D:/shortest_paths_output.shp'\n    start_point = QgsPointXY(30.5, 50.5)  # Example coordinates for start point\n\n    input_network_layer = QgsVectorLayer(input_network_path, \"\"\"Network Layer\", \"ogr\")\n    \n    shortest_path_params = {\n        'INPUT': input_network_path,\n        'STRATEGY': 0,                           \n        'START_POINT': start_point,\n        'END_POINTS': 'D:/end_points_layer.shp',\n        'OUTPUT': output_path,\n        'DIRECTION_FIELD': '',\n        'VALUE_FORWARD': '',\n        'VALUE_BACKWARD': '',\n        'VALUE_BOTH': '',\n        'DEFAULT_DIRECTION': 2,                                   \n        'SPEED_FIELD': '',\n        'DEFAULT_SPEED': '',\n        'TOLERANCE': '''    }\n    \n    result = processing.run(\"native:shortestpathpointtolayer\", shortest_path_params)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Shortest Paths', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ncalculate_shortest_path()"
    },
    {
        "tool_id": "native:shortestpathpointtopoint",
        "toolname": "shortestpathpointtopoint",
        "tool_description": "This algorithm computes optimal (shortest or fastest) route between given start and end points.",
        "parameters": "INPUT: Vector layer representing network\nSTART_POINT:\nEND_POINT:\nSTRATEGY:\nOUTPUT:\n",
        "code_example": "def find_shortest_path():\n    # Import necessary QGIS and PyQt5 modules\n    from qgis.core import QgsProject, QgsVectorLayer\n    import processing\n    from PyQt5.QtCore import QVariant\n\n    # Define paths to the input data\n    network_points_path = 'D:/Data/network_analysis/network_points.shp'\n    network_lines_path = 'D:/Data/network_analysis/network_lines.shp'\n    output_directory = 'C:/Output_directory/Output_layer.shp'\n    output_path = f'{output_directory}/shortest_path.shp'\n\n    # Load the network points and lines layers\n    network_points_layer = QgsVectorLayer(network_points_path, 'Network Points', 'ogr')\n    network_lines_layer = QgsVectorLayer(network_lines_path, 'Network Lines', 'ogr')\n\n    # Define start and end points using the attributes in the network points layer\n    # Assuming the first two points from the network_points_layer are City A and City B\n    start_point = network_points_layer.getFeature(0).geometry().asPoint()\n    end_point = network_points_layer.getFeature(1).geometry().asPoint()\n\n    # Define the parameters for the shortest path (point to point) algorithm\n    params = {\n        'INPUT': network_lines_layer,  # Input is the network lines layer\n        'START_POINT': f'{start_point.x()},{start_point.y()}',   # Start point geometry as string \"x,y\"\n        'END_POINT': f'{end_point.x()},{end_point.y()}',         # End point geometry as string \"x,y\"\n        'STRATEGY': 0,                # Strategy 0 means shortest path\n        'OUTPUT': output_path         # Save the output to specified folder\n    }\n\n    # Execute the algorithm\n    result = processing.run(\"native:shortestpathpointtopoint\", params)\n\n    # Load the output layer as a virtual layer within QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Shortest Path', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function to find and load the shortest path\nfind_shortest_path()"
    },
    {
        "tool_id": "native:shpencodinginfo",
        "toolname": "shpencodinginfo",
        "tool_description": "Extracts the attribute encoding information embedded in a Shapefile. Both the encoding specified by an optional .cpg file and any encoding details present in the .dbf LDID header block are considered.",
        "parameters": "INPUT: Input Layer.\nESRI Shapefile ( \n.SHP ) Layer to extract the encoding information.. Type: [vector: any] outputs = \nENCODING: Shapefile encoding. Encoding information specified in the input file. Type: [string] \nCPG_ENCODING: \nCPG encoding. Encoding information specified in any optional \n.CPG file. Type: [string] \nLDID_ENCODING: \nLDID encoding. Encoding information specified in .dbf \nLDID header block. Type: [string]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef extract_shp_encoding_info():\n    input_path = 'D:/Data/Input.shp'\n    output_path = 'C:/output_path/encoding_info.txt'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    result = processing.run('native:shpencodinginfo', {\n        'INPUT': input_path,\n        'OUTPUT': output_path\n    })\n\n# Execute the function\nextract_shp_encoding_info()"
    },
    {
        "tool_id": "native:simplifygeometries",
        "toolname": "simplifygeometries",
        "tool_description": "Simplifies the geometries in a line or polygon layer. It creates a new layer with the same features as the ones in the input layer, but with geometries containing a lower number of vertices.\nThe algorithm gives a choice of simplification methods, including distance based (the \u201cDouglas-Peucker\u201d algorithm), area based (\u201cVisvalingam\u201d algorithm) and snapping geometries to grid.\nAllows features in-place modification of line and polygon features\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nMETHOD: Simplification method. Simplification method. One of: 0 \u2014 Distance (Douglas-Peucker) 1 \u2014 Snap to grid 2 \u2014 Area (Visvalingam). Type: [enumeration] Default: 0\nTOLERANCE: Tolerance. Threshold tolerance (in units of the layer):if the distance between two nodes is smaller thanthe tolerance value, the segment will be simplifiedand vertices will be removed.. Type: [number ] Default: 1.0\nOUTPUT: Simplified. Specify the output (simplified) vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef simplify_geometries():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/simplified_layer.shp'\n  \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Simplify Geometries algorithm\n    result = processing.run('native:simplifygeometries', {\n        'INPUT': input_layer,\n        'METHOD': 0,  # 0: Distance (Douglas-Peucker), 1: Snap to grid, 2: Area (Visvalingam)\n        'TOLERANCE': 1.0,\n        'OUTPUT': output_path\n    })\n\n    # Load the simplified layer to QGIS\n    simplified_layer = QgsVectorLayer(result['OUTPUT'], 'Simplified', 'ogr')\n    QgsProject.instance().addMapLayer(simplified_layer)\n\n# Execute the function\nsimplify_geometries()"
    },
    {
        "tool_id": "native:singlesidedbuffer",
        "toolname": "singlesidedbuffer",
        "tool_description": "Computes a buffer on lines by a specified distance on one side of the line only.\nBuffer always results in a polygon layer.",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nDISTANCE: Distance. Buffer distance.. Type: [number] Default: 10.0\nSIDE: Side. Which side to create the buffer on.One of: 0 \u2013 Left 1 \u2013 Right. Type: [enumeration] Default: 0\nSEGMENTS: Segments. Controls the number of line segments to use to approximatea quarter circle when creating rounded offsets.. Type: [number] Default: 8\nJOIN_STYLE: Join style. Specifies whether round, miter or beveled joins should beused when offsetting corners in a line.Options are: 0 \u2014 Round 1 \u2014 Miter 2 \u2014 Bevel Fig. 28.108 Round, miter, and bevel join styles \uf0c1. Type: [enumeration] Default: 0\nMITER_LIMIT: Miter limit. Sets the maximum distance from the offset geometry to usewhen creating a mitered join as a factor of the offset distance (only applicable for miterjoin styles).Minimum: 1.0 Fig. 28.109 A 10m buffer with a limit of 2 and a 10m buffer with a limit of 1 \uf0c1. Type: [number] Default: 2.0\nOUTPUT: Buffer. Specify the output (buffer) layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_single_sided_buffer():\n    # Define input and output paths\n    input_path = 'D:/Data/LinesData.shp'\n    output_path = 'C:/output_path/buffer_output.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Lines Data', 'ogr')\n\n    # Run the Single Sided Buffer algorithm\n    result = processing.run('native:singlesidedbuffer', {\n        'INPUT': input_layer,\n        'DISTANCE': 10.0,\n        'SIDE': 0,  # Options: 0 - Left, 1 - Right\n        'SEGMENTS': 8,\n        'JOIN_STYLE': 0,  # Options: 0 - Round, 1 - Miter, 2 - Bevel\n        'MITER_LIMIT': 2.0,\n        'OUTPUT': output_path\n    })\n\n    # Load the buffer layer to QGIS\n    buffer_layer = QgsVectorLayer(result['OUTPUT'], 'Buffer Output', 'ogr')\n    QgsProject.instance().addMapLayer(buffer_layer)\n\n# Execute the function\ncreate_single_sided_buffer()"
    },
    {
        "tool_id": "native:slope",
        "toolname": "slope",
        "tool_description": "Computes a buffer on lines by a specified distance on one side of the line only.\nBuffer always results in a polygon layer.",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nDISTANCE: Distance. Buffer distance.. Type: [number] Default: 10.0\nSIDE: Side. Which side to create the buffer on.One of: 0 \u2013 Left 1 \u2013 Right. Type: [enumeration] Default: 0\nSEGMENTS: Segments. Controls the number of line segments to use to approximatea quarter circle when creating rounded offsets.. Type: [number] Default: 8\nJOIN_STYLE: Join style. Specifies whether round, miter or beveled joins should beused when offsetting corners in a line.Options are: 0 \u2014 Round 1 \u2014 Miter 2 \u2014 Bevel Fig. 28.108 Round, miter, and bevel join styles \uf0c1. Type: [enumeration] Default: 0\nMITER_LIMIT: Miter limit. Sets the maximum distance from the offset geometry to usewhen creating a mitered join as a factor of the offset distance (only applicable for miterjoin styles).Minimum: 1.0 Fig. 28.109 A 10m buffer with a limit of 2 and a 10m buffer with a limit of 1 \uf0c1. Type: [number] Default: 2.0\nOUTPUT: Buffer. Specify the output (buffer) layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_single_sided_buffer():\n    # Define input and output paths\n    input_path = 'D:/Data/LinesData.shp'\n    output_path = 'C:/output_path/buffer_output.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Lines Data', 'ogr')\n\n    # Run the Single Sided Buffer algorithm\n    result = processing.run('native:singlesidedbuffer', {\n        'INPUT': input_layer,\n        'DISTANCE': 10.0,\n        'SIDE': 0,  # Options: 0 - Left, 1 - Right\n        'SEGMENTS': 8,\n        'JOIN_STYLE': 0,  # Options: 0 - Round, 1 - Miter, 2 - Bevel\n        'MITER_LIMIT': 2.0,\n        'OUTPUT': output_path\n    })\n\n    # Load the buffer layer to QGIS\n    buffer_layer = QgsVectorLayer(result['OUTPUT'], 'Buffer Output', 'ogr')\n    QgsProject.instance().addMapLayer(buffer_layer)\n\n# Execute the function\ncreate_single_sided_buffer()"
    },
    {
        "tool_id": "native:smoothgeometry",
        "toolname": "smoothgeometry",
        "tool_description": "Smooths the geometries in a line or polygon layer by adding more vertices and corners to the feature geometries.\nThe iterations parameter dictates how many smoothing iterations will be applied to each geometry. A higher number of iterations results in smoother geometries with the cost of greater number of nodes in the geometries.\nThe offset parameter controls how \u201ctightly\u201d the smoothed geometries follow the original geometries. Smaller values results in a tighter fit, and larger values will create a looser fit.\nThe maximum angle parameter can be used to prevent smoothing of nodes with large angles. Any node where the angle of the segments to either side is larger than this will not be smoothed. For example, setting the maximum angle to 90 degrees or lower would preserve right angles in the geometry.\nAllows features in-place modification of line and polygon features",
        "parameters": "INPUT: Input layer. Input line or polygon vector layer. Type: [vector: line, polygon]\nITERATIONS: Iterations. Increasing the number of iterations will give smoothergeometries (and more vertices).. Type: [number ] Default: 1 \nOFFSET: Offset. Increasing values will move the smoothed lines / boundariesfurther away from the input lines / boundaries.. Type: [number ] Default: 0.25 \nMAX_ANGLE: Maximum node angle to smooth. Every node below this value will be smoothed. Type: [number ] Default: 180.0 \nOUTPUT: Smoothed. Specify the output (smoothed) layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Smoothed. Output (smoothed) vector layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef smooth_geometry(input_layer_path):\n    output_path = \"\"\"D:/workspace_directory/smoothed_output.shp\"\n\n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_layer_path,\n        'ITERATIONS': 1,              \n        'OFFSET': 0.25,                 \n        'MAX_ANGLE': 180.0,                  \n        'OUTPUT': output_path                                                                                                                                         \n    }\n    \n    result = processing.run(\"native:smoothgeometry\", parameters)\n    \n    smoothed_layer = QgsVectorLayer(result['OUTPUT'], 'Smoothed Layer', 'ogr')\n    QgsProject.instance().addMapLayer(smoothed_layer)\n\ninput_layer_path = \"D:/Data/PrevalenceData.shp\"\nsmooth_geometry(input_layer_path)"
    },
    {
        "tool_id": "native:snapgeometries",
        "toolname": "snapgeometries",
        "tool_description": "Snaps the geometries in a layer either to the geometries from another layer, or to geometries within the same layer.\nMatching is done based on a tolerance distance, and vertices will be inserted or removed as required to make the geometries match the reference geometries.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nREFERENCE_LAYER: Reference layer. Vector layer to snap to. Type: [vector: any] \nTOLERANCE: Tolerance. Control how close input vertices need to be to thereference layer geometries before they are snapped.. Type: [number] Default: 10.0 \nBEHAVIOR: Behavior. Snapping can be done to an existing node or asegment (its closest point to the vertex to move).Available snapping options: 0 \u2014 Prefer aligning nodes, insert extra vertices whererequired Prefer to snap to nodes, even when a segment may be closerthan a node. New nodes will be inserted to make geometriesfollow each other exactly when inside allowable tolerance. 1 \u2014 Prefer closest point, insert extra vertices whererequired Snap to closest point, regardless of it is a node or asegment. New nodes will be inserted to make geometriesfollow each other exactly when inside allowable tolerance. 2 \u2014 Prefer aligning nodes, don\u2019t insert new vertices Prefer to snap to nodes, even when a segment may be closerthan a node. No new nodes will be inserted. 3 \u2014 Prefer closest point, don\u2019t insert new vertices Snap to closest point, regardless of it is a node or asegment. No new nodes will be inserted. 4 \u2014 Move end points only, prefer aligning nodes Only snap start/end points of lines (point features willalso be snapped, polygon features will not be modified),prefer to snap to nodes. 5 \u2014 Move end points only, prefer closest point Only snap start/end points of lines (point features willalso be snapped, polygon features will not be modified),snap to closest point 6 \u2014 Snap end points to end points only Only snap the start/end points of lines to other start/end points of lines 7 \u2014 Snap to anchor nodes (single layer only). Type: [enumeration] Default: 0 \nOUTPUT: Snapped geometry. Specify the output (snapped) layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Snapped geometry. Output (snapped) vector layer. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef snap_geometries():\n    # Define input, reference layer paths and output path\n    input_path = \"\"\"D:/Data/InputLayer.shp\"\n    reference_layer_path = \"D:/Data/ReferenceLayer.shp\"\n    output_path = \"D:/workspace_directory/snapped_layer.shp\"\n\n                                                              \n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n    reference_layer = QgsVectorLayer(reference_layer_path, \"Reference Layer\", \"ogr\")\n\n                           \n    parameters = {\n        'INPUT': input_layer,\n        'REFERENCE_LAYER': reference_layer,\n        'TOLERANCE': 10.0,\n        'BEHAVIOR': 0,                                                                                              \n        'OUTPUT': output_path\n    }\n\n                                       \n    result = processing.run(\"native:snapgeometries\", parameters)\n\n                                    \n    snapped_layer = QgsVectorLayer(result['OUTPUT'], 'Snapped Layer', 'ogr')\n    QgsProject.instance().addMapLayer(snapped_layer)\n\n                      \nsnap_geometries()"
    },
    {
        "tool_id": "native:snappointstogrid",
        "toolname": "snappointstogrid",
        "tool_description": "Modifies the coordinates of geometries in a vector layer, so that all points or vertices are snapped to the closest point of a grid.\nIf the snapped geometry cannot be calculated (or is totally collapsed) the feature\u2019s geometry will be cleared.\nSnapping can be performed on the X, Y, Z or M axis. A grid spacing of 0 for any axis will disable snapping for that axis.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nHSPACING: X Grid Spacing. Grid spacing on the X axis. Type: [number ] Default: 1.0\nVSPACING: Y Grid Spacing. Grid spacing on the Y axis. Type: [number ] Default: 1.0\nZSPACING: Z Grid Spacing. Grid spacing on the Z axis. Type: [number ] Default: 0.0\nMSPACING: M Grid Spacing. Grid spacing on the M axis. Type: [number ] Default: 0.0\nOUTPUT: Snapped. Specify the output (snapped) layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef snap_points_to_grid():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/snapped_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'HSPACING': 1.0,\n        'VSPACING': 1.0,\n        'ZSPACING': 0.0,\n        'MSPACING': 0.0,\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:snappointstogrid', parameters)\n\n    snapped_layer = QgsVectorLayer(result['OUTPUT'], 'Snapped Points', 'ogr')\n    QgsProject.instance().addMapLayer(snapped_layer)\n\nsnap_points_to_grid()"
    },
    {
        "tool_id": "native:spatialiteexecutesql",
        "toolname": "spatialiteexecutesql",
        "tool_description": "Allows a SQL database query to be performed on a SpatiaLite database. The algorithm won\u2019t create a new layer: it is designed to run queries on the layer itself.",
        "parameters": "DATABASE: File Database. The SQLite/SpatiaLite database file to connect to. Type: [vector]\nSQL: \nSQL query. Defines the \nSQL query, for example \nUPDATE my_table \nSET field=10 .. Type: [string] Default: \u2018\u2019 outputs =\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef execute_sql_on_spatialite():\n    # Define the database and SQL query\n    database_path = 'D:/path_to_your_database.sqlite'\n    sql_query = \"\"\"UPDATE my_table SET field=10\"\n\n                                                            \n    parameters = {\n        'DATABASE': database_path,\n        'SQL': sql_query,\n                                                                              \n        'OUTPUT': 'D:/workspace_directory/output_results.sqlite'\n    }\n\n                                        \n    result = processing.run(\"native:spatialiteexecutesql\", parameters)\n    \n                                         \n    if result['OUTPUT']:\n        result_layer = QgsVectorLayer(result['OUTPUT'], 'Executed_SQL_Result', 'ogr')\n        QgsProject.instance().addMapLayer(result_layer)\n\n                      \nexecute_sql_on_spatialite()"
    },
    {
        "tool_id": "native:spatialiteexecutesqlregistered",
        "toolname": "spatialiteexecutesqlregistered",
        "tool_description": "Allows a SQL database query to be performed on a SpatiaLite database connected to QGIS. The algorithm won\u2019t create a new layer: it is designed to run queries on the layer itself.",
        "parameters": "DATABASE: Database. Select a SQLite/SpatiaLite database connected to the current session. Type: [enumeration] Default: not set\nSQL: \nSQL query. Defines the \nSQL query, for example \nUPDATE my_table \nSET field=10 .. Type: [string] Default: \u2018\u2019 outputs =\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef execute_sql():\n    # Define the database and SQL query\n    database_path = 'D:/database.sqlite'\n    query = \"\"\"UPDATE my_table SET field=10\"\n    output_path = 'D:/output.sql'\n\n                                                                     \n    parameters = {\n        'DATABASE': database_path,                                                                      \n        'SQL': query,                                     \n        'OUTPUT': output_path\n    }\n\n                                     \n    result = processing.run(\"native:spatialiteexecutesqlregistered\", parameters)\n\n                                  \nexecute_sql()"
    },
    {
        "tool_id": "native:splitfeaturesbycharacter",
        "toolname": "splitfeaturesbycharacter",
        "tool_description": "Features are split into multiple output features by splitting a field\u2019s value at a specified character. For instance, if a layer contains features with multiple comma separated values contained in a single field, this algorithm can be used to split these values up across multiple output features. Geometries and other attributes remain unchanged in the output. Optionally, the separator string can be a regular expression for added flexibility.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input Layer. Input vector layer. Type: [vector: any]\nFIELD: Split using values in the field. Field to use for splitting. Type: [tablefield: any]\nCHAR: Split value using character. Character to use for splitting. Type: [string]\nREGEX: Use regular expression separator. . Type: [boolean] Default: False\nOUTPUT: Split. Specify output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: Create temporary layer",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef split_features_by_character():\n    input_path = 'D:/Data/input_layer.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'FIELD': 'FieldName',\n        'CHAR': '-',\n        'REGEX': False,\n        'OUTPUT': output_path  # Options available: 'TEMPORARY_OUTPUT', 'Save to File\u2026', 'Save to Geopackage\u2026', 'Save to Database Table\u2026', 'Append to Layer\u2026'. Default: 'TEMPORARY_OUTPUT'\n    }\n\n    result = processing.run('native:splitfeaturesbycharacter', parameters)\n\n    split_layer = QgsVectorLayer(result['OUTPUT'], 'Split Features', 'ogr')\n    QgsProject.instance().addMapLayer(split_layer)\n\nsplit_features_by_character()"
    },
    {
        "tool_id": "native:splitlinesbylength",
        "toolname": "splitlinesbylength",
        "tool_description": "Takes a line (or curve) layer and splits each feature into multiple parts, where each part is of a specified maximum length. Z and M values at the start and end of the new line substrings are linearly interpolated from existing values.\nAllows features in-place modification of line features",
        "parameters": "INPUT: Input layer. The input line vector layer. Type: [vector: line]\nLENGTH: Maximum line length. The maximum length of a line in the output.. Type: [number ] Default: 10.0\nOUTPUT: Split. Specify the output line vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef split_lines_by_length():\n    # Define input and output paths\n    input_path = 'D:/Data/roads.shp'\n    output_path = 'C:/output_path/split_roads.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Roads', 'ogr')\n\n    # Run the Split Lines by Maximum Length algorithm\n    result = processing.run('native:splitlinesbylength', {\n        'INPUT': input_layer,\n        'LENGTH': 10,  # Default value is 10.0\n        'OUTPUT': output_path  # One of: Create Temporary Layer (TEMPORARY_OUTPUT), Save to File, Save to Geopackage, Save to Database Table, Append to Layer\n    })\n\n    # Load the split layer to QGIS\n    split_layer = QgsVectorLayer(result['OUTPUT'], 'Split Roads', 'ogr')\n    QgsProject.instance().addMapLayer(split_layer)\n\n# Execute the function\nsplit_lines_by_length()"
    },
    {
        "tool_id": "native:splitvectorlayer",
        "toolname": "splitvectorlayer",
        "tool_description": "Creates a set of vectors in an output folder based on an input layer and an attribute. The output folder will contain as many layers as the unique values found in the desired field.\nThe number of files generated is equal to the number of different values found for the specified attribute.\nIt is the opposite operation of merging.\nDefault menu: Vector \u25ba Data Management Tools",
        "parameters": "INPUT: Input Layer. Input vector layer. Type: [vector: any]\nFIELD: Unique \nID field. Field to use for splitting. Type: [tablefield: any] \nOUTPUT: Output directory. Specify the directory for the output layers.One of: Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Save to temporary folder] \nFILE_TYPE: Output file type Optional. Select the extension of the output files.If not specified or invalid, the output files format willbe the one set in the \u201cDefault output vector layer extension\u201dProcessing setting.. Type: [enumeration] Default: gpkg in the dialog window outputs = \nOUTPUT: Output directory. The directory for the output layers. Type: [folder] \nOUTPUT_LAYERS: Output layers. The output vector layers resulting from the split.. Type: [same as input] [list]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef split_vector_layer():\n    # Define input and output paths\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/split_layers'\n\n    # Load the input layer as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Split Vector Layer algorithm\n    result = processing.run('native:splitvectorlayer', {\n        'INPUT': input_layer,\n        'FIELD': 'ID_Field',  # specify the field name\n        'OUTPUT': output_path,\n        'FILE_TYPE': 0  # options may be: 0 for 'gpkg', 1 for 'shp', 2 for 'geojson'\n    })\n\n# Execute the function\nsplit_vector_layer()"
    },
    {
        "tool_id": "native:splitwithlines",
        "toolname": "splitwithlines",
        "tool_description": "Creates a set of vectors in an output folder based on an input layer and an attribute. The output folder will contain as many layers as the unique values found in the desired field.\nThe number of files generated is equal to the number of different values found for the specified attribute.\nIt is the opposite operation of merging.\nDefault menu: Vector \u25ba Data Management Tools",
        "parameters": "INPUT: Input Layer. Input vector layer. Type: [vector: any]\nFIELD: Unique \nID field. Field to use for splitting. Type: [tablefield: any] \nOUTPUT: Output directory. Specify the directory for the output layers.One of: Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Save to temporary folder] \nFILE_TYPE: Output file type Optional. Select the extension of the output files.If not specified or invalid, the output files format willbe the one set in the \u201cDefault output vector layer extension\u201dProcessing setting.. Type: [enumeration] Default: gpkg in the dialog window outputs = \nOUTPUT: Output directory. The directory for the output layers. Type: [folder] \nOUTPUT_LAYERS: Output layers. The output vector layers resulting from the split.. Type: [same as input] [list]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef split_vector_layer():\n    # Define input and output paths\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/split_layers'\n\n    # Load the input layer as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Split Vector Layer algorithm\n    result = processing.run('native:splitvectorlayer', {\n        'INPUT': input_layer,\n        'FIELD': 'ID_Field',  # specify the field name\n        'OUTPUT': output_path,\n        'FILE_TYPE': 0  # options may be: 0 for 'gpkg', 1 for 'shp', 2 for 'geojson'\n    })\n\n# Execute the function\nsplit_vector_layer()"
    },
    {
        "tool_id": "native:stdbscanclustering",
        "toolname": "stdbscanclustering",
        "tool_description": "Clusters point features based on a 2D implementation of spatiotemporal Density-based clustering of applications with noise (ST-DBSCAN) algorithm.",
        "parameters": "INPUT: Input layer. Layer to analyze. Type: [vector: point]\nDATETIME_FIELD: Date/time field. Field containing the temporal information. Type: [tablefield: date] \nMIN_SIZE: Minimum cluster size. Minimum number of features to generate a cluster. Type: [number] Default: 5 \nEPS: Maximum distance between clustered points. Distance beyond which two features can not belongto the same cluster (eps). Type: [number] Default: 1.0 \nEPS2: Maximum time duration between clustered points. Time duration beyond which two features can not belongto the same cluster (eps2).Available time units are milliseconds, seconds, minutes,hours, days and weeks.. Type: [number] Default: 0.0 (days) \nOUTPUT: Clusters. Specify the vector layer for the result of the clustering. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] \nDBSCAN*: Treat border points as noise \n(DBSCAN*) Optional. If checked, points on the border of a cluster arethemselves treated as unclustered points, and onlypoints in the interior of a cluster are tagged asclustered.. Type: [boolean] Default: False \nFIELD_NAME: Cluster field name. Name of the field where the associated cluster numbershall be stored. Type: [string] Default: \n\u2018CLUSTER_ID\u2019 \nSIZE_FIELD_NAME: Cluster size field name. Name of the field with the count of features in the same cluster. Type: [string] Default: \n\u2018CLUSTER_SIZE\u2019 outputs = \nOUTPUT: Clusters. Vector layer containing the original features with afield setting the cluster they belong to. Type: [vector: point] \nNUM_CLUSTERS: Number of clusters. The number of clusters discovered. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef run_stdbscanclustering():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/output_clusters.shp'\n    \n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n    \n    # Define the parameters dictionary\n    parameters = {\n        'INPUT': input_path,\n        'DATETIME_FIELD': 'timestamp',\n        'MIN_SIZE': 5,\n        'EPS': 1.0,\n        'EPS2': '0.0 (days)',\n        'OUTPUT': output_path,\n        'DBSCAN*': False,\n        'FIELD_NAME': 'CLUSTER_ID',\n        'SIZE_FIELD_NAME': 'CLUSTER_SIZE'\n    }\n    \n    # Run the stdbscanclustering algorithm\n    result = processing.run('native:stdbscanclustering', parameters)\n    \n    # Load the result layer to QGIS\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Standard DBSCAN Clusters', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nrun_stdbscanclustering()"
    },
    {
        "tool_id": "native:stringconcatenation",
        "toolname": "stringconcatenation",
        "tool_description": "Concatenates two strings into a single one in the Processing Modeler.",
        "parameters": "INPUT_1: Input 1. First string. Type: [string]\nINPUT_2: Input 2. Second string. Type: [string] outputs = \nCONCATENATION: Concatenation. The concatenated string. Type: [string]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef concatenate_strings(output_path):\n    parameters = {\n        'INPUT_1': 'First string',\n        'INPUT_2': 'Second string',\n        'OUTPUT': output_path\n    }\n    result = processing.run(\"\"\"native:stringconcatenation\", parameters)\n\n               \noutput_path = \"C:/Users/Output/concatenated_string.txt\"\nconcatenate_strings(output_path)"
    },
    {
        "tool_id": "native:stylefromproject",
        "toolname": "stylefromproject",
        "tool_description": "Extracts all style objects (symbols, color ramps, text formats and label settings) from a QGIS project.\nThe extracted symbols are saved to a QGIS style database ( XML format), which can be managed and imported via the Style Manager dialog.",
        "parameters": "INPUT: Input project (leave blank to use current) Optional.\nA \nQGIS project file to extract the style items from. Type: [file] \nOBJECTS: Objects to extract. Types of style items in the input project you would like toput in the new database. These can be: 0 \u2014 Symbols 1 \u2014 Color ramps 2 \u2014 Text formats 3 \u2014 Label settings. Type: [enumeration] [list] \nOUTPUT: Output style database. Specify the output \n.XML file for the selected style items.One of: Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nCOLORRAMPS: Color ramp count. Number of color ramps. Type: [number] \nLABELSETTINGS: Label settings count. Number of label settings. Type: [number] \nOUTPUT: Output style database. Output \n.XML file for the selected style items. Type: [file] \nSYMBOLS: Symbol count. Number of symbols. Type: [number] \nTEXTFORMATS: Text format count. Number of text formats. Type: [number]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef extract_style_from_project():\n    # Define the output path for the style database\n    output_path = \"\"\"C:/Users/Output/style_database.xml\"\n    \n                                                    \n    parameters = {\n        'INPUT': '',                                                \n        'OBJECTS': [0, 1, 2, 3],                                                                                        \n        'OUTPUT': output_path                         \n    }\n    \n                                        \n    result = processing.run(\"native:stylefromproject\", parameters)\n\n                      \nextract_style_from_project()"
    },
    {
        "tool_id": "native:subdivide",
        "toolname": "subdivide",
        "tool_description": "Subdivides the geometry. The returned geometry will be a collection containing subdivided parts from the original geometry, where no part has more than the specified maximum number of nodes.\nThis is useful for dividing a complex geometry into less complex parts, easier to spatially index and faster to perform spatial operations. Curved geometries will be segmentized before subdivision.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nMAX_NODES: Maximum nodes in parts. Maximum number of vertices each newgeometry part is allowed to have.Fewer sub-parts for higher values.. Type: [number ] Default: 256\nOUTPUT: Subdivided. Specify the output (subdivided) vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef subdivide_layer():\n    input_path = 'D:/Data/InputData.shp'\n    output_path = 'C:/output_path/subdivided_output.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,  # Input layer\n        'MAX_NODES': 256,  # Maximum nodes in parts\n        'OUTPUT': output_path  # Specify the output layer\n    }\n\n    result = processing.run('native:subdivide', parameters)\n\n    subdivided_layer = QgsVectorLayer(result['OUTPUT'], 'Subdivided Layer', 'ogr')\n    QgsProject.instance().addMapLayer(subdivided_layer)\n\nsubdivide_layer()"
    },
    {
        "tool_id": "native:sumlinelengths",
        "toolname": "sumlinelengths",
        "tool_description": "Takes a polygon layer and a line layer and measures the total length of lines and the total number of them that cross each polygon.\nThe resulting layer has the same features as the input polygon layer, but with two additional attributes containing the length and count of the lines across each polygon.\nAllows features in-place modification of polygon features\nDefault menu: Vector \u25ba Analysis Tools",
        "parameters": "LINES: Lines. Input vector line layer. Type: [vector: line]\nPOLYGONS: Polygons. Polygon vector layer. Type: [vector: polygon]\nLEN_FIELD: Lines length field name. Name of the field for the lines length. Type: [string] Default: \u2018LENGTH\u2019\nCOUNT_FIELD: Lines count field name. Name of the field for the lines count. Type: [string] Default: \u2018COUNT\u2019\nOUTPUT: Line length. Specify the output polygon layer with generated statistics. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef sum_line_lengths():\n    input_lines_path = 'input_lines.shp'\n    input_polygons_path = 'input_polygons.shp'\n    output_path = 'output_polygons.shp'\n\n    input_lines_layer = QgsVectorLayer(input_lines_path, 'Input Lines', 'ogr')\n    input_polygons_layer = QgsVectorLayer(input_polygons_path, 'Input Polygons', 'ogr')\n\n    parameters = {\n        'LINES': input_lines_path,  # Input vector line layer. Type: [vector: line]\n        'POLYGONS': input_polygons_path,  # Polygon vector layer. Type: [vector: polygon]\n        'LEN_FIELD': 'LENGTH',  # Name of the field for the lines length. Type: [string] Default: \u2018LENGTH\u2019\n        'COUNT_FIELD': 'COUNT',  # Name of the field for the lines count. Type: [string] Default: \u2018COUNT\u2019\n        'OUTPUT': output_path  # Specify the output polygon layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here. Type: [vector: polygon] Default: [Create temporary layer]\n    }\n\n    result = processing.run('native:sumlinelengths', parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Line Lengths Summary', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nsum_line_lengths()"
    },
    {
        "tool_id": "native:swapxy",
        "toolname": "swapxy",
        "tool_description": "Switches the X and Y coordinate values in input geometries.\nIt can be used to repair geometries which have accidentally had their latitude and longitude values reversed.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nOUTPUT: Swapped. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef swap_xy_coordinates():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Define parameters for native:swapxy\n    parameters = {\n        'INPUT': input_path,\n        'OUTPUT': output_path  # Create Temporary Layer (TEMPORARY_OUTPUT), Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    }\n\n    result = processing.run('native:swapxy', parameters)\n\n    swapped_layer = QgsVectorLayer(result['OUTPUT'], 'Swapped Layer', 'ogr')\n    QgsProject.instance().addMapLayer(swapped_layer)\n\nswap_xy_coordinates()"
    },
    {
        "tool_id": "native:symmetricaldifference",
        "toolname": "symmetricaldifference",
        "tool_description": "Switches the X and Y coordinate values in input geometries.\nIt can be used to repair geometries which have accidentally had their latitude and longitude values reversed.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. The input vector layer. Type: [vector: any]\nOUTPUT: Swapped. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef swap_xy_coordinates():\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Define parameters for native:swapxy\n    parameters = {\n        'INPUT': input_path,\n        'OUTPUT': output_path  # Create Temporary Layer (TEMPORARY_OUTPUT), Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    }\n\n    result = processing.run('native:swapxy', parameters)\n\n    swapped_layer = QgsVectorLayer(result['OUTPUT'], 'Swapped Layer', 'ogr')\n    QgsProject.instance().addMapLayer(swapped_layer)\n\nswap_xy_coordinates()"
    },
    {
        "tool_id": "native:taperedbuffer",
        "toolname": "taperedbuffer",
        "tool_description": "Creates tapered buffer along line geometries, using a specified start and end buffer diameter.",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nSTART_WIDTH: Start width. Represents the radius of the buffer appliedat the start point of the line feature. Type: [number ] Default: 0.0 \nEND_WIDTH: End width. Represents the radius of the buffer appliedat the end point of the line feature.. Type: [number ] Default: 0.0 \nSEGMENTS: Segments. Controls the number of line segments to use to approximatea quarter circle when creating rounded offsets.. Type: [number ] Default: 16 \nOUTPUT: Buffered. Specify the output (buffer) layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Buffered. Output (buffer) polygon layer. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef tapered_buffer():\n    input_path = \"\"\"D:/Data/InputLineLayer.shp\"\n    output_path = \"D:/Output/BufferedLayer.shp\"\n\n    input_layer = QgsVectorLayer(input_path, \"Input Line Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_path,\n        'START_WIDTH': 0.0,\n        'END_WIDTH': 0.0,\n        'SEGMENTS': 16,\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:taperedbuffer', parameters)\n\n    buffered_layer = QgsVectorLayer(result['OUTPUT'], 'Buffered Layer', 'ogr')\n    QgsProject.instance().addMapLayer(buffered_layer)\n\ntapered_buffer()"
    },
    {
        "tool_id": "native:tilesxyzdirectory",
        "toolname": "tilesxyzdirectory",
        "tool_description": "Generates raster \u201cXYZ\u201d tiles using the current QGIS project as individual images to a directory structure.\nOptionally, a Leaflet HTML output file using the generated tiles as a map layer could be created.",
        "parameters": "EXTENT: Extent (xmin, xmax, ymin, ymax). Specify the extent of the tiles.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nZOOM_MIN: Minimum zoom. Minimum 0, maximum 25.. Type: [number] Default: 12 \nZOOM_MAX: Maximum zoom. Minimum 0, maximum 25.. Type: [number] Default: 12 \nDPI: \nDPI. Minimum 48, maximum 600.. Type: [number] Default: 96 \nBACKGROUND_COLOR: Background color Optional. Choose the background color for the tiles. Type: [color] Default: QColor(0, 0, 0, 0) \nANTIALIAS: Enable antialiasing. Determines if antialiasing should be enabled. Type: [boolean] Default: True \nTILE_FORMAT: Tile format. One of: 0 \u2014 \nPNG 1 \u2014 \nJPG. Type: [enumeration] Default: 0 \nQUALITY: Quality \n(JPG only) Optional. Minimum 1, maximum 100.. Type: [number] Default: 75 \nMETATILESIZE: Metatile size Optional. Specify a custom metatile size when generating \nXYZ tiles.Larger values may speed up the rendering of tiles and providebetter labelling (fewer gaps without labels) at the expense ofusing more memory.Minimum 1, maximum 20.. Type: [number] Default: 4 \nTILE_WIDTH: Tile width Optional. Minimum 1, maximum 4096.. Type: [number] Default: 256 \nTILE_HEIGHT: Tile height Optional. Minimum 1, maximum 4096.. Type: [number] Default: 256 \nTMS_CONVENTION: Use inverted tile \nY axis \n(TMS conventions) Optional. . Type: [boolean] Default: False \nOUTPUT_DIRECTORY: Output directory Optional. Specification of the output directory (for the tiles). One of: Skip Output Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Save to temporary folder] \nOUTPUT_HTML: Output html (Leaflet) Optional. Specification of the output \nHTML file. One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] \nHTML_TITLE: Leaflet \nHTML output title Optional. \nHTML <title>-tag used for the Leaflet \nHTML output file.. Type: [string] Default: Not set \nHTML_ATTRIBUTION: Leaflet \nHTML output attribution Optional. Custom map attribution used for the Leaflet \nHTML output file.HTML links are possible.. Type: [string] Default: Not set \nHTML_OSM: Include OpenStreetMap basemap in Leaflet \nHTML output Optional. An OpenStreetMap basemap layer (source: https://tile.openstreetmap.org )is included in the Leaflet \nHTML output file. Proper map attribution isadded automatically.. Type: [boolean] Default: False outputs = \nOUTPUT_DIRECTORY: Output directory. Output directory (for the tiles). Type: [folder] \nOUTPUT_HTML: Output html (Leaflet). The output \nHTML (Leaflet) file. Type: [html]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsProject\nimport processing\n\ndef generate_xyz_tiles():\n    # Define the output directory path\n    output_directory = 'C:/Output_tiles'\n   \n    # Set parameters for the tiles generation process\n    tile_params = {\n        'EXTENT': 'xmin,xmax,ymin,ymax',  # Replace placeholders with actual values or method to determine extent\n        'ZOOM_MIN': 12,\n        'ZOOM_MAX': 12,\n        'DPI': 96,\n        'BACKGROUND_COLOR': None,\n        'ANTIALIAS': True,\n        'TILE_FORMAT': 0,  # Available options: 0 \u2014 PNG, 1 \u2014 JPG\n        'QUALITY': None,\n        'METATILESIZE': None,\n        'TILE_WIDTH': None,\n        'TILE_HEIGHT': None,\n        'TMS_CONVENTION': None,\n        'OUTPUT_DIRECTORY': output_directory,\n        'OUTPUT_HTML': None,\n        'HTML_TITLE': None,\n        'HTML_ATTRIBUTION': None,\n        'HTML_OSM': None\n    }\n    \n    # Run the tiles generation algorithm\n    processing.run(\"\"\"native:tilesxyzdirectory\", tile_params)\n\n                      \ngenerate_xyz_tiles()"
    },
    {
        "tool_id": "native:tilesxyzmbtiles",
        "toolname": "tilesxyzmbtiles",
        "tool_description": "Generates raster \u201cXYZ\u201d tiles using the current QGIS project as a single file in the \u201cMBTiles\u201d format.",
        "parameters": "EXTENT: Extent (xmin, xmax, ymin, ymax). Specify the extent of the tiles.It will internally be extended to a multiple of the tile size. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nZOOM_MIN: Minimum zoom. Minimum 0, maximum 25.. Type: [number] Default: 12 \nZOOM_MAX: Maximum zoom. Minimum 0, maximum 25.. Type: [number] Default: 12 \nDPI: \nDPI. Minimum 48, maximum 600.. Type: [number] Default: 96 \nBACKGROUND_COLOR: Background color Optional. Choose the background color for the tiles. Type: [color] Default: QColor(0, 0, 0, 0) \nANTIALIAS: Enable antialiasing. Determines if antialiasing should be enabled. Type: [boolean] Default: True \nTILE_FORMAT: Tile format. One of: 0 \u2014 \nPNG 1 \u2014 \nJPG. Type: [enumeration] Default: 0 \nQUALITY: Quality \n(JPG only) Optional. Minimum 1, maximum 100.. Type: [number] Default: 75 \nMETATILESIZE: Metatile size Optional. Specify a custom metatile size when generating \nXYZ tiles.Larger values may speed up the rendering of tiles and providebetter labelling (fewer gaps without labels) at the expense ofusing more memory.Minimum 1, maximum 20.. Type: [number] Default: 4 \nOUTPUT_FILE: Output file (for MBTiles). Specification of the output file. One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [file] Default: [Save to temporary file] outputs = \nOUTPUT_FILE: Output file (for MBTiles). The output file.. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef generate_xyz_tiles():\n    output_path = \"\"\"C:/Users/Output/tiles.mbtiles\"\n    \n    parameters = {\n        'EXTENT': 'xmin, xmax, ymin, ymax',                                                                                                                                             \n        'ZOOM_MIN': 12,\n        'ZOOM_MAX': 12,\n        'DPI': 96,\n        'BACKGROUND_COLOR': None,\n        'ANTIALIAS': True,\n        'TILE_FORMAT': 0,                             \n        'QUALITY': None,\n        'METATILESIZE': None,\n        'OUTPUT_FILE': output_path\n    }\n    \n    result = processing.run(\"native:tilesxyzmbtiles\", parameters)\n    QgsProject.instance().addMapLayer(result['OUTPUT'])\n\ngenerate_xyz_tiles()"
    },
    {
        "tool_id": "native:tinmeshcreation",
        "toolname": "tinmeshcreation",
        "tool_description": "Creates a TIN mesh layer from vector layers. The TIN mesh is created using a Delaunay triangulation.",
        "parameters": "SOURCE_DATA: Input layers. Vector layers to combine to generate the mesh layer. Type: [vector: any] [list]\nGUI \nONLY: Vector layer. \nA selector for the vector layers to combine to generate the mesh layer. Type: [vector: any] [list] \nGUI \nONLY: Value on vertex. \nA selector of the field to use from the selected layer.Each vertex is assigned the corresponding value of its original feature.. Type: [tablefield: any] \nGUI \nONLY: Use Z-coordinate for value on vertex. If checked, the \nZ value of vector layer points or polygons/lines verticeswill be used to assign the \nZ value of the vertex mesh layer.Only available if the input layers are \n3D.. Type: [boolean] Default: False \nMESH_FORMAT: Output format. Output format of the generated layer 0 \u2014 \n2DM 1 \u2014 \nSELAFIN 2 \u2014 \nPLY 3 \u2014 Ugrid. Type: [enumeration] Default: \n2DM \nCRS_OUTPUT: Output coordinate system Optional. Coordinate Reference System to assign to the output. Type: [crs] \nOUTPUT_MESH: Output file. Specification of the output file. One of: Save to a Temporary File Save to File\u2026. Type: [mesh] Default: [Save to temporary file] outputs = \nOUTPUT_MESH: Output file. Output mesh layer with dataset values computedfrom the vector layers.. Type: [mesh]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef create_mesh():\n    # Define the input and output paths\n    input_layers = ['path/to/input1.shp', 'path/to/input2.shp']\n    output_path = \"\"\"path/to/output_mesh.mesh\"\n\n                           \n    input_layer_objects = [QgsVectorLayer(path, \"Input Layer\", \"ogr\") for path in input_layers]\n    \n                                           \n    mesh_params = {\n        'SOURCE_DATA': input_layers,\n        'GUI ONLY: Value on vertex': 'field_name',\n        'GUI ONLY: Use Z-coordinate for value on vertex': False,                 \n        'MESH_FORMAT': 0,                                            \n        'CRS_OUTPUT': None,                                           \n        'OUTPUT_MESH': output_path\n    }\n\n                                   \n    result = processing.run(\"native:tinmeshcreation\", mesh_params)\n\n                                 \n    mesh_layer = QgsVectorLayer(output_path, 'Mesh Output', 'ogr')\n    QgsProject.instance().addMapLayer(mesh_layer)\n\n                  \ncreate_mesh()"
    },
    {
        "tool_id": "native:transect",
        "toolname": "transect",
        "tool_description": "Creates transects on vertices for (multi)linestring.\nA transect is a line oriented from an angle (by default perpendicular) to the input polylines (at vertices).\nField(s) from feature(s) are returned in the transect with these new fields:",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nLENGTH: Length of the transect. Length in map unit of the transect. Type: [number ] Default: 5.0\nANGLE: Angle in degrees from the original line at the vertices. Change the angle of the transect. Type: [number ] Default: 90.0\nSIDE: Side to create the transect. Choose the side of the transect. Available options are: 0 \u2014 Left 1 \u2014 Right 2 \u2014 Both. Type: [enumeration]\nOUTPUT: Transect. Specify the output line layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_transects():\n    input_layer_path = 'D:/Data/LineData.shp'\n    output_path = 'C:/output_path/transects_layer.shp'\n\n    input_layer = QgsVectorLayer(input_layer_path, 'Transects Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'LENGTH': 5.0,\n        'ANGLE': 90.0,\n        'SIDE': 2,  # 0: Left, 1: Right, 2: Both\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('native:transect', parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Transects', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ngenerate_transects()"
    },
    {
        "tool_id": "native:transferannotationsfrommain",
        "toolname": "transferannotationsfrommain",
        "tool_description": "Transfers all annotations from the main annotation layer in a project to a new annotation layer. Items placement can then be adjusted within the layer stack.",
        "parameters": "LAYER_NAME: New layer name. Name of the annotations layer to create. Type: [string] Default: \u2018Annotations\u2019 outputs =\nOUTPUT: New layer name. \nA layer with items from the main annotation layer. Type: [layer]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef transfer_annotations_from_main(output_path):\n    # Define the parameters\n    parameters = {\n        'LAYER_NAME': 'Annotations',\n        'OUTPUT': output_path\n    }\n    # Perform the transfer annotations operation\n    result = processing.run(\"\"\"native:transferannotationsfrommain\", parameters)\n                                    \n    annotations_layer = QgsProject.instance().mapLayersByName('Annotations')[0]\n    QgsProject.instance().addMapLayer(annotations_layer)\n\n                        \noutput_layer_path = \"D:/output_directory/annotations_layer.shp\"\ntransfer_annotations_from_main(output_layer_path)"
    },
    {
        "tool_id": "native:translategeometry",
        "toolname": "translategeometry",
        "tool_description": "Moves the geometries within a layer, by offsetting with a predefined X and Y displacement.\nZ and M values present in the geometry can also be translated.\nAllows features in-place modification of point, line, and polygon features",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nDELTA_X: Offset distance (x-axis). Displacement to apply on the X axis. Type: [number ] Default: 0.0\nDELTA_Y: Offset distance (y-axis). Displacement to apply on the Y axis. Type: [number ] Default: 0.0\nDELTA_Z: Offset distance (z-axis). Displacement to apply on the Z axis. Type: [number ] Default: 0.0\nDELTA_M: Offset distance (m values). Displacement to apply on the M axis. Type: [number ] Default: 0.0\nOUTPUT: Translated. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef translate_geometry():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'C:/output_path/translated_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Translate Geometry algorithm\n    result = processing.run('native:translategeometry', {\n        'INPUT': input_layer,\n        'DELTA_X': 10.0,\n        'DELTA_Y': 20.0,\n        'DELTA_Z': 0.0,\n        'DELTA_M': 0.0,\n        'OUTPUT': output_path\n    })\n\n    # Load the translated layer to QGIS\n    translated_layer = QgsVectorLayer(result['OUTPUT'], 'Translated Layer', 'ogr')\n    QgsProject.instance().addMapLayer(translated_layer)\n\n# Execute the function\ntranslate_geometry()"
    },
    {
        "tool_id": "native:truncatetable",
        "toolname": "truncatetable",
        "tool_description": "Truncates a layer, by deleting all features from within the layer.",
        "parameters": "INPUT: Input Layer. Input vector layer. Type: [vector: any]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef truncate_table():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'D:/output_path/truncated_layer.shp'\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the truncate table algorithm\n    result = processing.run('native:truncatetable', {\n        'INPUT': input_layer\n    })\n\n# Execute the function\ntruncate_table()"
    },
    {
        "tool_id": "native:union",
        "toolname": "union",
        "tool_description": "Truncates a layer, by deleting all features from within the layer.",
        "parameters": "INPUT: Input Layer. Input vector layer. Type: [vector: any]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef truncate_table():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    output_path = 'D:/output_path/truncated_layer.shp'\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the truncate table algorithm\n    result = processing.run('native:truncatetable', {\n        'INPUT': input_layer\n    })\n\n# Execute the function\ntruncate_table()"
    },
    {
        "tool_id": "native:uploadgpsdata",
        "toolname": "uploadgpsdata",
        "tool_description": "Uses the GPSBabel tool to upload data to a GPS device from the GPX standard format.",
        "parameters": "INPUT: Input file.\n.GPX file containing the data to upload. Type: [file] \nDEVICE: Device. The \nGPS device you would like to upload the data to.Must be declared in \nGPS Settings dialog.. Type: [enumeration] Default: Garmin serial \nPORT: Port. The port the device is connected to.Available ports depend on the \nOS.. Type: [enumeration] \nFEATURE_TYPE: Feature type. The type of data to upload 0 \u2014 Waypoints 1 \u2014 Routes 2 \u2014 Tracks. Type: [enumeration] Default: 0 outputs =\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject\n\ndef upload_gps_data():\n    input_gpx_path = 'C:/Data/input_file.gpx'\n    output_path =  '''    parameters = {\n        'INPUT': input_gpx_path,  # GPX file path\n        'DEVICE': 0,  # Devices: ['0': 'Garmin serial', '1': 'Garmin USB', ...]\n        'PORT': '',  # Ports depend on the OS\n        'FEATURE_TYPE': 0,  # Feature type: ['0': 'Waypoints', '1': 'Routes', '2': 'Tracks']\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"\"\"native:uploadgpsdata\", parameters)\n\nupload_gps_data()"
    },
    {
        "tool_id": "native:virtualrastercalc",
        "toolname": "virtualrastercalc",
        "tool_description": "Performs algebraic operations using raster layers and generates in-memory result.\nThe resulting layer will have its values computed according to an expression. The expression can contain numerical values, operators and references to any of the layers in the current project.\nA virtual raster layer is a raster layer defined by its URI and whose pixels are calculated on-the-fly. It\u2019s not a new file on disk; the virtual layer is still connected to the rasters used in the calculation meaning that deleting or moving these rasters would break it. A Layer name can be provided, otherwise the calculation expression is used as such. Removing the virtual layer from the project deletes it, and it can be made persistent in file using the layer Export \u25ba Save as\u2026 contextual menu.",
        "parameters": "INPUT: Input layers. List of input raster layers. Type: [raster] [list]\nEXPRESSION: Expression. Raster-based expression that will be used to calculate the output raster layer.. Type: [expression]\nEXTENT: Output extent Optional. Specify the spatial extent of the output raster layer.If the extent is not specified, the minimum extent that coversall the selected reference layers will be used. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nCELLSIZE: Output cell size (leave empty to set automatically) Optional. Cell size of the output raster layer.If the cell size is not specified, the minimum cell size ofthe selected reference layer(s) will be used.The cell size will be the same for the X and Y axes.. Type: [number]\nCRS: Output CRS Optional. CRS of the output raster layer.If the output CRS is not specified, the CRS of the firstreference layer will be used.. Type: [crs]\nLAYER_NAME: Output layer name Optional. The name to assign to the generated layer.If not set, the text of the calculation expression is used.. Type: [string]",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsRasterLayer\n\ndef virtual_raster_calc():\n    input_layers = ['path/to/raster1.tif', 'path/to/raster2.tif']  # List of raster paths\n    output_path = 'path/to/output_raster.tif'\n    \n    parameters = {\n        'INPUT': input_layers,\n        'EXPRESSION': 'raster1@1 + raster2@1',  # Example expression using raster band 1\n        'EXTENT': '16.0, 17.0, 45.0, 46.0',  # xmin, xmax, ymin, ymax\n        'CELLSIZE': 10.0,  # Cell size in units of raster CRS\n        'CRS': 'EPSG:4326',  # Coordinate reference system\n        'LAYER_NAME': 'Calculation Result',  # Optional layer name\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run('native:virtualrastercalc', parameters)\n    \n    output_layer = QgsRasterLayer(result['OUTPUT'], 'Virtual Raster Calculation')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nvirtual_raster_calc()"
    },
    {
        "tool_id": "native:voronoipolygons",
        "toolname": "voronoipolygons",
        "tool_description": "Takes a point layer and generates a polygon layer containing the Voronoi polygons (known also as Thiessen polygons) corresponding to those input points.\nAny location within a Voronoi polygon is closer to the associated point than to any other point.\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input point vector layer. Type: [vector: point]\nBUFFER: Buffer region (% of extent). The extent of the output layer will be this muchbigger than the extent of the input layer. Type: [number] Default: 0.0\nTOLERANCE: Tolerance Optional. Specifies an optional snapping tolerance which can be used to improve the robustness of the voronoi.. Type: [number] Default: 0.0\nCOPY_ATTRIBUTES: Copy attributes from input features. Specifies whether fields storing involved point features ID should be added to the output.If False, an id field is created to identify the polygons.. Type: [boolean] Default: True\nOUTPUT: Voronoi polygons. Specify the output layer (with the Voronoi polygons).One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_voronoi_polygons():\n    # Define input and output paths\n    input_path = 'D:/Data/Points.shp'\n    output_path = 'C:/output_path/voronoi_polygons.shp'\n\n    # Load the point vector layer\n    input_layer = QgsVectorLayer(input_path, 'Points', 'ogr')\n\n    # Run the Voronoi polygons algorithm\n    result = processing.run('native:voronoipolygons', {\n        'INPUT': input_layer,\n        'BUFFER': 0.0,  # Default value\n        'TOLERANCE': 0.0,  # Default value\n        'COPY_ATTRIBUTES': True,  # Default value\n        'OUTPUT': output_path\n    })\n\n    # Load the Voronoi polygons layer to QGIS\n    voronoi_layer = QgsVectorLayer(result['OUTPUT'], 'Voronoi Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(voronoi_layer)\n\n# Execute the function\ncreate_voronoi_polygons()"
    },
    {
        "tool_id": "native:wedgebuffers",
        "toolname": "wedgebuffers",
        "tool_description": "Creates wedge shaped buffers from input points.\nThe native output from this algorithm are CurvePolygon geometries, but these may be automatically segmentized to Polygons depending on the output format.",
        "parameters": "INPUT: Input layer. Input point vector layer. Type: [vector: point]\nAZIMUTH: Azimuth (degrees from North). Angle (in degrees) as the middle value of the wedge. Type: [number ] Default: 0.0\nWIDTH: Wedge width (in degrees). Width (in degrees) of the buffer.The wedge will extend to half of the angular width either sideof the azimuth direction. Fig. 28.74 Azimuth and width values of the wedge buffer \uf0c1. Type: [number ] Default: 45.0\nOUTER_RADIUS: Outer radius. The outer size (length) of the wedge:the size is meant from the source point to the edge of thewedge shape.. Type: [number ] Default: 1.0\nINNER_RADIUS: Inner radius Optional. Inner radius value.If 0 the wedge will begin from the source point.. Type: [number ] Default: 0.0\nOUTPUT: Buffers. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_wedge_buffers():\n    input_path = 'D:/Data/InputPoints.shp'\n    output_path = 'C:/output_path/wedge_buffers.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'AZIMUTH': 0.0,\n        'WIDTH': 45.0,\n        'OUTER_RADIUS': 1.0,\n        'INNER_RADIUS': 0.0,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run('native:wedgebuffers', parameters)\n    \n    wedge_buffers_layer = QgsVectorLayer(result['OUTPUT'], 'Wedge Buffers', 'ogr')\n    QgsProject.instance().addMapLayer(wedge_buffers_layer)\n\ngenerate_wedge_buffers()"
    },
    {
        "tool_id": "native:writevectortiles_mbtiles",
        "toolname": "writevectortiles_mbtiles",
        "tool_description": "Exports one or more vector layers to vector tiles, a data format optimized for fast map rendering and small data size.\nMBTiles is a specification for storing tiled map data in SQLite databases for immediate usage and for transfer. MBTiles files are known as tilesets.",
        "parameters": "INPUT: Input layers.\nA list of layers to combine to generate the vector tiles. Type: [vector: any] [list] \nMIN_ZOOM: Minimum zoom level. The lowest zoom level for which the tileset provides data.Set between 0 and 24.. Type: [number] Default: 0 \nMAX_ZOOM: Maximum zoom level. The highest zoom level for which the tileset provides data.Set between 0 and 24.. Type: [number] Default: 3 \nEXTENT: Extent Optional. The maximum extent of the rendered map area.Bounds must define an area covered by all zoom levels.. Type: [extent] Default: Not set \nMETA_NAME: Metadata: Name Optional. Name of the tileset. Type: [string] \nMETA_DESCRIPTION: Metadata: Description Optional. \nA description of the tileset\u2019s contents. Type: [string] \nMETA_ATTRIBUTION: Metadata: Attribution Optional. An attribution string, which explains the sources of data and/or style for the map.. Type: [string] \nMETA_VERSION: Metadata: Version Optional. The version of the tileset.This refers to a revision of the tileset itself, not of the MBTiles specification.. Type: [string] \nMETA_TYPE: Metadata: Type Optional. Type of tileset. Possible values are overlay or baselayer .. Type: [string] \nMETA_CENTER: Metadata: Center Optional. The center (string of comma-separated numbers: the longitude, latitude, and zoom level)of the default view of the map. Example: -122.1906,37.7599,11. Type: [string] \nOUTPUT: Destination MBTiles. Specification of the output MBTiles file. One of: Save to a Temporary File Save to File\u2026. Type: [vector tiles] Default: [Save to temporary file] outputs = \nOUTPUT: Destination MBTiles. Output vector tiles .mbtiles file.. Type: [file]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef write_vector_tiles_mbtiles():\n    input_path_1 = 'path/to/input_layer_1.shp'\n    input_path_2 = 'path/to/input_layer_2.shp'\n    output_path = 'path/to/output.mbtiles'\n\n    # Load the input layers\n    input_layer_1 = QgsVectorLayer(input_path_1, \"\"\"Layer 1\", \"ogr\")\n    input_layer_2 = QgsVectorLayer(input_path_2, \"Layer 2\", \"ogr\")\n\n                           \n    parameters = {\n        'INPUT': [input_path_1, input_path_2],                        \n        'MIN_ZOOM': 0,              \n        'MAX_ZOOM': 3,              \n        'EXTENT': None,                             \n        'META_NAME': '',            \n        'META_DESCRIPTION': '',            \n        'META_ATTRIBUTION': '',            \n        'META_VERSION': '',            \n        'META_TYPE': '',                                                \n        'META_CENTER': '',            \n        'OUTPUT': output_path                                                    \n    }\n\n                         \n    result = processing.run(\"native:writevectortiles_mbtiles\", parameters)\n\nwrite_vector_tiles_mbtiles()"
    },
    {
        "tool_id": "native:writevectortiles_xyz",
        "toolname": "writevectortiles_xyz",
        "tool_description": "Exports one or more vector layers to vector tiles, a data format optimized for fast map rendering and small data size.",
        "parameters": "XYZ_TEMPLATE: File template. Template to generate the vector tiles url. Type: [string] Default: \u2018{z}/{x}/{y}.pbf\u2019\nINPUT: Input layers. \nA list of layers to combine to generate the vector tiles. Type: [vector: any] [list] \nMIN_ZOOM: Minimum zoom level. The lowest zoom level for which the tileset provides data.Set between 0 and 24.. Type: [number] Default: 0 \nMAX_ZOOM: Maximum zoom level. The highest zoom level for which the tileset provides data.Set between 0 and 24.. Type: [number] Default: 3 \nEXTENT: Extent Optional. The maximum extent of the rendered map area.Bounds must define an area covered by all zoom levels.. Type: [extent] Default: Not set \nOUTPUT_DIRECTORY: Output directory. Specification of the output vector tiles folder. One of: Save to a Temporary Directory Save to Directory. Type: [folder] Default: [Save to temporary folder] outputs = \nOUTPUT_DIRECTORY: Output directory. \nA folder containing different subsets of the vector tiles files( .pbf ) stored in subfolders corresponding to the zoom levels.. Type: [folder]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_vector_tiles():\n    input_layers = ['path/to/layer1.shp', 'path/to/layer2.shp']  # Example paths to the input layers\n    output_directory = 'C:/path_to_output_directory'\n\n    parameters = {\n        'XYZ_TEMPLATE': '{z}/{x}/{y}.pbf',  # String template\n        'INPUT': input_layers,  # List of vector layers\n        'MIN_ZOOM': 0,  # Minimum zoom level\n        'MAX_ZOOM': 3,  # Maximum zoom level\n        'EXTENT': '',  # Optional - set empty\n        'OUTPUT_DIRECTORY': output_directory  # Output directory\n    }\n    result = processing.run(\"\"\"native:writevectortiles_xyz\", parameters)\n\n                      \ngenerate_vector_tiles()"
    },
    {
        "tool_id": "native:zonalhistogram",
        "toolname": "zonalhistogram",
        "tool_description": "Appends fields representing counts of each unique value from a raster layer contained within polygon features.\nThe output layer attribute table will have as many fields as the unique values of the raster layer that intersects the polygon(s).",
        "parameters": "INPUT_RASTER: Raster layer. Input raster layer.. Type: [raster]\nRASTER_BAND: Band number. If the raster is multiband, choose a band.. Type: [raster band] Default: The first band of the input layer\nINPUT_VECTOR: Vector layer containing zones. Vector polygon layer that defines the zones.. Type: [vector: polygon]\nCOLUMN_PREFIX Optional: Output column prefix. Prefix for the output columns names.. Type: [string] Default: \u2018HISTO_\u2019\nOUTPUT: Output zones. Specify the output vector polygon layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\n\ndef zonal_histogram():\n    input_raster_path = 'D:/Data/InputRaster.tif'\n    input_vector_path = 'D:/Data/Zones.shp'\n    output_path = 'C:/output_path/Zonal_Histogram.shp'\n\n    input_raster = QgsRasterLayer(input_raster_path, 'Input Raster')\n    input_vector = QgsVectorLayer(input_vector_path, 'Zones', 'ogr')\n\n    parameters = {\n        'INPUT_RASTER': input_raster,\n        'RASTER_BAND': 1, # Default is the first band\n        'INPUT_VECTOR': input_vector,\n        'COLUMN_PREFIX': 'HISTO_',\n        'OUTPUT': output_path  # Options: 'TEMPORARY_OUTPUT' | Save to File... | Save to Geopackage... | Save to Database Table...\n    }\n\n    result = processing.run('native:zonalhistogram', parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Zonal Histogram', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nzonal_histogram()"
    },
    {
        "tool_id": "native:zonalstatistics",
        "toolname": "zonalstatistics",
        "tool_description": "Appends fields representing counts of each unique value from a raster layer contained within polygon features.\nThe output layer attribute table will have as many fields as the unique values of the raster layer that intersects the polygon(s).",
        "parameters": "INPUT_RASTER: Raster layer. Input raster layer.. Type: [raster]\nRASTER_BAND: Band number. If the raster is multiband, choose a band.. Type: [raster band] Default: The first band of the input layer\nINPUT_VECTOR: Vector layer containing zones. Vector polygon layer that defines the zones.. Type: [vector: polygon]\nCOLUMN_PREFIX Optional: Output column prefix. Prefix for the output columns names.. Type: [string] Default: \u2018HISTO_\u2019\nOUTPUT: Output zones. Specify the output vector polygon layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\n\ndef zonal_histogram():\n    input_raster_path = 'D:/Data/InputRaster.tif'\n    input_vector_path = 'D:/Data/Zones.shp'\n    output_path = 'C:/output_path/Zonal_Histogram.shp'\n\n    input_raster = QgsRasterLayer(input_raster_path, 'Input Raster')\n    input_vector = QgsVectorLayer(input_vector_path, 'Zones', 'ogr')\n\n    parameters = {\n        'INPUT_RASTER': input_raster,\n        'RASTER_BAND': 1, # Default is the first band\n        'INPUT_VECTOR': input_vector,\n        'COLUMN_PREFIX': 'HISTO_',\n        'OUTPUT': output_path  # Options: 'TEMPORARY_OUTPUT' | Save to File... | Save to Geopackage... | Save to Database Table...\n    }\n\n    result = processing.run('native:zonalhistogram', parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Zonal Histogram', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n# Execute the function\nzonal_histogram()"
    },
    {
        "tool_id": "native:zonalstatisticsfb",
        "toolname": "zonalstatisticsfb",
        "tool_description": "This algorithm calculates statistics of a raster layer for each feature of an overlapping polygon vector layer.",
        "parameters": "INPUT:\nINPUT_RASTER:\nRASTER_BAND:\nCOLUMN_PREFIX:\nSTATISTICS:\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef zonalstatisticsfb():\n    output_path = 'D:/Output_path/Output_layer.shp'\n    # Define the parameters \n    parameters = {\n        'INPUT':'D:/Data/PACounties.shp',\n\t\t'INPUT_RASTER':'D:/Data/PA_DEM.tif',\n\t\t'RASTER_BAND':1,\n\t\t'COLUMN_PREFIX':'',\n\t\t'STATISTICS':[0,1,2],\n        'OUTPUT': output_path\n        }\n    # Perform the extract by attribute operation\n    result = processing.run(\"native:zonalstatisticsfb\", parameters)\n    # Load the selected features as a new layer\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Joined attributes, 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\nzonalstatisticsfb()"
    },
    {
        "tool_id": "qgis:advancedpythonfieldcalculator",
        "toolname": "advancedpythonfieldcalculator",
        "tool_description": "Adds a new attribute to a vector layer, with values resulting from applying an expression to each feature.\nThe expression is defined as a Python function.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nFIELD_NAME: Result field name. Name of the new field. Type: [string] Default: \u2018NewField\u2019 \nFIELD_TYPE: Field type. Type of the new field. One of: 0 \u2014 Integer (32 bit) 1 \u2014 Decimal (double) 2 \u2014 Text (string) 3 \u2014 Boolean 4 \u2014 Date 5 \u2014 Time 6 \u2014 Date & Time 7 \u2014 Binary Object \n(BLOB) 8 \u2014 String List 9 \u2014 Integer List 10 \u2014 Decimal (double) List. Type: [enumeration] Default: 0 \nFIELD_LENGTH: Field length. Length of the field. Type: [number] Default: 10 \nFIELD_PRECISION: Field precision. Precision of the field. Useful with Float field type.. Type: [number] Default: 3 \nGLOBAL: Global expression Optional. The code in the global expression section will beexecuted only once before the calculator startsiterating through all the features of the input layer.Therefore, this is the correct place to importnecessary modules or to calculate variables thatwill be used in subsequent calculations.. Type: [string] \nFORMULA: Formula. The Python formula to evaluate.Example: To calculate the area of an input polygon layer youcan add: value = $geom.area(). Type: [string] \nOUTPUT: Calculated. Specify the vector layer with the new calculatedfield. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Calculated. Vector layer with the new calculated field. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef advanced_python_field_calculator(input_layer_path, output_path):\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n                                                                    \n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELD_NAME': 'NewField',\n        'FIELD_TYPE': 0,                                                                                                                                                      \n        'FIELD_LENGTH': 10,\n        'FIELD_PRECISION': 3,\n        'GLOBAL': '',\n        'FORMULA': '',\n        'OUTPUT': output_path\n    }\n\n                                              \n    result = processing.run(\"qgis:advancedpythonfieldcalculator\", parameters)\n\n                                    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Calculated_Field', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n              \ninput_layer_path = \"D:/Data/PrevalenceData.shp\"\noutput_path = \"D:/workspace_directory/output_layer.shp\"\n\n                      \nadvanced_python_field_calculator(input_layer_path, output_path)"
    },
    {
        "tool_id": "qgis:barplot",
        "toolname": "barplot",
        "tool_description": "Creates a bar plot from a category and a layer field.",
        "parameters": "INPUT: Input vector layer\nNAME_FIELD: Categorical field to use for grouping the bars (X axis)\nVALUE_FIELD: Value to use for the plot (Y axis)\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "def barplot ():\n    parameters = {\n    'INPUT':'D:/Data/PovertyData/Poverty3.shp',\n    'NAME_FIELD':'Poverty',\n    'VALUE_FIELD':'Poverty',\n    'OUTPUT':'output_path'\n    }\n    result = processing.run(\"qgis:barplot\", parameters)\n    output_layer = result['OUTPUT']\n    print(output_layer)\noutput_path = D:/Data/PovertyData/barplot.html #use an output directory\nbarplot()"
    },
    {
        "tool_id": "qgis:basicstatisticsforfields",
        "toolname": "basicstatisticsforfields",
        "tool_description": "This algorithm generates basic statistics from the analysis of a values in a field in the attribute table of a vector layer. Numeric, date, time and string fields are supported.\nThe statistics returned will depend on the field type.\nStatistics are generated as an HTML file.",
        "parameters": "INPUT_LAYER:\nFIELD_NAME:\nOUTPUT_HTML_FILE: \n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef basicstatisticsforfields():\n    output_path = \"D:/Output_path/Output_html_file.html\"\n\n    # Define the parameters Example below:\n    parameters = {\n        'INPUT_LAYER':'D:/Case_Studies/Data/PA_restaurants/PA_fastfood_restaurants.shp',\n\t\t'FIELD_NAME':'type',\n\t\t'OUTPUT_HTML_FILE': output_path\n        }\n    # Perform the extract by attribute operation\n    result = processing.run(\"qgis:basicstatisticsforfields\", parameters)\n    # Load the selected features as a new layer\n    output_layer = result['OUTPUT_HTML_FILE']\n\tprint(output_layer)\nbasicstatisticsforfields()"
    },
    {
        "tool_id": "qgis:boxplot",
        "toolname": "boxplot",
        "tool_description": "Creates a box plot from a category field and a numerical layer field.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nNAME_FIELD: Category name field. Categorical field to use for grouping the boxes \n(X axis). Type: [tablefield: any] \nVALUE_FIELD: Value field. Value to use for the plot \n(Y axis).. Type: [tablefield: any] \nMSD: Additional statistic lines. Additional statistics information to add to the plot.One of: 0 \u2014 Show Mean 1 \u2014 Show Standard Deviation 2 \u2014 Don\u2019t show mean and standard deviation. Type: [enumeration] Default: 0 \nOUTPUT: Box plot. Specify the \nHTML file for the plot. One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] outputs = \nOUTPUT: Box plot. \nHTML file with the plot.Available in the Processing \u25ba Result Viewer .. Type: [html]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef generate_boxplot(input_layer_path, output_path):\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_layer_path, 'Input Layer', 'ogr')\n    \n    # Define the parameters for the box plot algorithm\n    parameters = {\n        'INPUT': input_layer_path,  # Input vector layer\n        'NAME_FIELD': 'CategoryField',  # Change 'CategoryField' to your categorical field name\n        'VALUE_FIELD': 'ValueField',  # Change 'ValueField' to your value field name\n        'MSD': 0,  # 0 \u2014 Show Mean, 1 \u2014 Show Standard Deviation, 2 \u2014 Don\u2019t show mean and standard deviation\n        'OUTPUT': output_path  # Specify the output HTML file path\n    }\n\n    # Execute the box plot algorithm\n    result = processing.run('qgis:boxplot', parameters)\n    \n    # The result is an HTML file, so no need to load it into QGIS map\n    \n# Test the function\ninput_layer_path = \"\"\"D:/Data/YourInputLayer.shp\"                                \noutput_path = \"D:/output_path/boxplot.html\"                                 \ngenerate_boxplot(input_layer_path, output_path)"
    },
    {
        "tool_id": "qgis:checkvalidity",
        "toolname": "checkvalidity",
        "tool_description": "Performs a validity check on the geometries of a vector layer.\nThe geometries are classified in three groups (valid, invalid and error) and for each group, a vector layer with its features is generated:\nThe attribute tables of the generated layers will contain some additional information (\u201cmessage\u201d for the error layer, \u201cFID\u201d and \u201c_errors\u201d for the invalid layer and only \u201cFID\u201d for the valid layer):\nThe attribute table of each generated vector layer will contain some additional information (number of errors found and types of error):\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT_LAYER: Input layer. Input vector layer. Type: [vector: any]\nMETHOD: Method. Method to use to check validity.Options: 0: The one selected in digitizing settings 1: \nQGIS 2: \nGEOS. Type: [enumeration] Default: 2 \nIGNORE_RING_SELF_INTERSECTION: Ignore ring self intersection. Ignore self intersecting rings when checking for validity.. Type: [boolean] Default: False \nVALID_OUTPUT: Valid output. Specify the vector layer to contain a copy of the validfeatures of the source layer. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nINVALID_OUTPUT: Invalid output. Vector layer containing copy of the invalid features ofthe source layer with the field _errors listing thesummary of the error(s) found. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] \nERROR_OUTPUT: Error output. Point layer of the exact position of the validityproblems detected with the message field describingthe error(s) found. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nERROR_COUNT: Count of errors. The number of geometries that caused errors.. Type: [number] \nERROR_OUTPUT: Error output. Point layer of the exact position of the validityproblems detected with the message field describingthe error(s) found.. Type: [vector: point] \nINVALID_COUNT: Count of invalid features. The number of invalid geometries.. Type: [number] \nINVALID_OUTPUT: Invalid output. Vector layer containing copy of the invalid features ofthe source layer with the field _errors listing thesummary of the error(s) found.. Type: [same as input] \nVALID_COUNT: Count of valid features. The number of valid geometries.. Type: [number] \nVALID_OUTPUT: Valid output. Vector layer containing a copy of the valid features ofthe source layer.. Type: [same as input]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef check_layer_validity():\n    # Define input and output paths\n    input_path = 'D:/Data/InputLayer.shp'\n    valid_output_path = 'D:/Output/ValidOutput.shp'\n    invalid_output_path = 'D:/Output/InvalidOutput.shp'\n    error_output_path = 'D:/Output/ErrorOutput.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Validity Check algorithm\n    result = processing.run('qgis:checkvalidity', {\n        'INPUT_LAYER': input_layer,\n        'METHOD': 2,  # Options: 0 - The one selected in digitizing settings, 1 - QGIS, 2 - GEOS\n        'IGNORE_RING_SELF_INTERSECTION': False,\n        'VALID_OUTPUT': valid_output_path,\n        'INVALID_OUTPUT': invalid_output_path,\n        'ERROR_OUTPUT': error_output_path\n    })\n\n    # Load the output layers into QGIS\n    valid_layer = QgsVectorLayer(result['VALID_OUTPUT'], 'Valid Features', 'ogr')\n    invalid_layer = QgsVectorLayer(result['INVALID_OUTPUT'], 'Invalid Features', 'ogr')\n    error_layer = QgsVectorLayer(result['ERROR_OUTPUT'], 'Error Points', 'ogr')\n    \n    QgsProject.instance().addMapLayer(valid_layer)\n    QgsProject.instance().addMapLayer(invalid_layer)\n    QgsProject.instance().addMapLayer(error_layer)\n\n# Execute the function\ncheck_layer_validity()"
    },
    {
        "tool_id": "qgis:climbalongline",
        "toolname": "climbalongline",
        "tool_description": "Calculates the total climb and descent along line geometries. The input layer must have Z values present. If Z values are not available, the Drape (set Z value from raster) algorithm may be used to add Z values from a DEM layer.\nThe output layer is a copy of the input layer with additional fields that contain the total climb ( climb ), total descent ( descent ), the minimum elevation ( minelev ) and the maximum elevation ( maxelev ) for each line geometry. If the input layer contains fields with the same names as these added fields, they will be renamed (field names will be altered to \u201cname_2\u201d, \u201cname_3\u201d, etc, finding the first non-duplicate name).",
        "parameters": "INPUT: Line layer. Line layer to calculate the climb for. Must have\nZ values. Type: [vector: line] \nOUTPUT: Climb layer. Specification of the output (line) layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] outputs = \nOUTPUT: Climb layer. Line layer containing new attributes with theresults from climb calculations.. Type: [vector: line] \nTOTALCLIMB: Total climb. The sum of the climb for all the line geometriesin the input layer. Type: [number] \nTOTALDESCENT: Total descent. The sum of the descent for all the line geometriesin the input layer. Type: [number] \nMINELEVATION: Minimum elevation. The minimum elevation for the geometries in thelayer. Type: [number] \nMAXELEVATION: Maximum elevation. The maximum elevation for the geometries in thelayer. Type: [number]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_climb_layer():\n    input_path = 'D:/Data/LineLayer.shp'\n    output_path = 'C:/output_path/climb_layer.shp'\n  \n    input_layer = QgsVectorLayer(input_path, 'Line Layer', 'ogr')\n\n    result = processing.run('qgis:climbalongline', {\n        'INPUT': input_path,\n        'OUTPUT': output_path\n    })\n\n    climb_layer = QgsVectorLayer(result['OUTPUT'], 'Climb Layer', 'ogr')\n    QgsProject.instance().addMapLayer(climb_layer)\n\ncalculate_climb_layer()"
    },
    {
        "tool_id": "qgis:convertgeometrytype",
        "toolname": "convertgeometrytype",
        "tool_description": "Generates a new layer based on an existing one, with a different type of geometry.\nThe attribute table of the output layer is the same as the one of the input layer.\nNot all conversions are possible. For instance, a line layer can be converted to a point layer, but a point layer cannot be converted to a line layer.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nTYPE: New geometry type. Geometry type to apply to the output features.One of: 0 \u2014 Centroids 1 \u2014 Nodes 2 \u2014 Linestrings 3 \u2014 Multilinestrings 4 \u2014 Polygons. Type: [enumeration] Default: 0\nOUTPUT: Converted. Specify the output vector layer.One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef convert_geometry_type():\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path,\n        'TYPE': 0,  # 0 \u2014 Centroids 1 \u2014 Nodes 2 \u2014 Linestrings 3 \u2014 Multilinestrings 4 \u2014 Polygons\n        'OUTPUT': output_path\n    }\n\n    result = processing.run('qgis:convertgeometrytype', parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Converted', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nconvert_geometry_type()"
    },
    {
        "tool_id": "qgis:definecurrentprojection",
        "toolname": "definecurrentprojection",
        "tool_description": "Sets the CRS (projection) of an existing Shapefile format dataset to the provided CRS. It is very useful when a Shapefile format dataset is missing the prj file and you know the correct projection.\nContrary to the Assign projection algorithm, it modifies the current layer and will not output a new layer.\nDefault menu: Vector \u25ba Data Management Tools",
        "parameters": "INPUT: Input layer. Vector layer with missing projection information. Type: [vector: any]\nCRS: CRS. Select the CRS to assign to the vector layer. Type: [crs]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef define_current_projection():\n    # Define input and output paths\n    input_path = 'D:/Data/UnprojectedData.shp'\n    output_path = 'C:/output_path/projected_layer.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Unprojected Layer', 'ogr')\n\n    # Run the Define Current Projection algorithm\n    result = processing.run('qgis:definecurrentprojection', {\n        'INPUT': input_layer,\n        'CRS': 'EPSG:4326',\n        'OUTPUT': output_path\n    })\n\n    # Load the reprojected layer to QGIS\n    projected_layer = QgsVectorLayer(result['OUTPUT'], 'Projected Layer', 'ogr')\n    QgsProject.instance().addMapLayer(projected_layer)\n\n# Execute the function\ndefine_current_projection()"
    },
    {
        "tool_id": "qgis:distancematrix",
        "toolname": "distancematrix",
        "tool_description": "Calculates for point features distances to their nearest features in the same layer or in another layer.\nDefault menu: Vector \u25ba Analysis Tools",
        "parameters": "INPUT: Input point layer. Point layer for which the distance matrix is calculated( from points). Type: [vector: point]\nINPUT_FIELD: Input unique ID field. Field to use to uniquely identify features of theinput layer. Used in the output attribute table.. Type: [tablefield: any]\nTARGET: Target point layer. Point layer containing the nearest point(s) to search( to points). Type: [vector: point]\nTARGET_FIELD: Target unique ID field. Field to use to uniquely identify features of the targetlayer.Used in the output attribute table.. Type: [tablefield: any]\nMATRIX_TYPE: Output matrix type. Different types of calculation are available: 0 \u2014 Linear (N * k x 3) distance matrix: for eachinput point, reports the distance to each of the k nearest target points.The output matrix consists of up to k rows perinput point, and each row has three columns: InputID , TargetID and Distance . 1 \u2014 Standard (N x T) distance matrix 2 \u2014 Summary distance matrix (mean, std. dev., min,max): for each input point, reports statistics onthe distances to its target points.. Type: [enumeration] Default: 0\nNEAREST_POINTS: Use only the nearest (k) target points. You can choose to calculate the distance to all thepoints in the target layer ( 0 ) or limit to a number( k ) of closest features.. Type: [number] Default: 0\nOUTPUT: Distance matrix. Specification of the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_distance_matrix():\n    # Define input and output paths\n    input_path = 'D:/Data/InputPoints.shp'\n    target_path = 'D:/Data/TargetPoints.shp'\n    output_path = 'C:/output_path/distance_matrix.shp'\n\n    # Load the shapefile as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n    target_layer = QgsVectorLayer(target_path, 'Target Points', 'ogr')\n\n    # Run the Distance Matrix algorithm\n    result = processing.run('qgis:distancematrix', {\n        'INPUT': input_path,\n        'INPUT_FIELD': 'input_id',\n        'TARGET': target_path,\n        'TARGET_FIELD': 'target_id',\n        'MATRIX_TYPE': 0, # Options: [0: 'Linear (N*k x 3) distance matrix', 1: 'Standard (N x T) distance matrix', 2: 'Summary distance matrix (mean, std. dev., min, max)']\n        'NEAREST_POINTS': 0,\n        'OUTPUT': output_path\n    })\n\n    # Load the distance matrix layer to QGIS\n    distance_matrix_layer = QgsVectorLayer(result['OUTPUT'], 'Distance Matrix', 'ogr')\n    QgsProject.instance().addMapLayer(distance_matrix_layer)\n\n# Execute the function\ngenerate_distance_matrix()"
    },
    {
        "tool_id": "qgis:distancetonearesthublinetohub",
        "toolname": "distancetonearesthublinetohub",
        "tool_description": "Creates lines that join each feature of an input vector to the nearest feature in a destination layer. Distances are calculated based on the center of each feature.",
        "parameters": "INPUT: Source points layer. Vector layer for which the nearest feature is searched. Type: [vector: any]\nHUBS: Destination hubs layer. Vector layer containing the features to search for. Type: [vector: any] \nFIELD: Hub layer name attribute. Field to use to uniquely identify features of thedestination layer.Used in the output attribute table. Type: [tablefield: any] \nUNIT: Measurement unit. Units in which to report the distance to the closestfeature: 0 \u2014 Meters 1 \u2014 Feet 2 \u2014 Miles 3 \u2014 Kilometers 4 \u2014 Layer units. Type: [enumeration] Default: 0 \nOUTPUT: Hub distance. Specify the output line vector layer connecting the matching points.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Create temporary layer] outputs = \nOUTPUT: Hub distance. Line vector layer with the attributes of the inputfeatures, the identifier of their closest featureand the calculated distance.. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef distance_to_nearest_hub():\n    input_path = \"\"\"D:/Data/SourcePoints.shp\"\n    hubs_path = \"D:/Data/DestinationHubs.shp\"\n    output_path = \"D:/workspace_directory/hub_distance_output.shp\"\n  \n    input_layer = QgsVectorLayer(input_path, \"Source Points\", \"ogr\")\n    hubs_layer = QgsVectorLayer(hubs_path, \"Destination Hubs\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_path,\n        'HUBS': hubs_path,\n        'FIELD': 'hub_id',                                                \n        'UNIT': 0,                                                               \n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"qgis:distancetonearesthublinetohub\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Hub Distance', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ndistance_to_nearest_hub()"
    },
    {
        "tool_id": "qgis:distancetonearesthubpoints",
        "toolname": "distancetonearesthubpoints",
        "tool_description": "Creates a point layer representing the center of the input features with the addition of two fields containing the identifier of the nearest feature (based on its center point) and the distance between the points.",
        "parameters": "INPUT: Source points layer. Vector layer for which the nearest feature is searched. Type: [vector: any]\nHUBS: Destination hubs layer. Vector layer containing the features to search for. Type: [vector: any] \nFIELD: Hub layer name attribute. Field to use to uniquely identify features of thedestination layer.Used in the output attribute table. Type: [tablefield: any] \nUNIT: Measurement unit. Units in which to report the distance to the closestfeature: 0 \u2014 Meters 1 \u2014 Feet 2 \u2014 Miles 3 \u2014 Kilometers 4 \u2014 Layer units. Type: [enumeration] Default: 0 \nOUTPUT: Hub distance. Specify the output point vector layer with the nearest hub.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Hub distance. Point vector layer representing the center of the source featureswith their attributes, the identifier of their closestfeature and the calculated distance.. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef nearest_hub_distance():\n    input_layer_path = \"\"\"D:/Path/SourcePointsLayer.shp\"\n    hubs_layer_path = \"D:/Path/DestinationHubsLayer.shp\"\n    output_path = \"D:/workspace_directory/output_layer.shp\"\n\n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    hubs_layer = QgsVectorLayer(hubs_layer_path, \"Hubs Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer,\n        'HUBS': hubs_layer,\n        'FIELD': 'hub_name',\n        'UNIT': 0,                                                                                              \n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"qgis:distancetonearesthubpoints\", parameters)\n    nearest_hub_layer = QgsVectorLayer(result['OUTPUT'], 'Nearest Hub Distance', 'ogr')\n    QgsProject.instance().addMapLayer(nearest_hub_layer)\n\nnearest_hub_distance()"
    },
    {
        "tool_id": "qgis:eliminateselectedpolygons",
        "toolname": "eliminateselectedpolygons",
        "tool_description": "Combines selected polygons of the input layer with certain adjacent polygons by erasing their common boundary. The adjacent polygon can be either the one with the largest or smallest area or the one sharing the largest common boundary with the polygon to be eliminated.\nEliminate is normally used to get rid of sliver polygons, i.e. tiny polygons that are a result of polygon intersection processes where boundaries of the inputs are similar but not identical.\nDefault menu: Vector \u25ba Geoprocessing Tools",
        "parameters": "INPUT: Input layer. Input polygon vector layer. Type: [vector: polygon]\nMODE: Merge selection with the neighboring polygon with the. Choose the parameter to use in order to get rid ofthe selected polygons: 0 \u2014 Largest Area 1 \u2014 Smallest Area 2 \u2014 Largest Common Boundary. Type: [enumeration] Default: None\nOUTPUT: Eliminated. Specify the output vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef eliminate_selected_polygons():\n    input_path = 'D:/Data/InputPolygons.shp'\n    output_path = 'C:/output_path/eliminated_polygons.shp'\n    \n    input_layer = QgsVectorLayer(input_path, 'Input Polygons', 'ogr')\n    \n    result = processing.run('qgis:eliminateselectedpolygons', {\n        'INPUT': input_layer,\n        'MODE': 0,  # Options: 0 \u2014 Largest Area, 1 \u2014 Smallest Area, 2 \u2014 Largest Common Boundary\n        'OUTPUT': output_path\n    })\n    \n    eliminated_layer = QgsVectorLayer(result['OUTPUT'], 'Eliminated Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(eliminated_layer)\n\neliminate_selected_polygons()"
    },
    {
        "tool_id": "qgis:executesql",
        "toolname": "executesql",
        "tool_description": "Runs a simple or complex query based only on SELECT with SQL syntax on the source layer.\nInput datasources are identified with input1 , input2 \u2026 inputN and a simple query will look like SELECT*FROMinput1 .\nBeside a simple query, you can add expressions or variables within the SQLquery parameter itself. This is particulary useful if this algorithm is executed within a Processing model and you want to use a model input as a parameter of the query. An example of a query will then be SELECT*FROM[%@table%] where @table is the variable that identifies the model input.\nThe result of the query will be added as a new layer.",
        "parameters": "INPUT_DATASOURCES: Additional input datasources (called input1, .., inputN in the query). List of layers to query. In the\nSQL editor you canrefer these layers with their real name or alsowith input1 , input2 , inputN dependingon how many layers have been chosen.. Type: [vector: any] [list] \nINPUT_QUERY: \nSQL query. Type the string of your \nSQL query, e.g. \nSELECT * \nFROM input1 .. Type: [string] \nINPUT_UID_FIELD: Unique identifier field Optional. Specify the column with unique \nID. Type: [string] \nINPUT_GEOMETRY_FIELD: Geometry field Optional. Specify the geometry field. Type: [string] \nINPUT_GEOMETRY_TYPE: Geometry type Optional. Choose the geometry of the result.By default the algorithm will autodetect it.One of: 0 \u2014 Autodetect 1 \u2014 No geometry 2 \u2014 Point 3 \u2014 LineString 4 \u2014 Polygon 5 \u2014 MultiPoint 6 \u2014 MultiLineString 7 \u2014 MultiPolygon. Type: [enumeration] Default: 0 \nINPUT_GEOMETRY_CRS: \nCRS Optional. The \nCRS to assign to the output layer. Type: [crs] \nOUTPUT: \nSQL Output. Specify the output layer created by the query. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: any] Default: [Create temporary layer] outputs = \nOUTPUT: \nSQL Output. Vector layer created by the query. Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef execute_sql_example():\n    input_layer1_path = 'D:/Data/Layer1.shp'\n    input_layer2_path = 'D:/Data/Layer2.shp'\n    output_path = 'C:/output_path/sql_output.shp'\n\n    input_layer1 = QgsVectorLayer(input_layer1_path, \"\"\"input1\", \"ogr\")\n    input_layer2 = QgsVectorLayer(input_layer2_path, \"input2\", \"ogr\")\n\n    parameters = {\n        'INPUT_DATASOURCES': [input_layer1, input_layer2],                                         \n        'INPUT_QUERY': 'SELECT * FROM input1 WHERE input1.field1 > 100',                    \n        'INPUT_UID_FIELD': 'id',                   \n        'INPUT_GEOMETRY_FIELD': 'geometry',                  \n        'INPUT_GEOMETRY_TYPE': 0,              \n                                                  \n                                            \n                                                 \n                                              \n                                                 \n                                                      \n                                                   \n        'INPUT_GEOMETRY_CRS': 'EPSG:4326',                               \n        'OUTPUT': output_path               \n    }\n\n    result = processing.run(\"qgis:executesql\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'SQL Output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nexecute_sql_example()"
    },
    {
        "tool_id": "qgis:exportaddgeometrycolumns",
        "toolname": "exportaddgeometrycolumns",
        "tool_description": "Computes geometric properties of the features in a vector layer and includes them in the output layer.\nIt generates a new vector layer with the same content as the input one, but with additional attributes, containing geometric measurements based on a selected CRS.\nThe attributes added to the table depend on the geometry type and dimension of the input layer:\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nCALC_METHOD: Calculate using. Calculation parameters to use for the geometric properties.One of: 0 \u2014 Layer \nCRS 1 \u2014 Project \nCRS 2 \u2014 Ellipsoidal. Type: [enumeration] Default: 0 \nOUTPUT: Added geom info. Specify the output (input copy with geometry) layer.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Added geom info. Copy of the input vector layer with the addition of the geometry fields. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef add_geom_info(input_layer_path, output_path):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'CALC_METHOD': 0,                                                \n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"qgis:exportaddgeometrycolumns\", parameters)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Output Layer with Geometry Info', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = \"D:/Data/YourInputLayer.shp\"\noutput_path =\"D:/workspace_directory/output_with_geom_info.shp\"\nadd_geom_info(input_layer_path, output_path)"
    },
    {
        "tool_id": "qgis:findprojection",
        "toolname": "findprojection",
        "tool_description": "Creates a shortlist of candidate coordinate reference systems, for instance for a layer with an unknown projection.\nThe area that the layer is expected to cover must be specified via the target area parameter. The coordinate reference system for this target area must be known to QGIS.\nThe algorithm operates by testing the layer\u2019s extent in every known reference system and then listing any for which the bounds would be near the target area if the layer was in this projection.",
        "parameters": "INPUT: Input Layer. Layer with unknown projection. Type: [vector: any]\nTARGET_AREA: Target area for layer (xmin, xmax, ymin, ymax). The area that the layer covers. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nOUTPUT: CRS candidates. Specify the table (geometryless layer) for the CRSsuggestions (EPSG codes). One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing    \n\ndef find_projection():\n    input_path = 'D:/Data/UnknownProjectionLayer.shp'\n    output_path = 'C:/output_path/crs_suggestions.csv'  # Ensure this is a path to a CSV file for output.\n\n    input_layer = QgsVectorLayer(input_path, 'Unknown Projection Layer', 'ogr')\n    \n    parameters = {\n        'INPUT': input_layer,\n        'TARGET_AREA': 'xmin, xmax, ymin, ymax',  # You can dynamically calculate or input the bounds here as needed.\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run('qgis:findprojection', parameters)\n    \n    crs_candidates = QgsVectorLayer(result['OUTPUT'], 'CRS Suggestions', 'ogr')\n    QgsProject.instance().addMapLayer(crs_candidates)\n\nfind_projection()"
    },
    {
        "tool_id": "qgis:generatepointspixelcentroidsalongline",
        "toolname": "generatepointspixelcentroidsalongline",
        "tool_description": "Generates a point vector layer from an input raster and line layer.\nThe points correspond to the pixel centroids that intersect the line layer.",
        "parameters": "INPUT_RASTER: Raster layer. Input raster layer. Type: [raster]\nINPUT_VECTOR: Vector layer. Input line vector layer. Type: [vector: line] \nOUTPUT: Points along line. Resulting point layer with pixel centroids. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Points along line. Resulting point layer with pixel centroids. Type: [vector: point]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_points_along_line():\n    # Define the input and output paths\n    input_raster_path = 'D:/input_raster.tif'\n    input_vector_path = 'D:/input_line.shp'\n    output_path = 'C:/Users/Output/points_along_line.shp'\n\n    # Load the input layers\n    input_raster = QgsRasterLayer(input_raster_path, \"\"\"Input Raster\")\n    input_vector = QgsVectorLayer(input_vector_path, \"Input Line\", \"ogr\")\n\n                                            \n    parameters = {\n        'INPUT_RASTER': input_raster_path,\n        'INPUT_VECTOR': input_vector_path,\n        'OUTPUT': output_path\n    }\n\n                             \n    result = processing.run(\"qgis:generatepointspixelcentroidsalongline\", parameters)\n\n                                     \n    points_layer = QgsVectorLayer(result['OUTPUT'], 'Points_Along_Line', 'ogr')\n    QgsProject.instance().addMapLayer(points_layer)\n\n                      \ngenerate_points_along_line()"
    },
    {
        "tool_id": "qgis:heatmapkerneldensityestimation",
        "toolname": "heatmapkerneldensityestimation",
        "tool_description": "Creates a density (heatmap) raster of an input point vector layer using kernel density estimation. Heatmaps allow easy identification of hotspots and clustering of points.\n   The density is calculated based on the number of points in a location, with larger numbers of clustered points resulting in larger values.",
        "parameters": "INPUT: Point vector layer to use for the heatmap\nRADIUS: Heatmap search radius (or kernel bandwidth) in map units. The radius specifies the distance around a point at which the influence of the point will be felt. Larger values result in greater smoothing, but smaller values may show finer details and variation in point density.\nRADIUS_FIELD: Radius from field (optional. Sets the search radius for each feature from an attribute field in the input layer.\nPIXEL_SIZE: Output raster size. Pixel size of the output raster layer in layer units. Default is 0.1\nWEIGHT_FIELD: Weight from field (Optional)\nKERNEL: Kernel shape. Available values - 0: Quartic, 1: Triangular, 2: Uniform, 3: Triweight, 4: Epanechnikov         \nDECAY: Decay ratio (Triangular kernels only) - Optional\nOUTPUT_VALUE: Output value scaling. Available values - 0: Raw, 1: Scaled\nOUTPUT: Specify the output raster layer with kernel density values. One of: -Save to a Temporary File ('memory'), -Save to file...\n\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject,QgsVectorLayer\ndef heatmapkerneldensityestimation():\n    \n    output_path = \"D:/Output_Directory/Output_layer.tif\"\n    # Define the parameters:\n    parameters = {\n        'INPUT':'D:/Case_Studies/Data/PA_Data_ESPG26710.shp',\n\t\t'RADIUS':500,\n\t\t'RADIUS_FIELD':'',\n\t\t'PIXEL_SIZE':0.1,\n\t\t'WEIGHT_FIELD':'',\n\t\t'KERNEL':0,\n\t\t'DECAY':0,\n\t\t'OUTPUT_VALUE':0,\n        'OUTPUT':output_path}\n    # Perform the extract by attribute operation\n    result = processing.run(\"qgis:heatmapkerneldensityestimation\", parameters)\n    ## Load the selected features as a new layer\n     output_layer = QgsRasterLayer(result['OUTPUT'], 'Kernel density Result')\n    QgsProject.instance().addMapLayer(output_layer)\nheatmapkerneldensityestimation()"
    },
    {
        "tool_id": "qgis:hypsometriccurves",
        "toolname": "hypsometriccurves",
        "tool_description": "Calculates hypsometric curves for an input Digital Elevation Model. Curves are produced as CSV files in an output folder specified by the user.\nA hypsometric curve is a cumulative histogram of elevation values in a geographical area.\nYou can use hypsometric curves to detect differences in the landscape due to the geomorphology of the territory.",
        "parameters": "INPUT_DEM: DEM to analyze. Digital Terrain Model raster layer to use forcalculating altitudes. Type: [raster]\nBOUNDARY_LAYER: Boundary layer. Polygon vector layer with boundaries of areas usedto calculate hypsometric curves. Type: [vector: polygon]\nSTEP: Step. Vertical distance between curves. Type: [number] Default: 100.0\nUSE_PERCENTAGE: Use % of area instead of absolute value. Write area percentage to \u201cArea\u201d field of the CSV fileinstead of the absolute area. Type: [boolean] Default: False\nOUTPUT_DIRECTORY: Hypsometric curves. Specify the output folder for the hypsometric curves.One of: Save to a Temporary Directory Save to Directory. Type: [folder]",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject\nimport processing\n\ndef hypsometric_curves():\n    # Define input and output paths\n    input_dem_path = 'D:/Data/DEM.tif'\n    boundary_layer_path = 'D:/Data/Boundary.shp'\n    output_directory_path = 'C:/output_directory/'\n\n    # Load the raster and vector layers\n    input_dem = QgsRasterLayer(input_dem_path, 'DEM')\n    boundary_layer = QgsVectorLayer(boundary_layer_path, 'Boundary', 'ogr')\n\n    # Run the Hypsometric Curves algorithm\n    result = processing.run('qgis:hypsometriccurves', {\n        'INPUT_DEM': input_dem,\n        'BOUNDARY_LAYER': boundary_layer,\n        'STEP': 100.0,  # Default\n        'USE_PERCENTAGE': False,  # Default\n        'OUTPUT_DIRECTORY': output_directory_path\n    })\n\n# Execute the function\nhypsometric_curves()"
    },
    {
        "tool_id": "qgis:idwinterpolation",
        "toolname": "idwinterpolation",
        "tool_description": "Generates an Inverse Distance Weighted (IDW) interpolation of a point vector layer.\nSample points are weighted during interpolation such that the influence of one point relative to another declines with distance from the unknown point you want to create.",
        "parameters": "INTERPOLATION_DATA: Vector layer(s) and field(s) to use for the interpolation. The following elements are provided to compose the interpolation data:  Vector layer [vector: any] and Interpolation attribute (i.e Attribute to use in the interpolation)  [tablefield: numeric]. In the strig, the layer-field elements are separated by '::|::'. The sub-elements of the layer-field elements are separated by '::~::'\nDISTANCE_COEFFICIENT: Sets the distance coefficient for the interpolation. Minimum: 0.0, maximum: 100.0.\nEXTENT: Extent of the output raster layer.\n        Available methods are:\n            Calculate from layer\u2026: uses extent of a layer loaded in the current project,\n            Calculate from layout map\u2026: uses extent of a layout map item in the active project,\n            Calculate from bookmark\u2026: uses extent of a saved bookmark,\n            Use map canvas extent,\n            Draw on canvas: click and drag a rectangle delimiting the area to take into account,\n            Enter the coordinates as xmin, xmax, ymin, ymax\nPIXEL_SIZE: Output raster size\nOUTPUT: Raster layer of interpolated values. One of- Save to a Temporary File ('memory') or Save to File... \n\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject, QgsRasterLayer, QgsCoordinateReferenceSystem\nfrom PyQt5.QtCore import QVariant\nimport processing\ndef IDW_Interpolation(input_layer_path, attribute):\n    # Load the input vector layer\n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n\toutput_path = \"D:/Output_path/Output_layer.tif\"\n\n     #Determining the field index of the attribute\n    fields = input_layer.fields()\n    attribute_index = fields.indexOf(attribute) #obtaining the index of the the attribute to be interpolated\n\n    #Define the parameters for IDW interpolation\n    parameters = {\n        'INTERPOLATION_DATA': f\"{input_layer_path}::~::0::~::{attribute_index}::~::0\",\n        'DISTANCE_COEFFICIENT': 2,\n        'EXTENT': input_layer.extent(),\n        'PIXEL_SIZE': 0.1,\n        'OUTPUT': output_path\n    }\n    # Run the IDW interpolation algorithm\n    processing.run(\"qgis:idwinterpolation\", parameters)\n    # Add the output raster layer to the QGIS project\n    output_raster_layer = QgsRasterLayer(parameters['OUTPUT'], \"IDW Interpolation\")\n    QgsProject.instance().addMapLayer(output_raster_layer)\ninput_layer_path = \"D:/Data/PA_Data_EPSG4326/PA_Data_EPSG4326.shp\" #path to the input shapefile\nattribute = \"Coronary_h\" # attribute to be interpolated\nIDW_Interpolation(input_layer_path, attribute)"
    },
    {
        "tool_id": "qgis:importintospatialite",
        "toolname": "importintospatialite",
        "tool_description": "Exports a vector layer to a SpatiaLite database. Prior to this a connection between QGIS and the SpatiaLite database has to be created (see eg SpatiaLite Layers ).",
        "parameters": "INPUT: Layer to import. Vector layer to add to the database. Type: [vector: any]\nDATABASE: File database. The SQLite/SpatiaLite database file to connect to. Type: [vector: any] \nTABLENAME: Table to import to (leave blank to use layer name) Optional. Defines the table name for the imported vector file.If nothing is specified, the layer name will be used.. Type: [string] Default: \u2018\u2019 \nPRIMARY_KEY: Primary key field Optional. Use a field in the input vector layer as the primary key. Type: [tablefield: any] \nGEOMETRY_COLUMN: Geometry column. Defines the name of the geometry column in the newSpatiaLite table.Geometry information for the features is stored in thiscolumn.. Type: [string] Default: \u2018geom\u2019 \nENCODING: Encoding Optional. Defines the encoding of the output layer. Type: [string] Default: \n\u2018UTF-8\u2019 \nOVERWRITE: Overwrite. If the specified table exists, setting this option to True will make sure that it is deleted and a newtable will be created before the features of the layer isadded.If this option is False and the table exists, thealgorithm will throw an exception (\u201ctable alreadyexists\u201d).. Type: [boolean] Default: True \nCREATEINDEX: Create spatial index. Specifies whether to create a spatial index or not. Type: [boolean] Default: True \nLOWERCASE_NAMES: Convert field names to lowercase. Convert the field names of the input vector layerto lowercase. Type: [boolean] Default: True \nDROP_STRING_LENGTH: Drop length constraint on character fields. Should length constraints on character fields bedropped or not. Type: [boolean] Default: False \nFORCE_SINGLEPART: Create single-part geometries instead of multi-part. Should the features of the output layer besingle-part instead of multi-part.By default the existing geometries informationare preserved.. Type: [boolean] Default: False outputs =\n",
        "code_example": "from qgis.core import QgsProject, QgsVectorLayer\nimport processing\n\ndef import_to_spatialite():\n    input_layer_path = \"\"\"D:/Data/input_layer.shp\"\n    database_path = \"D:/Data/spatialite_database.sqlite\"\n    output_path = \"D:/Data/output_layer.shp\"\n\n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n\n    params = {\n        'INPUT': input_layer_path,\n        'DATABASE': database_path,\n        'TABLENAME': '',                                  \n        'PRIMARY_KEY': '',                                         \n        'GEOMETRY_COLUMN': '',                     \n        'ENCODING': '',                      \n        'OVERWRITE': '',                   \n        'CREATEINDEX': '',                   \n        'LOWERCASE_NAMES': '',                   \n        'DROP_STRING_LENGTH': '',                    \n        'FORCE_SINGLEPART': '',                    \n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"qgis:importintospatialite\", params)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Imported_output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nimport_to_spatialite()"
    },
    {
        "tool_id": "qgis:knearestconcavehull",
        "toolname": "knearestconcavehull",
        "tool_description": "Exports a vector layer to a SpatiaLite database. Prior to this a connection between QGIS and the SpatiaLite database has to be created (see eg SpatiaLite Layers ).",
        "parameters": "INPUT: Layer to import. Vector layer to add to the database. Type: [vector: any]\nDATABASE: File database. The SQLite/SpatiaLite database file to connect to. Type: [vector: any] \nTABLENAME: Table to import to (leave blank to use layer name) Optional. Defines the table name for the imported vector file.If nothing is specified, the layer name will be used.. Type: [string] Default: \u2018\u2019 \nPRIMARY_KEY: Primary key field Optional. Use a field in the input vector layer as the primary key. Type: [tablefield: any] \nGEOMETRY_COLUMN: Geometry column. Defines the name of the geometry column in the newSpatiaLite table.Geometry information for the features is stored in thiscolumn.. Type: [string] Default: \u2018geom\u2019 \nENCODING: Encoding Optional. Defines the encoding of the output layer. Type: [string] Default: \n\u2018UTF-8\u2019 \nOVERWRITE: Overwrite. If the specified table exists, setting this option to True will make sure that it is deleted and a newtable will be created before the features of the layer isadded.If this option is False and the table exists, thealgorithm will throw an exception (\u201ctable alreadyexists\u201d).. Type: [boolean] Default: True \nCREATEINDEX: Create spatial index. Specifies whether to create a spatial index or not. Type: [boolean] Default: True \nLOWERCASE_NAMES: Convert field names to lowercase. Convert the field names of the input vector layerto lowercase. Type: [boolean] Default: True \nDROP_STRING_LENGTH: Drop length constraint on character fields. Should length constraints on character fields bedropped or not. Type: [boolean] Default: False \nFORCE_SINGLEPART: Create single-part geometries instead of multi-part. Should the features of the output layer besingle-part instead of multi-part.By default the existing geometries informationare preserved.. Type: [boolean] Default: False outputs =\n",
        "code_example": "from qgis.core import QgsProject, QgsVectorLayer\nimport processing\n\ndef import_to_spatialite():\n    input_layer_path = \"\"\"D:/Data/input_layer.shp\"\n    database_path = \"D:/Data/spatialite_database.sqlite\"\n    output_path = \"D:/Data/output_layer.shp\"\n\n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n\n    params = {\n        'INPUT': input_layer_path,\n        'DATABASE': database_path,\n        'TABLENAME': '',                                  \n        'PRIMARY_KEY': '',                                         \n        'GEOMETRY_COLUMN': '',                     \n        'ENCODING': '',                      \n        'OVERWRITE': '',                   \n        'CREATEINDEX': '',                   \n        'LOWERCASE_NAMES': '',                   \n        'DROP_STRING_LENGTH': '',                    \n        'FORCE_SINGLEPART': '',                    \n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"qgis:importintospatialite\", params)\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Imported_output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nimport_to_spatialite()"
    },
    {
        "tool_id": "qgis:linestopolygons",
        "toolname": "linestopolygons",
        "tool_description": "Generates a polygon layer using as polygon rings the lines from an input line layer.\nThe attribute table of the output layer is the same as the one of the input layer.\nDefault menu: Vector \u25ba Geometry Tools",
        "parameters": "INPUT: Input layer. Input line vector layer. Type: [vector: line]\nOUTPUT: Polygons. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef lines_to_polygons():\n    input_path = 'D:/Data/InputLines.shp'  # path to the input line shapefile\n    output_path = 'D:/Data/OutputPolygons.shp'  # path for the output polygons file \n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_path, \n        'OUTPUT': output_path  # Options: Create Temporary Layer ( TEMPORARY_OUTPUT ), Save to File\u2026, Save to Geopackage\u2026, Save to Database Table\u2026, Append to Layer\u2026\n    }\n\n    result = processing.run('qgis:linestopolygons', parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Polygons', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nlines_to_polygons()"
    },
    {
        "tool_id": "qgis:listuniquevalues",
        "toolname": "listuniquevalues",
        "tool_description": "Lists unique values of an attribute table field and counts their number.\nDefault menu: Vector \u25ba Analysis Tools",
        "parameters": "INPUT: Input layer. Layer to analyze. Type: [vector: any]\nFIELDS: Target field(s). Field to analyze. Type: [tablefield: any] \nOUTPUT: Unique values Optional. Specify the summary table layer with unique values. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Create temporary layer] \nOUTPUT_HTML_FILE: \nHTML report Optional. \nHTML report of unique values in the Processing \u25ba Results viewer . One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] outputs = \nOUTPUT: Unique values. Summary table layer with unique values. Type: [table] \nOUTPUT_HTML_FILE: \nHTML report. \nHTML report of unique values. Can be opened from the Processing \u25ba Results viewer. Type: [html] \nTOTAL_VALUES: Total unique values. The number of unique values in the input field. Type: [number] \nUNIQUE_VALUES: Unique values concatenated. \nA string with the comma separated list of unique values foundin the input field. Type: [string]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef list_unique_values():\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/unique_values.csv'\n    html_report_path = 'C:/output_path/report.html'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'FIELDS': ['field_name'],  # Specify the field(s) you want to analyze\n        'OUTPUT': output_path,\n        'OUTPUT_HTML_FILE': html_report_path,\n    }\n\n    result = processing.run('qgis:listuniquevalues', parameters)\n\n    summary_layer = QgsVectorLayer(result['OUTPUT'], 'Unique Values', 'ogr')\n    QgsProject.instance().addMapLayer(summary_layer)\n\nlist_unique_values()"
    },
    {
        "tool_id": "qgis:meanandstandarddeviationplot",
        "toolname": "meanandstandarddeviationplot",
        "tool_description": "Creates a box plot with mean and standard deviation values.",
        "parameters": "INPUT: Input table. Input vector layer. Type: [vector: any]\nNAME_FIELD: Category name field. Categorical field to use for grouping the boxes \n(X axis). Type: [tablefield: any] \nVALUE_FIELD: Value field. Value to use for the plot \n(Y axis).. Type: [tablefield: any] \nOUTPUT: Plot. Specify the \nHTML file for the plot. One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] outputs = \nOUTPUT: Plot. \nHTML file with the plot.Available in the Processing \u25ba Result Viewer .. Type: [html]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_plot():\n    input_path = 'D:/Data/InputTable.shp'\n    output_path = 'C:/output_path/output_plot.html'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Table', 'ogr')\n\n    result = processing.run('qgis:meanandstandarddeviationplot', {\n        'INPUT': input_layer,\n        'NAME_FIELD': 'CategoryField',  # Specify the field name for categories\n        'VALUE_FIELD': 'ValueField',  # Specify the field name for values\n        'OUTPUT': output_path  # Specify the output HTML file path\n    })\n\n    print(f\"\"\"Plot generated: {result['OUTPUT']}\")\n\ngenerate_plot()"
    },
    {
        "tool_id": "qgis:minimumboundinggeometry",
        "toolname": "minimumboundinggeometry",
        "tool_description": "Creates geometries which enclose the features from an input layer. The features can be grouped by a field. The output layer will then contain one feature per group value with a geometry (MBB) that covers the geometries of the features with matching value.\nThe following enclosing geometry types are supported:",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nFIELD: Field Optional. Features can be grouped by a field.If set, this causes the output layer to contain one feature pergrouped value with a minimal geometry covering only thefeatures with matching values.. Type: [tablefield: any]\nTYPE: Geometry type. Enclosing geometry types. One of: 0 \u2014 Envelope (Bounding Box) 1 \u2014 Minimum Oriented Rectangle 2 \u2014 Minimum Enclosing Circle 3 \u2014 Convex Hull. Type: [enumeration] Default: 0\nOUTPUT: Bounding geometry. Specify the output polygon vector layer. One of: Create Temporary Layer ( TEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_bounding_geometry():\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/output_layer.shp'\n\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    result = processing.run('qgis:minimumboundinggeometry', {\n        'INPUT': input_path,\n        'FIELD': None,  # Optional: Specify a field for grouping\n        'TYPE': 0,  # 0 \u2014 Envelope (Bounding Box), 1 \u2014 Minimum Oriented Rectangle, 2 \u2014 Minimum Enclosing Circle, 3 \u2014 Convex Hull\n        'OUTPUT': output_path\n    })\n\n    bounding_geometry_layer = QgsVectorLayer(result['OUTPUT'], 'Bounding Geometry', 'ogr')\n    QgsProject.instance().addMapLayer(bounding_geometry_layer)\n\n# Execute the function\ngenerate_bounding_geometry()"
    },
    {
        "tool_id": "qgis:pointsdisplacement",
        "toolname": "pointsdisplacement",
        "tool_description": "Given a distance of proximity, identifies nearby point features and radially distributes them over a circle whose center represents their barycenter. A convenient tool to scatter overlaid features.",
        "parameters": "INPUT: Input layer. Input point vector layer. Type: [vector: point]\nPROXIMITY: Minimum distance to other points. Distance below which point features areconsidered close.Close features are distributed altogether.. Type: [number] Default: 1.0 \nDISTANCE: Displacement distance. Radius of the circle on which close features are placed. Type: [number] Default: 1.0 \nHORIZONTAL: Horizontal distribution for two point case. When only two points are identified as close, aligns themhorizontally on the circle instead of vertically.. Type: [boolean] Default: False \nOUTPUT: Displaced. Specify the output vector layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Displaced. Output point vector layer. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef points_displacement(input_layer_path, output_path):\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'PROXIMITY': 1.0,\n        'DISTANCE': 1.0,\n        'HORIZONTAL': False,\n        'OUTPUT': output_path                                                     \n    }\n\n    result = processing.run(\"qgis:pointsdisplacement\", parameters)\n\n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Displaced Points', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\ninput_layer_path = 'D:/Data/InputPoints.shp'\noutput_path = 'D:/Output/DisplacedPoints.shp'\npoints_displacement(input_layer_path, output_path)"
    },
    {
        "tool_id": "qgis:polarplot",
        "toolname": "polarplot",
        "tool_description": "Generates a polar plot based on the value of an input vector layer.\nTwo fields must be entered as parameters: one that defines the category each feature (to group features) and another one with the variable to plot (this has to be a numeric one).",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nNAME_FIELD: Category name field. Categorical field to use for grouping the features (X axis). Type: [tablefield: any]\nVALUE_FIELD: Value field. Value to use for the plot (Y axis).. Type: [tablefield: any]\nOUTPUT: Polar plot. Specify the HTML file for the plot. One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file]",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_polar_plot():\n    # Define input and output paths\n    input_path = 'D:/Data/Data.shp'\n    output_path = 'C:/output_path/plot.html'\n\n    # Load the input layer as a vector layer\n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    # Run the Polar Plot algorithm\n    result = processing.run('qgis:polarplot', {\n        'INPUT': input_path,\n        'NAME_FIELD': 'Category',\n        'VALUE_FIELD': 'Value',\n        'OUTPUT': output_path\n    })\n\n    # Optionally, you could load the output if necessary (e.g., HTML file in a specific viewer)\n\n# Execute the function\ngenerate_polar_plot()"
    },
    {
        "tool_id": "qgis:postgisexecuteandloadsql",
        "toolname": "postgisexecuteandloadsql",
        "tool_description": "Allows a SQL database query to be performed on a PostgreSQL database connected to QGIS and loads the result. The algorithm won\u2019t create a new layer: it is designed to run queries on the layer itself.\nExample",
        "parameters": "DATABASE: Database (connection name). The database connection (not the database name).Existing connections will be shown in the combobox.. Type: [string]\nSQL: \nSQL query. Defines the \nSQL query, for example \nUPDATE my_table \nSET field=10 .. Type: [string] \nID_FIELD: Unique \nID field name. Sets the primary key field (a column in the result table). Type: [string] Default: id \nGEOMETRY_FIELD: Geometry field name Optional. Name of the geometry column (a column in the result table). Type: [string] Default: \u2018geom\u2019 outputs = \nOUTPUT: \nSQL layer. The resulting vector layer to be loaded into \nQGIS.. Type: [vector: any]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef execute_and_load_sql():\n    output_path = 'C:/Users/Output/result_layer.gpkg'\n\n    # Define the parameters\n    parameters = {\n        'DATABASE': 'my_database_connection',  # specify the existing connection name\n        'SQL': 'SELECT * FROM my_table',\n        'ID_FIELD': 'id',\n        'GEOMETRY_FIELD': '',\n        'OUTPUT': output_path\n    }\n\n    # Run the PostGIS execute and load SQL command\n    result = processing.run(\"\"\"qgis:postgisexecuteandloadsql\", parameters)\n\n                              \n    result_layer = QgsVectorLayer(result['OUTPUT'], 'SQL_Result', 'ogr')\n    QgsProject.instance().addMapLayer(result_layer)\n\n                      \nexecute_and_load_sql()"
    },
    {
        "tool_id": "qgis:randomextractwithinsubsets",
        "toolname": "randomextractwithinsubsets",
        "tool_description": "Takes a vector layer and generates a new one that contains only a subset of the features in the input layer.\nThe subset is defined randomly, based on feature IDs, using a percentage or count value to define the total number of features in the subset. The percentage/count value is not applied to the whole layer, but instead to each category. Categories are defined according to a given attribute.",
        "parameters": "INPUT: Input layer. Vector layer to select the features from. Type: [vector: any]\nFIELD: \nID field. Category of the source vector layer to select the features from. Type: [tablefield: any] \nMETHOD: Method. Random selection method. One of: 0 \u2014 Number of selected features 1 \u2014 Percentage of selected features. Type: [enumeration] Default: 0 \nNUMBER: Number/percentage of selected features. Number or percentage of features to select. Type: [number] Default: 10 \nOUTPUT: Extracted (random stratified). Specify the output vector layer for the randomlyselected features.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Extracted (random stratified). Vector layer containing randomly selected features fromthe input layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef random_extract_within_subsets():\n    input_path = 'D:/input_layer.shp'\n    output_path = 'C:/Users/Output/extracted_random_stratified.shp'\n    input_layer = QgsVectorLayer(input_path, \"\"\"RandomExtractWithinSubsets\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'FIELD': 'category_field',\n        'METHOD': 0,                                                                                     \n        'NUMBER': 10,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"qgis:randomextractwithinsubsets\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'ExtractedRandomStratified', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nrandom_extract_within_subsets()"
    },
    {
        "tool_id": "qgis:randompointsalongline",
        "toolname": "randompointsalongline",
        "tool_description": "Takes a vector layer and generates a new one that contains only a subset of the features in the input layer.\nThe subset is defined randomly, based on feature IDs, using a percentage or count value to define the total number of features in the subset. The percentage/count value is not applied to the whole layer, but instead to each category. Categories are defined according to a given attribute.",
        "parameters": "INPUT: Input layer. Vector layer to select the features from. Type: [vector: any]\nFIELD: \nID field. Category of the source vector layer to select the features from. Type: [tablefield: any] \nMETHOD: Method. Random selection method. One of: 0 \u2014 Number of selected features 1 \u2014 Percentage of selected features. Type: [enumeration] Default: 0 \nNUMBER: Number/percentage of selected features. Number or percentage of features to select. Type: [number] Default: 10 \nOUTPUT: Extracted (random stratified). Specify the output vector layer for the randomlyselected features.One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = \nOUTPUT: Extracted (random stratified). Vector layer containing randomly selected features fromthe input layer. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef random_extract_within_subsets():\n    input_path = 'D:/input_layer.shp'\n    output_path = 'C:/Users/Output/extracted_random_stratified.shp'\n    input_layer = QgsVectorLayer(input_path, \"\"\"RandomExtractWithinSubsets\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'FIELD': 'category_field',\n        'METHOD': 0,                                                                                     \n        'NUMBER': 10,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"qgis:randomextractwithinsubsets\", parameters)\n    \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'ExtractedRandomStratified', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\nrandom_extract_within_subsets()"
    },
    {
        "tool_id": "qgis:randompointsinlayerbounds",
        "toolname": "randompointsinlayerbounds",
        "tool_description": "Creates a new point layer with a given number of random points, all of them within the extent of a given layer.\nA minimum distance can be specified, to avoid points being too close to each other.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "INPUT: Input layer. Input polygon layer defining the area. Type: [vector: polygon]\nPOINTS_NUMBER: Number of points. Number of points to create. Type: [number] Default: 1 \nMIN_DISTANCE: Minimum distance between points. The minimum distance between points. Type: [number] Default: 0.0 \nOUTPUT: Random points. The output random points. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Random points. The output random points layer.. Type: [vector: point]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_random_points():\n    input_layer_path = 'D:/input_polygon_layer.shp'\n    output_path = 'D:/output_random_points.shp'\n    \n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Polygon Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer_path,\n        'POINTS_NUMBER': 1,                                      \n        'MIN_DISTANCE': 0.0,                                           \n        'OUTPUT': output_path                                                                   \n    }\n\n    result = processing.run('qgis:randompointsinlayerbounds', parameters)\n    \n    random_points_layer = QgsVectorLayer(result['OUTPUT'], 'Random Points', 'ogr')\n    QgsProject.instance().addMapLayer(random_points_layer)\n\ngenerate_random_points()"
    },
    {
        "tool_id": "qgis:randompointsinsidepolygons",
        "toolname": "randompointsinsidepolygons",
        "tool_description": "Creates a new point layer with a given number of random points inside each polygon of the input polygon layer.\nTwo sampling strategies are available:\nA minimum distance can be specified, to avoid points being too close to each other.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "INPUT: Input layer. Input polygon vector layer. Type: [vector: polygon]\nSTRATEGY: Sampling strategy. Sampling strategy to use. One of: 0 \u2014 Points count: number of points for each feature 1 \u2014 Points density: density of points for each feature. Type: [enumeration] Default: 0 \nVALUE: Point count or density. The number or density of points, depending on the chosen Sampling strategy .. Type: [number ] Default: 1.0 \nMIN_DISTANCE: Minimum distance between points. The minimum distance between points. Type: [number] Default: 0.0 \nOUTPUT: Random points. The output random points. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Random points. The output random points layer.. Type: [vector: point]\n",
        "code_example": "# Import necessary modules\nfrom qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef generate_random_points():\n    # Define the input and output paths\n    input_path = 'D:/input_polygon_layer.shp'\n    output_dir = 'C:/Users/Output'\n    output_file_name = \"\"\"random_points_output.shp\"\n    output_path = f\"{output_dir}/{output_file_name}\"\n    \n                          \n    input_layer = QgsVectorLayer(input_path, \"Input_Polygon\", \"ogr\")\n    \n                                             \n    random_points_params = {\n        'INPUT': input_path,\n        'STRATEGY': 0,                                                 \n        'VALUE': 1.0,\n        'MIN_DISTANCE': 0.0,\n        'OUTPUT': output_path\n    }\n    \n                                                 \n    result = processing.run(\"qgis:randompointsinsidepolygons\", random_points_params)\n    \n                                            \n    random_points_layer = QgsVectorLayer(result['OUTPUT'], 'Random_Points', 'ogr')\n    QgsProject.instance().addMapLayer(random_points_layer)\n\n                      \ngenerate_random_points()"
    },
    {
        "tool_id": "qgis:randomselection",
        "toolname": "randomselection",
        "tool_description": "Takes a vector layer and selects a subset of its features. No new layer is generated by this algorithm.\nThe subset is defined randomly, based on feature IDs, using a percentage or count value to define the total number of features in the subset.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "INPUT: Input layer. Vector layer for the selection. Type: [vector: any]\nMETHOD: Method. Random selection method. One of: 0 \u2014 Number of selected features 1 \u2014 Percentage of selected features. Type: [enumeration] Default: 0 \nNUMBER: Number/percentage of selected features. Number or percentage of features to select. Type: [number] Default: 10 outputs = \nINPUT: Input layer. The input layer with features selected. Type: [same as input]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef random_selection():\n    input_path = 'path/to/your/input_layer.shp'\n    output_path = 'path/to/save/selected_features.shp'\n    \n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'METHOD': 0,                                                                        \n        'NUMBER': 10,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"qgis:randomselection\", parameters)\n    \n    selected_layer = QgsVectorLayer(result['OUTPUT'], 'Randomly_Selected_Features', 'ogr')\n    QgsProject.instance().addMapLayer(selected_layer)\n\nrandom_selection()"
    },
    {
        "tool_id": "qgis:randomselectionwithinsubsets",
        "toolname": "randomselectionwithinsubsets",
        "tool_description": "Takes a vector layer and selects a subset of its features. No new layer is generated by this algorithm.\nThe subset is defined randomly, based on feature IDs, using a percentage or count value to define the total number of features in the subset.\nThe percentage/count value is not applied to the whole layer, but instead to each category.\nCategories are defined according to a given attribute, which is also specified as an input parameter for the algorithm.\nNo new outputs are created.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "INPUT: Input layer. Vector layer to select features in. Type: [vector: any]\nFIELD: \nID field. Category of the input layer to select the features from. Type: [tablefield: any] \nMETHOD: Method. Random selection method. One of: 0 \u2014 Number of selected features 1 \u2014 Percentage of selected features. Type: [enumeration] Default: 0 \nNUMBER: Number/percentage of selected features. Number or percentage of features to select. Type: [number] Default: 10 outputs = \nINPUT: Input layer. The input layer with features selected. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef random_selection_within_subsets():\n    # Define the input and output paths\n    input_layer_path = \"\"\"D:/Data/Your_Shapes.shp\"\n    output_path = \"D:/workspace_directory/random_selection_output.shp\"\n\n                          \n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n\n                           \n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELD': 'your_field_name',\n        'METHOD': 0,                                                                        \n        'NUMBER': 10,\n        'OUTPUT': output_path\n    }\n\n                                                           \n    result = processing.run(\"qgis:randomselectionwithinsubsets\", parameters)\n\n                              \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Random_Selection_Output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nrandom_selection_within_subsets()"
    },
    {
        "tool_id": "qgis:rastercalculator",
        "toolname": "rastercalculator",
        "tool_description": "Takes a vector layer and selects a subset of its features. No new layer is generated by this algorithm.\nThe subset is defined randomly, based on feature IDs, using a percentage or count value to define the total number of features in the subset.\nThe percentage/count value is not applied to the whole layer, but instead to each category.\nCategories are defined according to a given attribute, which is also specified as an input parameter for the algorithm.\nNo new outputs are created.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "INPUT: Input layer. Vector layer to select features in. Type: [vector: any]\nFIELD: \nID field. Category of the input layer to select the features from. Type: [tablefield: any] \nMETHOD: Method. Random selection method. One of: 0 \u2014 Number of selected features 1 \u2014 Percentage of selected features. Type: [enumeration] Default: 0 \nNUMBER: Number/percentage of selected features. Number or percentage of features to select. Type: [number] Default: 10 outputs = \nINPUT: Input layer. The input layer with features selected. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef random_selection_within_subsets():\n    # Define the input and output paths\n    input_layer_path = \"\"\"D:/Data/Your_Shapes.shp\"\n    output_path = \"D:/workspace_directory/random_selection_output.shp\"\n\n                          \n    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n\n                           \n    parameters = {\n        'INPUT': input_layer_path,\n        'FIELD': 'your_field_name',\n        'METHOD': 0,                                                                        \n        'NUMBER': 10,\n        'OUTPUT': output_path\n    }\n\n                                                           \n    result = processing.run(\"qgis:randomselectionwithinsubsets\", parameters)\n\n                              \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Random_Selection_Output', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nrandom_selection_within_subsets()"
    },
    {
        "tool_id": "qgis:rasterlayerhistogram",
        "toolname": "rasterlayerhistogram",
        "tool_description": "Generates a histogram with the values of a raster layer.",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nBAND: Band number. Raster band to use for the histogram. Type: [raster band]\nBINS: number of bins. The number of bins to use in the histogram (X axis).Minimum 2.. Type: [number] Default: 10\nOUTPUT: Histogram. Specify the HTML file for the plot. One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file]",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef generate_histogram():\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'D:/Output/Histogram.html'\n    \n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n    \n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,\n        'BINS': 10,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run('qgis:rasterlayerhistogram', parameters)\n    \n    QgsProject.instance().addMapLayer(input_layer)\n\ngenerate_histogram()"
    },
    {
        "tool_id": "qgis:rectanglesovalsdiamondsvariable",
        "toolname": "rectanglesovalsdiamondsvariable",
        "tool_description": "Generates a histogram with the values of a raster layer.",
        "parameters": "INPUT: Input layer. Input raster layer. Type: [raster]\nBAND: Band number. Raster band to use for the histogram. Type: [raster band]\nBINS: number of bins. The number of bins to use in the histogram (X axis).Minimum 2.. Type: [number] Default: 10\nOUTPUT: Histogram. Specify the HTML file for the plot. One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file]",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef generate_histogram():\n    input_path = 'D:/Data/InputRaster.tif'\n    output_path = 'D:/Output/Histogram.html'\n    \n    input_layer = QgsRasterLayer(input_path, 'Input Raster')\n    \n    parameters = {\n        'INPUT': input_layer,\n        'BAND': 1,\n        'BINS': 10,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run('qgis:rasterlayerhistogram', parameters)\n    \n    QgsProject.instance().addMapLayer(input_layer)\n\ngenerate_histogram()"
    },
    {
        "tool_id": "qgis:regularpoints",
        "toolname": "regularpoints",
        "tool_description": "Creates a new point layer with its points placed in a regular grid within a given extent.\nThe grid is specified either by the spacing between the points (same spacing for all dimensions) or by the number of points to generate. In the latter case, the spacing will be determined from the extent. In order to generate a full rectangular grid, at least the number of points specified by the user is generated for the latter case.\nRandom offsets to the point spacing can be applied, resulting in a non-regular point pattern.\nDefault menu: Vector \u25ba Research Tools",
        "parameters": "EXTENT: Input extent (xmin, xmax, ymin, ymax). Map extent for the random points Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent]\nSPACING: Point spacing/count. Spacing between the points, or the number of points, dependingon whether Use point spacing is checked or not.. Type: [number] Default: 100 \nINSET: Initial inset from corner \n(LH side). Offsets the points relative to the upper left corner.The value is used for both the \nX and \nY axis.. Type: [number] Default: 0.0 \nRANDOMIZE: Apply random offset to point spacing. If checked the points will have a random spacing. Type: [boolean] Default: False \nIS_SPACING: Use point spacing. If unchecked the point spacing is not taken into account. Type: [boolean] Default: True \nCRS: Output layer \nCRS. \nCRS of the random points layer. Type: [crs] Default: Project \nCRS \nOUTPUT: Regular points. Specify the output regular point layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] outputs = \nOUTPUT: Regular points. The output regular point layer.. Type: [vector: point]\n",
        "code_example": "from qgis.core import QgsProject, QgsVectorLayer\nimport processing\n\ndef create_regular_points():\n    # Define output path\n    output_path = \"\"\"C:/Users/Output/regular_points_output.shp\"\n\n                                                  \n    parameters = {\n        'EXTENT': 'xmin,xmax,ymin,ymax',                                                                                                                  \n        'SPACING': 100,                 \n        'INSET': 0.0,                 \n        'RANDOMIZE': False,                   \n        'IS_SPACING': True,                  \n        'CRS': 'Project CRS',                         \n        'OUTPUT': output_path                                    \n    }\n\n                                      \n    result = processing.run(\"qgis:regularpoints\", parameters)\n\n                                     \n    regular_points_layer = QgsVectorLayer(result['OUTPUT'], 'Regular Points', 'ogr')\n    QgsProject.instance().addMapLayer(regular_points_layer)\n\n                      \ncreate_regular_points()"
    },
    {
        "tool_id": "qgis:relief",
        "toolname": "relief",
        "tool_description": "Creates a shaded relief layer from digital elevation data. You can specify the relief color manually, or you can let the algorithm choose automatically all the relief classes.",
        "parameters": "INPUT: Elevation layer. Digital Terrain Model raster layer. Type: [raster]\nZ_FACTOR: \nZ factor. Vertical exaggeration.This parameter is useful when the \nZ units differ fromthe \nX and \nY units, for example feet and meters.You can use this parameter to adjust for this.Increasing the value of this parameter willexaggerate the final result (making it look more \u201chilly\u201d).The default is 1 (no exaggeration).. Type: [number] Default: 1.0 \nAUTO_COLORS: Generate relief classes automatically. If you check this option the algorithm will create allthe relief color classes automatically. Type: [boolean] Default: False \nCOLORS: Relief colors Optional. Use the table widget if you want to choose the reliefcolors manually.You can add as many color classes as you want: for eachclass you can choose the lower and upper bound andfinally by clicking on the color row you can choose thecolor thanks to the color widget. Fig. 28.36 Manually setting of relief color classes \uf0c1 The buttons in the right side panel give you thechance to: add or remove color classes, change theorder of the color classes already defined, open anexisting file with color classes and save the currentclasses as file.. Type: [table widget] \nOUTPUT: Relief. Specify the output relief raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nFREQUENCY_DISTRIBUTION: Frequency distribution Optional. Specify the \nCSV table for the output frequency distribution.One of: Skip Output Save to a Temporary File Save to File\u2026. Type: [table] Default: [Skip output] outputs = \nOUTPUT: Relief. The output relief raster layer. Type: [raster] \nOUTPUT: Frequency distribution. The output frequency distribution. Type: [table]\n",
        "code_example": "import processing\nfrom qgis.core import QgsRasterLayer, QgsProject\n\ndef generate_relief(input_layer_path, output_path):\n    # Load the input raster layer\n    input_layer = QgsRasterLayer(input_layer_path, \"\"\"Elevation Layer\")\n\n                                                    \n    parameters = {\n        'INPUT': input_layer_path,\n        'Z_FACTOR': 1.0,\n        'AUTO_COLORS': False,\n        'COLORS': None,                                                                   \n        'OUTPUT': output_path,\n        'FREQUENCY_DISTRIBUTION': None                                                      \n    }\n\n                              \n    result = processing.run('qgis:relief', parameters)\n\n                                            \n    relief_layer = QgsRasterLayer(result['OUTPUT'], 'Relief')\n    QgsProject.instance().addMapLayer(relief_layer)\n\n                      \ninput_layer_path = 'D:/Data/Elevation.tif'\noutput_path = 'C:/output_path/output_relief.tif'\ngenerate_relief(input_layer_path, output_path)"
    },
    {
        "tool_id": "qgis:scatter3dplot",
        "toolname": "scatter3dplot",
        "tool_description": "Creates a 3D scatter plot for a vector layer.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nXFIELD: \nX attribute. Field to use for the \nX axis. Type: [tablefield: any] \nYFIELD: \nY attribute. Field to use for the \nY axis. Type: [tablefield: any] \nZFIELD: \nZ attribute. Field to use for the \nZ axis. Type: [tablefield: any] \nOUTPUT: Histogram. Specify the \nHTML file for the plot. One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] outputs = \nOUTPUT: Histogram. \nHTML file with the plot.Available in the Processing \u25ba Result Viewer .. Type: [html]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef generate_scatter3d_plot():\n    input_path = 'D:/Data/Points.shp'\n    output_path = 'C:/output_path/scatter_plot.html'\n\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n\n    parameters = {\n        'INPUT': input_layer,\n        'XFIELD': 'X_value',\n        'YFIELD': 'Y_value',\n        'ZFIELD': 'Z_value',\n        'OUTPUT': output_path                                            \n    }\n\n    result = processing.run(\"qgis:scatter3dplot\", parameters)\n\n                      \ngenerate_scatter3d_plot()"
    },
    {
        "tool_id": "qgis:selectbyattribute",
        "toolname": "selectbyattribute",
        "tool_description": "This algorithm creates a selection in a vector layer. The criteria for selected features is defined based on the values of an attribute from the input layer.",
        "parameters": "INPUT: Vector layer to select features in\nFIELD: Filtering field of the layer \nOPERATOR: Many different operators are available: [0: =, 1: !=, 2: >, 3:>=, 4:<, 5:<=, 6: begins with, 7: contains, 8:is null, 9: is not null, 10:does not contain \nVALUE: Value to be evaluated \nMETHOD: How the selection of the algorithm should be managed. One of:0 \u2014 creating new selection, 1 \u2014 adding to current selection, 2 \u2014 removing from current selection, 3 \u2014 selecting within current selection \nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer \n(TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\n    from qgis.core import QgsProject,QgsVectorLayer\n    def select_by_attribute(input_layer_path):\n        # Define the parameters\n        input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n\n        # Define the parameters Example below:\n        field_name = \n        parameters = {\n            'INPUT': input_layer_path,\n            'FIELD': 'Population',\n            'OPERATOR': 4, # Select the appropriate operator based on the task. Many different operators are available:0 \u2014 =,1 \u2014 \u2260, 2 \u2014 >, 3 \u2014 >=, 4 \u2014 <, 5 \u2014 <=, 6 \u2014 begins with, 7 \u2014 contains, 8 \u2014 is null, 9 \u2014 is not null, 10 \u2014 does not contain\n            'VALUE': 3000,\n\t\t\t'METHOD': 0,\n            'OUTPUT': output_layer_path\n        }\n        # Perform the extract by attribute operation\n        result = processing.run(\"qgis:selectbyattribute\", parameters)\n        # Load the selected features as a new layer\n        output_layer = QgsVectorLayer(output_path, 'Population_less_than_3000', 'ogr')\n        QgsProject.instance().addMapLayer(output_layer)\n    input_layer_path = \"D:/Data/PrevalenceData.shp\"  # path to the input shapefile\n    output_layer_path =\"D:/workspace_directory/output_layer.shp\"\n    select_by_attribute(input_layer_path)"
    },
    {
        "tool_id": "qgis:selectbyexpression",
        "toolname": "selectbyexpression",
        "tool_description": "This algorithm creates a new vector layer that only contains matching features from an input layer. The criteria for adding features to the resulting layer is based on a QGIS expression.",
        "parameters": "INPUT: Input vector layer\nEXPRESSION: Expression to filter the vector layer\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\n    from qgis.core import QgsProject,QgsVectorLayer\n    def extract_by_expression(input_layer_path):\n        # Define the parameters\n        input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    \n        # Define the parameters Example below:\n        parameters = {\n            'INPUT': input_layer_path,\n            'EXPRESSION':' \"STATEFP\"  =\\'42\\' AND  \"Obesity\" <30',\n            'OUTPUT': output_layer_path\n        }\n        # Perform the extract by attribute operation\n        result = processing.run(\"qgis:selectbyexpression\", parameters)\n        # Load the selected features as a new layer\n        output_layer = QgsVectorLayer(output_path, 'PA_Obesity<30', 'ogr')\n        QgsProject.instance().addMapLayer(output_layer)\n    input_layer_path = \"D:/Data/PrevalenceData.shp\"  # path to the input shapefile\n    output_layer_path =\"D:/workspace_directory/output_layer.shp\"\n    select_by_attribute(input_layer_path)"
    },
    {
        "tool_id": "qgis:setstyleforrasterlayer",
        "toolname": "setstyleforrasterlayer",
        "tool_description": "This algorithm creates a new vector layer that only contains matching features from an input layer. The criteria for adding features to the resulting layer is based on a QGIS expression.",
        "parameters": "INPUT: Input vector layer\nEXPRESSION: Expression to filter the vector layer\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\n    from qgis.core import QgsProject,QgsVectorLayer\n    def extract_by_expression(input_layer_path):\n        # Define the parameters\n        input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    \n        # Define the parameters Example below:\n        parameters = {\n            'INPUT': input_layer_path,\n            'EXPRESSION':' \"STATEFP\"  =\\'42\\' AND  \"Obesity\" <30',\n            'OUTPUT': output_layer_path\n        }\n        # Perform the extract by attribute operation\n        result = processing.run(\"qgis:selectbyexpression\", parameters)\n        # Load the selected features as a new layer\n        output_layer = QgsVectorLayer(output_path, 'PA_Obesity<30', 'ogr')\n        QgsProject.instance().addMapLayer(output_layer)\n    input_layer_path = \"D:/Data/PrevalenceData.shp\"  # path to the input shapefile\n    output_layer_path =\"D:/workspace_directory/output_layer.shp\"\n    select_by_attribute(input_layer_path)"
    },
    {
        "tool_id": "qgis:setstyleforvectorlayer",
        "toolname": "setstyleforvectorlayer",
        "tool_description": "This algorithm creates a new vector layer that only contains matching features from an input layer. The criteria for adding features to the resulting layer is based on a QGIS expression.",
        "parameters": "INPUT: Input vector layer\nEXPRESSION: Expression to filter the vector layer\nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File\u2026;\n        Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "import processing\n    from qgis.core import QgsProject,QgsVectorLayer\n    def extract_by_expression(input_layer_path):\n        # Define the parameters\n        input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")\n    \n        # Define the parameters Example below:\n        parameters = {\n            'INPUT': input_layer_path,\n            'EXPRESSION':' \"STATEFP\"  =\\'42\\' AND  \"Obesity\" <30',\n            'OUTPUT': output_layer_path\n        }\n        # Perform the extract by attribute operation\n        result = processing.run(\"qgis:selectbyexpression\", parameters)\n        # Load the selected features as a new layer\n        output_layer = QgsVectorLayer(output_path, 'PA_Obesity<30', 'ogr')\n        QgsProject.instance().addMapLayer(output_layer)\n    input_layer_path = \"D:/Data/PrevalenceData.shp\"  # path to the input shapefile\n    output_layer_path =\"D:/workspace_directory/output_layer.shp\"\n    select_by_attribute(input_layer_path)"
    },
    {
        "tool_id": "qgis:statisticsbycategories",
        "toolname": "statisticsbycategories",
        "tool_description": "Calculates statistics of a field depending on a parent class. The parent class is a combination of values from other fields.",
        "parameters": "INPUT: Input vector layer. Input vector layer with unique classes and values. Type: [vector: any]\nVALUES_FIELD_NAME: Field to calculate statistics on (if empty, only count is calculated) Optional. If empty only the count will be calculated. Type: [tablefield: any] \nCATEGORIES_FIELD_NAME: Field(s) with categories. The fields that (combined) define the categories. Type: [vector: any] [list] \nOUTPUT: Statistics by category. Specify the output table for the generated statistics. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [table] Default: [Create temporary layer] outputs = \nOUTPUT: Statistics by category. Table containing the statistics. Type: [table]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef calculate_statistics_by_category(input_layer_path, output_path):\n    # Load the vector layer\n    input_layer = QgsVectorLayer(input_layer_path, \"\"\"Input Layer\", \"ogr\")\n\n                           \n    parameters = {\n        'INPUT': input_layer_path,\n        'VALUES_FIELD_NAME': 'value_field',            \n        'CATEGORIES_FIELD_NAME': ['category_field1', 'category_field2'],                    \n        'OUTPUT': output_path\n    }\n\n                                                \n    result = processing.run('qgis:statisticsbycategories', parameters)\n\n                                                  \n    stats_layer = QgsVectorLayer(result['OUTPUT'], 'Statistics by Category', 'ogr')\n    QgsProject.instance().addMapLayer(stats_layer)\n\n                                         \ninput_layer_path = 'D:/Data/Input_data.shp'\noutput_path = 'D:/workspace_directory/output_stats.gpkg'\n\n                      \ncalculate_statistics_by_category(input_layer_path, output_path)"
    },
    {
        "tool_id": "qgis:texttofloat",
        "toolname": "texttofloat",
        "tool_description": "Modifies the type of a given attribute in a vector layer, converting a text attribute containing numeric strings into a numeric attribute (e.g. \u20181\u2019 to 1.0 ).\nThe algorithm creates a new vector layer so the source one is not modified.\nIf the conversion is not possible the selected column will have NULL values.",
        "parameters": "INPUT: Input layer. The input vector layer.. Type: [vector: any]\nFIELD: Text attribute to convert to float. The string field for the input layer that is to be convertedto a float field.. Type: [tablefield: string] \nOUTPUT: Float from text. Specify the output layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 Append to Layer\u2026 The file encoding can also be changed here.. Type: [same as input] Default: [Create Temporary Layer] outputs = \nOUTPUT: Float from text. Output vector layer with the string field converted intoa float field. Type: [same as input]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef convert_text_to_float():\n    # Define the input and output paths\n    input_path = 'D:/input_layer.shp'\n    output_path = 'D:/output_layer.shp'\n\n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, \"\"\"Input Layer\", \"ogr\")\n\n                                                     \n    parameters = {\n        'INPUT': input_path,\n        'FIELD': 'TextField',                                       \n        'OUTPUT': output_path                                                                                                                    \n    }\n\n                                      \n    result = processing.run(\"qgis:texttofloat\", parameters)\n\n                              \n    output_layer = QgsVectorLayer(result['OUTPUT'], 'Converted_Float_Field', 'ogr')\n    QgsProject.instance().addMapLayer(output_layer)\n\n                      \nconvert_text_to_float()"
    },
    {
        "tool_id": "qgis:tininterpolation",
        "toolname": "tininterpolation",
        "tool_description": "Generates a Triangulated Irregular Network (TIN) interpolation of a point vector layer.\nWith the TIN method you can create a surface formed by triangles of nearest neighbor points. To do this, circumcircles around selected sample points are created and their intersections are connected to a network of non overlapping and as compact as possible triangles. The resulting surfaces are not smooth.\nThe algorithm creates both the raster layer of the interpolated values and the vector line layer with the triangulation boundaries.",
        "parameters": "INTERPOLATION_DATA: Input layer(s). Vector layer(s) and field(s) to use for the interpolation,coded in a string (see the ParameterInterpolationData class in InterpolationWidgets for more details). The following\nGUI elements are provided to compose theinterpolation data string: Vector layer [vector: any] Interpolation attribute [tablefield: numeric]:Attribute to use in the interpolation Use Z-coordinate for interpolation [boolean]:Uses the layer\u2019s stored \nZ values (Default: False) For each of the added layer-field combinations, a type canbe chosen: Points Structured lines Break lines In the string, the layer-field elements are separated by ::|:: .The sub-elements of the layer-field elements are separated by ::~:: .. Type: [string] \nMETHOD: Interpolation method. Set the interpolation method to be used. One of: Linear Clough-Toucher (cubic). Type: [enumeration] Default: 0 \nEXTENT: Extent (xmin, xmax, ymin, ymax). Extent of the output raster layer. Available methods are: Calculate from layer\u2026: uses extent of a layer loaded in the current project Calculate from layout map\u2026: uses extent of a layout map item in the active project Calculate from bookmark\u2026: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] \nPIXEL_SIZE: Output raster size. Pixel size of the output raster layer in layer units. In the \nGUI, the size can be specified by the number of rows( Number of rows ) / columns ( Number of columns ) or the pixel size( Pixel Size \nX / Pixel Size \nY ).Increasing the number of rows or columns will decrease the cellsize and increase the file size of the output raster.The values in Rows , Columns , Pixel Size \nX and Pixel Size \nY will be updated simultaneously - doubling thenumber of rows will double the number of columns, and the cellsize will be halved.The extent of the output raster will remain the same(approximately).. Type: [number] Default: 0.1 \nOUTPUT: Interpolated. The output \nTIN interpolation as a raster layer. One of: Save to a Temporary File Save to File\u2026. Type: [raster] Default: [Save to temporary file] \nTRIANGULATION: Triangulation. The output \nTIN as a vector layer. One of: Skip Output Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: line] Default: [Skip output] outputs = \nOUTPUT: Interpolated. The output \nTIN interpolation as a raster layer. Type: [raster] \nTRIANGULATION: Triangulation. The output \nTIN as a vector layer.. Type: [vector: line]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef tin_interpolation():\n    # Define input and output paths\n    input_path = 'D:/Data/Points.shp'\n    output_path = 'C:/output_path/interpolated_raster.tif'\n    \n    # Load the input layer\n    input_layer = QgsVectorLayer(input_path, 'Input Points', 'ogr')\n    \n    # Define the interpolation data string\n    interpolation_data = '{}::~::Elevation::~::0::~::Points'.format(input_path)\n    \n    # Define parameters\n    parameters = {\n        'INTERPOLATION_DATA': interpolation_data,\n        'METHOD': 0,  # Options: [0: 'Linear', 1: 'Clough-Toucher (cubic)']\n        'EXTENT': 'xmin, xmax, ymin, ymax',  # Provide actual values according to dataset\n        'PIXEL_SIZE': 0.1,\n        'OUTPUT': output_path,\n        'TRIANGULATION': 'Skip Output'  # Options: ['Skip Output', 'TEMPORARY_OUTPUT', 'Save to File\u2026', 'Save to Geopackage\u2026', 'Save to Database Table\u2026']\n    }\n    \n    # Perform the TIN interpolation\n    result = processing.run('qgis:tininterpolation', parameters)\n    \n    # Load the interpolated raster layer to QGIS\n    interpolated_layer = QgsVectorLayer(result['OUTPUT'], 'Interpolated Raster', 'gdal')\n    QgsProject.instance().addMapLayer(interpolated_layer)\n\n# Execute the function\ntin_interpolation()"
    },
    {
        "tool_id": "qgis:topologicalcoloring",
        "toolname": "topologicalcoloring",
        "tool_description": "Assigns a color index to polygon features in such a way that no adjacent polygons share the same color index, whilst minimizing the number of colors required.\nThe algorithm allows choice of method to use when assigning colors.\nA minimum number of colors can be specified if desired. The color index is saved to a new attribute named color_id.\nThe following example shows the algorithm with four different colors chosen; as you can see each color class has the same amount of features.",
        "parameters": "INPUT: Input layer. The input polygon layer. Type: [vector: polygon]\nMIN_COLORS: Minimum number of colors. The minimum number of colors to assign.Minimum 1, maximum 1000.. Type: [number] Default: 4 \nMIN_DISTANCE: Minimum distance between features. Prevent nearby (but non-touching) features frombeing assigned equal colors.Minimum 0.0.. Type: [number] Default: 0.0 \nBALANCE: Balance color assignment. Options are: 0 \u2014 By feature count Attempts to assign colors so that the count offeatures assigned to each individual color indexis balanced. 1 \u2014 By assigned area Assigns colors so that the total area of featuresassigned to each color is balanced.This mode can be useful to help avoid largefeatures resulting in one of the colors appearingmore dominant on a colored map. 2 \u2014 By distance between colors Assigns colors in order to maximize the distancebetween features of the same color.This mode helps to create a more uniformdistribution of colors across a map.. Type: [enumeration] Default: 0 \nOUTPUT: Colored. Specify the output layer. One of: Create Temporary Layer ( \nTEMPORARY_OUTPUT ) Save to File\u2026 Save to Geopackage\u2026 Save to Database Table\u2026 The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = \nOUTPUT: Colored. Polygon vector layer with an added color_id column. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsVectorLayer, QgsProject\n\ndef topological_coloring():\n    input_path = 'D:/input_polygon.shp'\n    output_dir = 'C:/Users/Output'\n    output_file_name = 'Colored_Output.shp'\n    output_path = f\"\"\"{output_dir}/{output_file_name}\"\n    \n    input_layer = QgsVectorLayer(input_path, \"InputPolygon\", \"ogr\")\n    \n    parameters = {\n        'INPUT': input_path,\n        'MIN_COLORS': 4,\n        'MIN_DISTANCE': 0.0,\n        'BALANCE': 0,                                                                                         \n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"qgis:topologicalcoloring\", parameters)\n    \n    color_layer = QgsVectorLayer(result['OUTPUT'], 'ColoredOutput', 'ogr')\n    QgsProject.instance().addMapLayer(color_layer)\n\ntopological_coloring()"
    },
    {
        "tool_id": "qgis:variabledistancebuffer",
        "toolname": "variabledistancebuffer",
        "tool_description": "Computes a buffer area for all the features in an input layer.\nThe size of the buffer for a given feature is defined by an attribute, so it allows different features to have different buffer sizes.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nDISTANCE: Distance field. Attribute for the distance radius of the buffer. Type: [tablefield: numeric] \nSEGMENTS: Segments. Controls the number of line segments to use to approximate aquarter circle when creating rounded offsets.. Type: [number] Default: 5 \nDISSOLVE: Dissolve result. Choose to dissolve the final buffer, resulting in a singlefeature covering all input features. Fig. 28.8 Normal and dissolved buffer \uf0c1. Type: [boolean] Default: False \nEND_CAP_STYLE: End cap style. Controls how line endings are handled in the buffer. Fig. 28.9 Round, flat and square cap styles \uf0c1. Type: [enumeration] Default: Round \nJOIN_STYLE: Join style. Specifies whether round, miter or beveled joins should be usedwhen offsetting corners in a line.. Type: [enumeration] Default: Round \nMITER_LIMIT: Miter limit. Only applicable for mitered join styles, and controls themaximum distance from the offset curve to use when creating amitered join.. Type: [number] Default: 2.0 outputs = \nOUTPUT: Buffer. Buffer polygon vector layer.. Type: [vector: polygon]\n",
        "code_example": "import processing\nfrom qgis.core import QgsProject, QgsVectorLayer\n\ndef variable_distance_buffer():\n    input_path = \"\"\"D:/input_layer.shp\"\n    output_path = \"D:/workspace_directory/output_buffered.shp\"\n    \n    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")\n    \n    buffer_params = {\n        'INPUT': input_path,\n        'DISTANCE': 'buffer_field_name',                                                     \n        'SEGMENTS': 5,\n        'DISSOLVE': False,\n        'END_CAP_STYLE': 0,                                         \n        'JOIN_STYLE': 0,                                         \n        'MITER_LIMIT': 2.0,\n        'OUTPUT': output_path\n    }\n    \n    result = processing.run(\"qgis:variabledistancebuffer\", buffer_params)\n    \n    buffered_layer = QgsVectorLayer(output_path, 'Buffered_output', 'ogr')\n    QgsProject.instance().addMapLayer(buffered_layer)\n\nvariable_distance_buffer()"
    },
    {
        "tool_id": "qgis:vectorlayerhistogram",
        "toolname": "vectorlayerhistogram",
        "tool_description": "Generates a histogram with the values of the attribute of a vector layer.\nThe attribute to use for computing the histogram must be numeric.",
        "parameters": "INPUT: Input layer. Input vector layer. Type: [vector: any]\nFIELD: Attribute. Value to use for the plot \n(Y axis).. Type: [tablefield: any] \nBINS: number of bins. The number of bins to use in the histogram \n(X axis).Minimum 2.. Type: [number] Default: 10 \nOUTPUT: Histogram. Specify the \nHTML file for the plot. One of: Save to a Temporary File Save to File\u2026. Type: [html] Default: [Save to temporary file] outputs = \nOUTPUT: Histogram. \nHTML file with the plot.Available in the Processing \u25ba Result Viewer .. Type: [html]\n",
        "code_example": "from qgis.core import QgsVectorLayer, QgsProject\nimport processing\n\ndef create_histogram():\n    input_path = 'D:/Data/PrevalenceData.shp'\n    output_path = '/path/to/output.html'\n  \n    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')\n\n    parameters = {\n        'INPUT': input_layer,\n        'FIELD': 'Attribute',  # Replace with the appropriate attribute name\n        'BINS': 10,  # Default number of bins\n        'OUTPUT': output_path\n    }\n\n    result = processing.run(\"\"\"qgis:vectorlayerhistogram\", parameters)\n\ncreate_histogram()"
    },
    {
        "tool_id": "qgis:vectorlayerscatterplot",
        "toolname": "vectorlayerscatterplot",
        "tool_description": "This algorithm creates a simple X - Y scatter plot for a vector layer.",
        "parameters": "INPUT: Input vector layer\nXFIELD: \nVALUE_FIELD: Value to use for the plot \n(Y axis) \nOUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer \n(TEMPORARY_OUTPUT); Save to File\u2026; Save to Geopackage\u2026; Save to Database Table\u2026; Append to Layer\u2026\n",
        "code_example": "def scatterplot():\n    parameters = {\n        'INPUT': 'D:/Data/PovertyData/PovertyLayerWithXY.shp',\n        'XFIELD': 'x',\n        'YFIELD': 'y',\n        'OUTPUT': 'output_path'\n    }\n    result = processing.run(\"qgis:vectorlayerscatterplot\", parameters)\n    output_layer = result['OUTPUT']\n    print(output_layer)\noutput_path = C:/Data/PovertyData/scatterplot.html #use an output directory\nscatterplot()"
    }
]