
tool_ID = 'DensityMap_kerneldensityestimation'

tool_name = 'Heatmap (Kernel Density Estimation) '

brief_description = '''
 Creates a density (heatmap) raster of an input point vector layer using kernel density estimation. Heatmaps allow easy identification of hotspots and clustering of points.
  The density is calculated based on the number of points in a location, with larger numbers of clustered points resulting in larger values.
'''

parameters ='''


'''

code_example = '''
import geopandas as gpd
import geopandas as gpd
import numpy as np
from scipy.stats import gaussian_kde
import rasterio
from rasterio.transform import from_origin

import geopandas as gpd

# Load the shapefile containing fast-food restaurants
gdf = gpd.read_file('D:/Case_Studies/Data/PA_restaurants/PA_fastfood_restaurants.shp')

# Ensure the GeoDataFrame has a projected coordinate system (not WGS84)
gdf = gdf.to_crs(epsg=26918)  # Using UTM Zone 18N for Pennsylvania, or use your preferred CRS

import numpy as np

# Extract coordinates (x, y) from the GeoDataFrame
coords = np.vstack([gdf.geometry.x, gdf.geometry.y])

from scipy.stats import gaussian_kde

# Perform Kernel Density Estimation
kde = gaussian_kde(coords)

# Define the grid range for the KDE (this sets the area over which you calculate density)
xmin, ymin, xmax, ymax = gdf.total_bounds
xgrid = np.linspace(xmin, xmax, 200)
ygrid = np.linspace(ymin, ymax, 200)
x, y = np.meshgrid(xgrid, ygrid)

# Compute KDE values over the grid
density = kde(np.vstack([x.ravel(), y.ravel()])).reshape(x.shape)

# Optionally scale the density values for better representation
density_scaled = density * 1e6  # Example scaling factor, adjust as necessary


# Step 4: Define file path to save the result
output_file = r'C:\Users\AKINBOYEWA TEMITOPE\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\SpatialAnalysisAgent-master\Default_workspace\kde_output.tif'

# Step 5: Export the KDE raster using Rasterio
transform = from_origin(xmin, ymax, xgrid[1] - xgrid[0], ygrid[1] - ygrid[0])

with rasterio.open(
    output_file, 'w',
    driver='GTiff', 
    height=density.shape[0], width=density_scaled.shape[1],
    count=1, dtype=density_scaled.dtype,
    crs=gdf.crs, transform=transform
) as dst:
    dst.write(density_scaled, 1)

#Step 6

#Displaying the result in QGIS
output_layer = QgsRasterLayer(output_file, 'KDE_Output')
QgsProject.instance().addMapLayer(output_layer)
'''

