tool_ID = "grass7_v.neighbors"
tool_name = "v.neighbors"
brief_description = "kes each cell value a function of the attribute values assigned to the vector points or centroids in a radius around it, and stores new cell values in an output raster map."
synopsis = """v.neighbors
v.neighbors --help
v.neighborsinput=name[layer=string]output=namemethod=stringsize=float[points_column=name]   [cats=range]   [where=sql_query]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
parameters = """input=name[required]
    Name of input vector map
    Or data source for direct OGR access
layer=string
    Layer number or name
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:1
output=name[required]
    Name for output raster map
method=string[required]
    Method for aggregate statistics (count if non given)
    Options:count, sum, average, median, mode, minimum, maximum, range, stddev, variance, diversity
    Default:count
size=float[required]
    Neighborhood diameter in map units
points_column=name
    Column name of points map to use for statistics
    Column of points map must be numeric
cats=range
    Category values
    Example: 1,3,7-9,13
where=sql_query
    WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000"""
flags = """--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def aggregate_statistics():
    input_layer_path = \"""path/to/your/input_layer.shp\"
    output_path = \"path/to/your/output_layer\"
    input_layer = QgsVectorLayer(input_layer_path, \"Input Layer\", \"ogr\")
    
    parameters = {
        'input': input_layer_path,
        'layer': '1',  # Layer number or name
        'output': output_path,
        'method': 'count',  # Options: count, sum, average, median, mode, minimum, maximum, range, stddev, variance, diversity
        'size': 10.0,
        'points_column': '',
        'cats': '',
        'where': ''
    }
    
    result = processing.run(\"grass7:v.neighbors\", parameters)
    
    output_layer = QgsVectorLayer(result['output'], 'Aggregated_Statistics', 'ogr')
    QgsProject.instance().addMapLayer(output_layer)

aggregate_statistics()"""