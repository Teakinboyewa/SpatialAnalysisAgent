tool_ID = "grass7_i.modis.qc"
tool_name = "i.modis.qc"
brief_description = "i.modis.qci.modis.qc- Extracts quality control parameters from MODIS QC layers."
synopsis = """i.modis.qc
i.modis.qc --help
i.modis.qcinput=nameoutput=nameproductname=stringqcname=string[band=string]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
flags = """--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
parameters = """input=name[required]
    Name of input surface reflectance QC layer [bit array]
output=name[required]
    Name for output QC type classification layer
productname=string[required]
    Name of MODIS product type
    Options:mod09Q1, mod09A1, mod09A1s, mod09GA, mod09GAs, mod09CMG, mod09CMGs, mod09CMGi, mod11A1, mod11A2, mod13A2, mcd43B2, mcd43B2q, mod13Q1
    mod09Q1: surf. refl. 250m 8-days
    mod09A1: surf. refl. 500m 8-days
    mod09A1s: surf. refl. 500m 8-days, State QA
    mod09GA: surf. refl. 500m daily
    mod09GAs: surf. refl. 500m daily, State QA
    mod09CMG: surf. refl. 5000m daily
    mod09CMGs: surf. refl. 5000m daily, State QA
    mod09CMGi: surf. refl. 5000m daily, Internal Climatology
    mod11A1: LST 1km daily (Day/Night)
    mod11A2: LST 1km 8-days (Day/Night)
    mod13A2: VI 1km 16-days
    mcd43B2: Brdf-Albedo Quality (Ancillary SDS) 1km 8-days
    mcd43B2q: Brdf-Albedo Quality (BRDF SDS) 1km 8-days
    mod13Q1: VI 250m 16-days
qcname=string[required]
    Name of QC type to extract
    Options:adjcorr, atcorr, cloud, data_quality, diff_orbit_from_500m, modland_qa, mandatory_qa_11A1, data_quality_flag_11A1, emis_error_11A1, lst_error_11A1, data_quality_flag_11A2, emis_error_11A2, mandatory_qa_11A2, lst_error_11A2, aerosol_quantity, brdf_correction_performed, cirrus_detected, cloud_shadow, cloud_state, internal_cloud_algorithm, internal_fire_algorithm, internal_snow_mask, land_water, mod35_snow_ice, pixel_adjacent_to_cloud, salt_pan, icm_cloudy, icm_clear, icm_high_clouds, icm_low_clouds, icm_snow, icm_fire, icm_sun_glint, icm_dust, icm_cloud_shadow, icm_pixel_is_adjacent_to_cloud, icm_cirrus, icm_pan_flag, icm_criteria_for_aerosol_retrieval, icm_aot_has_clim_val, modland_qa, vi_usefulness, aerosol_quantity, pixel_adjacent_to_cloud, brdf_correction_performed, mixed_clouds, land_water, possible_snow_ice, possible_shadow, platform, land_water, sun_z_angle_at_local_noon, brdf_correction_performed, modland_qa, vi_usefulness, aerosol_quantity, pixel_adjacent_to_cloud, brdf_correction_performed, mixed_clouds, land_water, possible_snow_ice, possible_shadow
    adjcorr: mod09: Adjacency Correction
    atcorr: mod09: Atmospheric Correction
    cloud: mod09: Cloud State
    data_quality: mod09: Band-Wise Data Quality Flag
    diff_orbit_from_500m: mod09: 250m Band is at Different Orbit than 500m
    modland_qa: mod13Q1: MODIS Land General Quality Assessment
    mandatory_qa_11A1: mod11A1: MODIS Land General Quality Assessment
    data_quality_flag_11A1: mod11A1: Detailed Quality Indications
    emis_error_11A1: mod11A1: Average Emissivity Error Classes
    lst_error_11A1: mod11A1: Average LST Error Classes
    data_quality_flag_11A2: mod11A2: Detailed Quality Indications
    emis_error_11A2: mod11A2: Average Emissivity Error Classes
    mandatory_qa_11A2: mod11A2: MODIS Land General Quality Assessment
    lst_error_11A2: mod11A2: Average LST Error Classes
    aerosol_quantity: mod13Q1: Quantity range of Aerosol
    brdf_correction_performed: mod13Q1: if BRDF correction performed
    cirrus_detected: mod09*s: StateQA Cirrus Detected
    cloud_shadow: mod09*s: StateQA Cloud Shadow
    cloud_state: mod09*s: StateQA Cloud State
    internal_cloud_algorithm: mod09*s: StateQA Internal Cloud Algorithm
    internal_fire_algorithm: mod09*s: StateQA Internal Fire Algorithm
    internal_snow_mask: mod09*s: StateQA Internal Snow Mask
    land_water: mod13Q1: separate land from various water objects
    mod35_snow_ice: mod09*s: StateQA mod35 Snow Ice
    pixel_adjacent_to_cloud: mod13Q1: if pixel is a cloud neighbour
    salt_pan: mod09*s: StateQA Salt Pan (mod09GAs)
    icm_cloudy: mod09*i: Internal CM: Cloudy
    icm_clear: mod09*i: Internal CM: Clear
    icm_high_clouds: mod09*i: Internal CM: High Clouds
    icm_low_clouds: mod09*i: Internal CM: Low Clouds
    icm_snow: mod09*i: Internal CM: Snow
    icm_fire: mod09*i: Internal CM: Fire
    icm_sun_glint: mod09*i: Internal CM: Sun Glint
    icm_dust: mod09*i: Internal CM: Dust
    icm_cloud_shadow: mod09*i: Internal CM: Cloud Shadow
    icm_pixel_is_adjacent_to_cloud: mod09*i: Internal CM: Pixel is Adjacent to Cloud
    icm_cirrus: mod09*i: Internal CM: Cirrus
    icm_pan_flag: mod09*i: Internal CM: Pan Flag
    icm_criteria_for_aerosol_retrieval: mod09*i: Internal CM: Criteria for Aerosol Retrieval
    icm_aot_has_clim_val: mod09*i: Internal CM: AOT (aerosol optical depth) has clim. val.
    vi_usefulness: mod13Q1: Quality estimation of the pixel
    mixed_clouds: mod13Q1: if pixel mixed with clouds
    possible_snow_ice: mod13Q1: if snow/ice present in pixel
    possible_shadow: mod13Q1: if shadow is present in pixel
    platform: mcd43B2: Quality of BRDF correction performed
    sun_z_angle_at_local_noon: mcd43B2: Quality of BRDF correction performed
band=string
    Band number of MODIS product (mod09Q1=[1,2],mod09A1=[1-7],m[o/y]d09GA=[1-7],m[o/y]d09CMG=[1-7], mcd43B2q=[1-7])
    Options:1, 2, 3, 4, 5, 6, 7
    1: Band 1: Red
    2: Band 2: NIR
    3: Band 3: Blue
    4: Band 4: Green
    5: Band 5: SWIR 1
    6: Band 6: SWIR 2
    7: Band 7: SWIR 3"""
code_example = """
import processing

parameters = {
    'input': 'path/to/input/layer',
    'output': 'path/to/output/layer',
    'productname': 'mod09A1',  # options: mod09Q1, mod09A1, mod09A1s, mod09GA, mod09GAs, mod09CMG, mod09CMGs, mod09CMGi, mod11A1, mod11A2, mod13A2, mcd43B2, mcd43B2q, mod13Q1
    'qcname': 'cloud',  # options: adjcorr, atcorr, cloud, data_quality, diff_orbit_from_500m, modland_qa, mandatory_qa_11A1, data_quality_flag_11A1, emis_error_11A1, lst_error_11A1, data_quality_flag_11A2, emis_error_11A2, mandatory_qa_11A2, lst_error_11A2, aerosol_quantity, brdf_correction_performed, cirrus_detected, cloud_shadow, cloud_state, internal_cloud_algorithm, internal_fire_algorithm, internal_snow_mask, land_water, mod35_snow_ice, pixel_adjacent_to_cloud, salt_pan, icm_cloudy, icm_clear, icm_high_clouds, icm_low_clouds, icm_snow, icm_fire, icm_sun_glint, icm_dust, icm_cloud_shadow, icm_pixel_is_adjacent_to_cloud, icm_cirrus, icm_pan_flag, icm_criteria_for_aerosol_retrieval, icm_aot_has_clim_val, modland_qa, vi_usefulness, aerosol_quantity, pixel_adjacent_to_cloud, brdf_correction_performed, mixed_clouds, land_water, possible_snow_ice, possible_shadow, platform, land_water, sun_z_angle_at_local_noon, brdf_correction_performed, modland_qa, vi_usefulness, aerosol_quantity, pixel_adjacent_to_cloud, brdf_correction_performed, mixed_clouds, land_water, possible_snow_ice, possible_shadow
    'band': '',  # options: 1, 2, 3, 4, 5, 6, 7
}

output_path = \"""path/to/output\"
parameters['output'] = output_path

algorithm_id = 'grass7:i.modis.qc'
processing.run(algorithm_id, parameters)"""