tool_ID = "native:fillnodata"
tool_name = "Fill NoData cells"
brief_description = "Resets the NoData values in the input raster to a chosen value, resulting in raster dataset with no NoData pixels."
full_description = """Resets the NoData values in the input raster to a chosen value, resulting in raster dataset with no NoData pixels.
The algorithm respects the input raster data type, e.g. a floating point fill value will be truncated when applied to an integer raster."""
parameters = """
INPUT: Input raster. The raster to process.. Type: [raster] 
BAND: Band number. The band of the raster. Type: [number] Default: 1 
FILL_VALUE: Fill value. Set the value to use for the NoData pixels. Type: [number] Default: 1.0 
OUTPUT: Output raster. Specification of the output raster. One of: Save to a Temporary File Save to Fileâ€¦. Type: [raster] Default: [Save to temporary file] outputs = 
OUTPUT: Output raster. The output raster layer with filled data cells.. Type: [raster]
"""
code_example = """
import processing
from qgis.core import QgsRasterLayer, QgsProject

def fill_no_data():
    input_path = 'D:/input_raster.tif'
    output_path = 'C:/Users/Output/filled_raster.tif'
    input_raster = QgsRasterLayer(input_path, \"""Input Raster\")

    parameters = {
        'INPUT': input_path,
        'BAND': 1,
        'FILL_VALUE': 1.0,
        'OUTPUT': output_path  # Save to a Temporary File, Save to File
    }
    
    result = processing.run(\"native:fillnodata\", parameters)
    filled_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Filled Raster')
    QgsProject.instance().addMapLayer(filled_raster_layer)

fill_no_data()"""