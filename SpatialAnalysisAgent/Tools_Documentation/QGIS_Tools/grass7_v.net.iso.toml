tool_ID = "grass7_v.net.iso"
tool_name = "v.net.iso"
brief_description = "lits net to bands between cost isolines (direction from center). Center node must be opened (costs >= 0). Costs of center node are used in calculation."
synopsis = """v.net.iso
v.net.iso --help
v.net.iso[-tgu]input=nameoutput=name[method=string]center_cats=rangecosts=integer[,integer,...]arc_layer=stringarc_type=string[,string,...]node_layer=string[arc_column=name]   [arc_backward_column=name]   [node_column=name]   [turn_layer=string]   [turn_cat_layer=string]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
parameters = """input=name[required]
    Name of input vector map
    Or data source for direct OGR access
output=name[required]
    Name for output vector map
method=string
    Use costs from centers or costs to centers
    Options:from, to
    Default:from
center_cats=range[required]
    Category values
    Categories of centers (points on nodes) to which net will be allocated, layer for this categories is given by nlayer option
costs=integer[,integer,...][required]
    Costs for isolines
arc_layer=string[required]
    Arc layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:1
arc_type=string[,string,...][required]
    Arc type
    Input feature type
    Options:line, boundary
    Default:line,boundary
node_layer=string[required]
    Node layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:2
arc_column=name
    Arc forward/both direction(s) cost column (number)
arc_backward_column=name
    Arc backward direction cost column (number)
node_column=name
    Node cost column (number)
turn_layer=string
    Layer with turntable
    Relevant only with -t flag
    Default:3
turn_cat_layer=string
    Layer with unique categories used in turntable
    Relevant only with -t flag
    Default:4"""
flags = """-t
    Use turntable
-g
    Use geodesic calculation for longitude-latitude projects
-u
    Create unique categories and attribute table
    Default: one category for each iso-band
--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
code_example = """
# Import necessary modules
from qgis.core import QgsVectorLayer, QgsProject
import processing

def run_v_net_iso():
    input_path = 'D:/input_vector_map.shp'
    output_path = 'D:/output_vector_map.shp'
    
    parameters = {
        'input': 'input_vector_map',
        'output': 'output_vector_map',
        'method': 'from',  # Options: from, to
        'center_cats': '1-5',
        'costs': '1000,2000,3000',
        'arc_layer': 'arc_layer',
        'arc_type': 'line,boundary',  # Options: line, boundary
        'node_layer': 'node_layer',
        'arc_column': '',
        'arc_backward_column': '',
        'node_column': '',
        'turn_layer': '',
        'turn_cat_layer': ''
    }
    
    result = processing.run(\"""grass7:v.net.iso\", parameters)
    
    output_layer = QgsVectorLayer(result['output'], 'Isolines_output', 'ogr')
    QgsProject.instance().addMapLayer(output_layer)

# Execute the function
run_v_net_iso()"""