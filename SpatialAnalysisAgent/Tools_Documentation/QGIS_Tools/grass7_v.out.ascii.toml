tool_ID = "grass7_v.out.ascii"
tool_name = "v.out.ascii"
brief_description = " default only features with category are exported. To export all features use 'layer=-1'."
synopsis = """v.out.ascii
v.out.ascii --help
v.out.ascii[-ocr]input=name[layer=string]   [type=string[,string,...]]   [output=name]   [columns=name[,name,...]]   [cats=range]   [where=sql_query]format=string[separator=character]   [precision=integer]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
parameters = """input=name[required]
    Name of input vector map
    Or data source for direct OGR access
layer=string
    Layer number or name ('-1' for all layers)
    A single vector map can be connected to multiple database tables. This number determines which table to use. When used with direct OGR access this is the layer name.
    Default:1
type=string[,string,...]
    Input feature type
    Options:point, line, boundary, centroid, area, face, kernel
    Default:point,line,boundary,centroid,area,face,kernel
output=name
    Name for output ASCII file or ASCII vector name if '-o' is defined
    If not given or '-' then standard output
columns=name[,name,...]
    Name of attribute column(s) to be exported (point mode)
    \"*\" for all columns
cats=range
    Category values
    Example: 1,3,7-9,13
where=sql_query
    WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000
format=string[required]
    Output format
    Options:point, standard, wkt
    Default:point
    point: Simple point format (point per row)
    standard: GRASS ASCII vector format
    wkt: OGC well-known text
separator=character
    Field separator
    Field separator (points mode)
    Default:pipe
precision=integer
    Number of significant digits (floating point only)
    Options:0-32
    Default:8"""
flags = """-o
    Create old (version 4) ASCII file
-c
    Include column names in output (points mode)
-r
    Only export points falling within current 3D region (points mode)
--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def export_to_ascii():
    # Define input and output paths
    input_path = 'D:/input_vector.shp'
    output_dir = 'C:/Users/Output'
    output_file_name = \"""exported_data.txt\"
    output_path = f\"{output_dir}/{output_file_name}\"
    # Load input vector layer
    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")
    # Define processing parameters
    parameters = {
        'input': input_path, # Name of input vector map or data source for direct OGR access
        'layer': '',  # Layer number or name ('-1' for all layers)
        'type': '',  # Input feature type, options: point, line, boundary, centroid, area, face, kernel
        'output': output_path,  # Name for output ASCII file
        'columns': '',  # Name of attribute column(s) to be exported (point mode)
        'cats': '',  # Category values (e.g., 1,3,7-9,13)
        'where': '',  # WHERE conditions of SQL statement without 'where' keyword
        'format': '',  # Output format, options: point, standard, wkt
        'separator': '',  # Field separator, default: pipe
        'precision': ''  # Number of significant digits (floating point only)
    }
    
    # Run the grass7:v.out.ascii operation
    result = processing.run(\"grass7:v.out.ascii\", parameters)
    # Load the output layer
    output_layer = QgsVectorLayer(output_path, 'Exported_ASCII_Data', 'ogr')
    QgsProject.instance().addMapLayer(output_layer)

# Execute the function
export_to_ascii()"""