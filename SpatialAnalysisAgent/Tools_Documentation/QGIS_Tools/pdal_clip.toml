tool_ID = "pdal:clip"
tool_name = "Clip"
brief_description = "Clips a point cloud layer by a polygon layer so that the resulting point cloud contains only points within the polygons."
full_description = """Clips a point cloud layer by a polygon layer so that the resulting point cloud contains only points within the polygons."""
parameters = """
INPUT: Input layer. Input point cloud layer to clip. Type: [point cloud] 
OVERLAY: Clipping polygons. Polygon vector layer to use as coverage for clipping the points. Type: [vector: polygon] 
OUTPUT: Clipped. Specify the point cloud file to export the clipped points to. One of: Save to a Temporary File Save to File…. Type: [point cloud] Default: [Save to temporary file] 
FILTER_EXPRESSION: Filter expression Optional. 
A 
PDAL expression for selecting a subset of features in the point cloud data. Type: [expression] 
FILTER_EXTENT: Cropping extent Optional. 
A map extent for selecting a subset of features in the point cloud data Available methods are: Calculate from layer…: uses extent of a layer loaded in the current project Calculate from layout map…: uses extent of a layout map item in the active project Calculate from bookmark…: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] outputs = 
OUTPUT: Clipped. Output point cloud whose features are the points within the coverage polygon layer.. Type: [raster]
"""
code_example = """
import processing
from qgis.core import QgsProject

def clip_point_cloud():
    # Set the input and output paths
    input_layer = 'path/to/input/pointcloud.las'
    overlay_layer = 'path/to/clipping/polygons.shp'
    output_path = 'path/to/output/clipped_pointcloud.las'
    
    # Define the parameters
    parameters = {
        'INPUT': input_layer,
        'OVERLAY': overlay_layer,
        'OUTPUT': output_path,
        'FILTER_EXPRESSION': '',  # Optional
        'FILTER_EXTENT': ''       # Optional
    }
    
    # Run the PDAL clip algorithm
    result = processing.run(\"""pdal:clip\", parameters)

# Execute the function
clip_point_cloud()"""