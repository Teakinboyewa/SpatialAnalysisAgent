tool_ID = "grass7_v.net.distance"
tool_name = "v.net.distance"
brief_description = "nds the shortest paths from each 'from' point to the nearest 'to' feature and various information about this relation are uploaded to the attribute table."
synopsis = """v.net.distance
v.net.distance --help
v.net.distance[-gl]input=nameoutput=name[arc_layer=string]   [arc_type=string[,string,...]]   [node_layer=string]   [from_layer=string]   [from_cats=range]   [from_where=sql_query]   [to_layer=string]   [to_type=string[,string,...]]   [to_cats=range]   [to_where=sql_query]   [arc_column=name]   [arc_backward_column=name]   [node_column=name]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
parameters = """input=name[required]
    Name of input vector map
    Or data source for direct OGR access
output=name[required]
    Name for output vector map
arc_layer=string
    Arc layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:1
arc_type=string[,string,...]
    Arc type
    Input feature type
    Options:line, boundary
    Default:line,boundary
node_layer=string
    Node layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:2
from_layer=string
    From layer number or name
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:1
from_cats=range
    From category values
    Example: 1,3,7-9,13
from_where=sql_query
    From WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000
to_layer=string
    Layer number or name
    To layer number or name
    Default:1
to_type=string[,string,...]
    To feature type
    Options:point, line, boundary
    Default:point
to_cats=range
    To category values
    Example: 1,3,7-9,13
to_where=sql_query
    To WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000
arc_column=name
    Arc forward/both direction(s) cost column (number)
arc_backward_column=name
    Arc backward direction cost column (number)
node_column=name
    Node cost column (number)"""
flags = """-g
    Use geodesic calculation for longitude-latitude projects
-l
    Write each output path as one line, not as original input segments.
--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
code_example = """
# Import necessary modules
from qgis.core import QgsVectorLayer, QgsProject
import processing

def run_v_net_distance():
    input_path = 'path/to/input_vector_map.shp'
    output_path = 'path/to/output_vector_map.shp'
    
    input_layer = QgsVectorLayer(input_path, \"""Input Vector Map\", \"ogr\")
    arc_layer = \"1\"
    arc_type = \"line,boundary\" # Options: line, boundary
    node_layer = \"2\"
    from_layer = \"1\"
    from_cats = \"1,3,7-9,13\"
    from_where = \"income < 1000 and population >= 10000\"
    to_layer = \"1\"
    to_type = \"point\" # Options: point, line, boundary
    to_cats = \"1,3,7-9,13\"
    to_where = \"income < 1000 and population >= 10000\"
    arc_column = \"\"
    arc_backward_column = \"\"
    node_column = \"\"

    parameters = {
        'input': input_path,
        'output': output_path,
        'arc_layer': arc_layer,
        'arc_type': arc_type,
        'node_layer': node_layer,
        'from_layer': from_layer,
        'from_cats': from_cats,
        'from_where': from_where,
        'to_layer': to_layer,
        'to_type': to_type,
        'to_cats': to_cats,
        'to_where': to_where,
        'arc_column': arc_column,
        'arc_backward_column': arc_backward_column,
        'node_column': node_column
    }

    result = processing.run(\"grass7:v.net.distance\", parameters)
    output_layer = QgsVectorLayer(output_path, 'Output Vector Map', 'ogr')
    QgsProject.instance().addMapLayer(output_layer)

run_v_net_distance()
```"""