tool_ID = "gdal:gridinversedistance"
tool_name = "Grid (Inverse distance to a power)"
brief_description = """The Inverse Distance to a Power gridding method is a weighted average interpolator."""
full_description = """The Inverse Distance to a Power gridding method is a weighted average interpolator.
You should supply the input arrays with the scattered data values including coordinates of every data point and output grid geometry. The function will compute interpolated value for the given position in output grid.
This algorithm is derived from the GDAL grid utility .
Default menu: Raster ► Analysis"""
parameters = """INPUT: Point layer. Input point vector layer. Type: [vector: point]
POWER: Weighting power. Weighting power. Type: [number] Default: 2.0
SMOOTHING: Smothing. Smoothing parameter. Type: [number] Default: 0.0
RADIUS_1: The first radius of search ellipse. The first radius (X axis if rotation angle is 0) ofthe search ellipse. Type: [number] Default: 0.0
RADIUS_2: The second radius of search ellipse. The second radius (Y axis if rotation angle is 0)of the search ellipse. Type: [number] Default: 0.0
ANGLE: Angle of search ellipse rotation in degrees (counter clockwise). Angle of ellipse rotation in degrees.Ellipse rotated counter clockwise.. Type: [number] Default: 0.0
MAX_POINTS: Maximum number of data points to use. Do not search for more points than this number.. Type: [number] Default: 0
MIN_POINTS: Minimum number of data points to use. Minimum number of data points to average.If less amount of points found the grid nodeconsidered empty and will be filled withNoData marker.. Type: [number] Default: 0
NODATA: NoData. NoData marker to fill empty points. Type: [number] Default: 0.0
OUTPUT: Interpolated (IDW). Specify the output raster layer with interpolated values.One of: Save to a Temporary File Save to File…. Type: [raster] Default: [Save to temporary file]
Z_FIELD: Z value from field Optional. Field for the interpolation. Type: [tablefield: numeric]
OPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression…).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: ‘’
EXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None
DATA_TYPE: Output data type. Defines the data type of the output raster file.Options: 0 — Byte        (Eight bit unsigned integer (quint8)) 1 — Int16       (Sixteen bit signed integer (qint16)) 2 — UInt16      (Sixteen bit unsigned integer (quint16)) 3 — UInt32      (Thirty two bit unsigned integer (quint32)) 4 — Int32       (Thirty two bit signed integer (qint32)) 5 — Float32     (Thirty two bit floating point (float)) 6 — Float64     (Sixty four bit floating point (double)) 7 — CInt16      (Complex Int16) 8 — CInt32      (Complex Int32) 9 — CFloat32    (Complex Float32) 10 — CFloat64   (Complex Float64) 11 — Int8       (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help ► About menu). Type: [enumeration] Default: 5"""
outputs = "OUTPUT: Interpolated (IDW). Output raster with interpolated values. Type: [raster]"
code_example = """
from qgis.core import QgsVectorLayer, QgsProject
import processing

def idw_interpolation():
    input_path = 'C:/path_to_input_point_layer.shp'
    output_path = 'C:/path_to_output_raster.tif'

    input_layer = QgsVectorLayer(input_path, 'Input Point Layer', 'ogr')

    parameters = {
        'INPUT': input_layer,
        'POWER': 2.0,
        'SMOOTHING': 0.0,
        'RADIUS_1': 0.0,
        'RADIUS_2': 0.0,
        'ANGLE': 0.0,
        'MAX_POINTS': 0,
        'MIN_POINTS': 0,
        'NODATA': 0.0,
        'OUTPUT': output_path,
        'Z_FIELD': None,
        'OPTIONS': '',
        'EXTRA': None,
        'DATA_TYPE': 5  # Float32
    }

    result = processing.run('gdal:gridinversedistance', parameters)
    interpolated_layer = QgsRasterLayer(result['OUTPUT'], 'Interpolated IDW')
    QgsProject.instance().addMapLayer(interpolated_layer)

idw_interpolation()"""
