tool_ID = "native:cellstackpercentile"
tool_name = "Cell stack percentile"
brief_description = """Calculates the cell-wise percentile value of a stack of rasters and writes the results to an output raster. The percentile to return is determined by the percentile input value (ranges between 0 and 1). At each cell location, the specified percentile is obtained using the respective value from the stack of all overlaid and sorted cell values of the input rasters."""
full_description = """Calculates the cell-wise percentile value of a stack of rasters and writes the results to an output raster. The percentile to return is determined by the percentile input value (ranges between 0 and 1). At each cell location, the specified percentile is obtained using the respective value from the stack of all overlaid and sorted cell values of the input rasters.
There are three methods for percentile calculation:
The linear interpolation methods return the unique values for different percentiles. Both interpolation methods follow their counterpart methods implemented by LibreOffice or Microsoft Excel.
The output raster’s extent and resolution is defined by a reference raster. Input raster layers that do not match the cell size of the reference raster layer will be resampled using nearest neighbor resampling. NoData values in any of the input layers will result in a NoData cell output if the “Ignore NoData values” parameter is not set. The output raster data type will always be Float32 ."""
parameters = """
INPUT: Input layers. Raster layers to evaluate.If multiband rasters are used in the data raster stack, the algorithmwill always perform the analysis on the first band of the rasters. Type: [raster] [list] 
METHOD: Method. Method for percentile calculation: 0 — Nearest rank: returns the value that is nearest to the specified percentile 1 — Inclusive linear interpolation 
(PERCENTILE.INC) 2 — Exclusive linear interpolation 
(PERCENTILE.EXC). Type: [enumeration] Default: 0 
VALUE: Percentile. Value to rank among the respective values in the stack of all overlaidand sorted cell values from the input rasters. Between 0 and 1.. Type: [number] Default: 0.25 
IGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the input layers will result in a NoDatacell in the output raster. Type: [boolean] Default: True 
REFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, 
CRS, pixel dimensions). Type: [raster] 
OUTPUT: Output layer. Specification of the output raster. One of: Save to a Temporary File Save to File…. Type: [same as input] Default: [Save to temporary file] 
OUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = 
OUTPUT: Output layer. Output raster layer containing the result. Type: [raster] 
CRS_AUTHID: 
CRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] 
EXTENT: Extent. The spatial extent of the output raster layer. Type: [string] 
WIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] 
HEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] 
TOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]
"""
code_example = """
import processing
from qgis.core import QgsProject, QgsRasterLayer

def cellstackpercentile():
    # Define parameters
    input_rasters = ['input_raster_1.tif', 'input_raster_2.tif']  # Paths to your input rasters
    reference_layer_path = 'reference_layer.tif'
    output_path = 'output_raster.tif'

    # Run the Cell Stack Percentile algorithm
    parameters = {
        'INPUT': input_rasters,
        'METHOD': 0,  # 0 - Nearest rank, 1 - Inclusive linear interpolation, 2 - Exclusive linear interpolation
        'VALUE': 0.25,
        'IGNORE_NODATA': True,
        'REFERENCE_LAYER': reference_layer_path,
        'OUTPUT': output_path,
        'OUTPUT_NODATA_VALUE': -9999.0
    }

    result = processing.run('native:cellstackpercentile', parameters)
    
    # Load the result layer to QGIS
    output_layer = QgsRasterLayer(result['OUTPUT'], 'Cell Stack Percentile')
    QgsProject.instance().addMapLayer(output_layer)

# Execute the function
cellstackpercentile()"""