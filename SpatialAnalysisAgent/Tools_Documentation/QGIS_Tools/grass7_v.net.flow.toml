tool_ID = "grass7_v.net.flow"
tool_name = "v.net.flow"
brief_description = "Computes the maximum flow between two sets of nodes in the network."
synopsis = """v.net.flow
v.net.flow --help
v.net.flowinput=name[arc_layer=string]   [node_layer=string]output=namecut=name[arc_column=name]   [arc_backward_column=name]   [node_column=name]   [source_cats=range]   [source_where=sql_query]   [sink_cats=range]   [sink_where=sql_query]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
parameters = """input=name[required]
    Name of input vector map
    Or data source for direct OGR access
arc_layer=string
    Arc layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:1
node_layer=string
    Node layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:2
output=name[required]
    Name for output vector map
cut=name[required]
    Name for output vector map containing a minimum cut
arc_column=name
    Arc forward/both direction(s) cost column (number)
arc_backward_column=name
    Arc backward direction cost column (number)
node_column=name
    Node cost column (number)
source_cats=range
    Source category values
    Example: 1,3,7-9,13
source_where=sql_query
    Source WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000
sink_cats=range
    Sink category values
    Example: 1,3,7-9,13
sink_where=sql_query
    Sink WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000"""
flags = """--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def run_grass7_v_net_flow():
    input_path = 'D:/input_vector.shp'
    output_dir = 'C:/Users/Output'
    arc_layer = '1'
    node_layer = '2'
    output_file_name = \"""Output_Vector_Map.shp\"
    cut_file_name = \"Min_Cut.shp\"
    output_path = f\"{output_dir}/{output_file_name}\"
    cut_path = f\"{output_dir}/{cut_file_name}\"
    
    params = {
        'input': input_path,
        'arc_layer': arc_layer,  # Default: 1
        'node_layer': node_layer,  # Default: 2
        'output': output_path,
        'cut': cut_path,
        'arc_column': '',  # Optional parameter
        'arc_backward_column': '',  # Optional parameter
        'node_column': '',  # Optional parameter
        'source_cats': '',  # Example: 1,3,7-9,13
        'source_where': '',  # Example: income < 1000 and population >= 10000
        'sink_cats': '',  # Example: 1,3,7-9,13
        'sink_where': '',  # Example: income < 1000 and population >= 10000
    }
    
    result = processing.run('grass7:v.net.flow', params)
    output_layer = QgsVectorLayer(result['output'], 'Output_Vector_Map', 'ogr')
    cut_layer = QgsVectorLayer(result['cut'], 'Min_Cut', 'ogr')
    QgsProject.instance().addMapLayer(output_layer)
    QgsProject.instance().addMapLayer(cut_layer)

run_grass7_v_net_flow()"""