tool_ID = "gdal:cliprasterbymasklayer"
tool_name = "Clip raster by mask layer"
brief_description = "Clips any GDAL-supported raster by a vector mask layer."
full_description = """Clips any GDAL-supported raster by a vector mask layer.
This algorithm is derived from the GDAL warp utility .
Default menu: Raster ► Extraction"""
parameters = """
INPUT: Input layer. The input raster. Type: [raster] 
MASK: Mask layer. Vector mask for clipping the raster. Type: [vector: polygon] 
SOURCE_CRS: Source 
CRS. Set the coordinate reference to use for the input raster. Type: [crs] 
TARGET_CRS: Target 
CRS. Set the coordinate reference to use for the mask layer. Type: [crs] 
TARGET_EXTENT: Target extent Optional. Extent of the output file to be created Available methods are: Calculate from layer…: uses extent of a layer loaded in the current project Calculate from layout map…: uses extent of a layout map item in the active project Calculate from bookmark…: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] 
NODATA: Assign a specified NoData value to output bands Optional. Defines a value that should be inserted for the NoDatavalues in the output raster. Type: [number] Default: None 
ALPHA_BAND: Create an output alpha band. Creates an alpha band for the result.The alpha band then includes the transparency values of the pixels.. Type: [boolean] Default: False 
CROP_TO_CUTLINE: Match the extent of the clipped raster to the extent of the mask layer. Applies the vector layer extent to the output raster if checked.. Type: [boolean] Default: True 
KEEP_RESOLUTION: Keep resolution of input raster. The resolution of the output raster will not be changed. Type: [boolean] Default: False 
SET_RESOLUTION: Set output file resolution. Shall the output resolution (cell size) be specified. Type: [boolean] Default: False 
X_RESOLUTION: 
X Resolution to output bands Optional. The width of the cells in the output raster. Type: [number] Default: None 
Y_RESOLUTION: 
Y Resolution to output band Optional. The height of the cells in the output raster. Type: [number] Default: None 
MULTITHREADING: Use multithreaded warping implementation. Two threads will be used to process chunks of imageand perform input/output operation simultaneously.Note that computation is not multithreaded itself.. Type: [boolean] Default: False 
OUTPUT: Clipped (mask). Specification of the output raster layer.One of: Save to a Temporary File Save to File…. Type: [raster] Default: [Save to temporary file] 
OPTIONS: Additional creation options Optional. For adding one or more creation options that control theraster to be created (colors, block size, filecompression…).For convenience, you can rely on predefined profiles (see GDAL driver options section ). Batch Process and Model Designer: separate multiple options with a pipecharacter ( | ).. Type: [string] Default: ‘’ 
DATA_TYPE: Output data type. Defines the format of the output raster file. Options: 0 — Use Input Layer Data Type 1 — Byte (Eight bit unsigned integer (quint8)) 2 — Int16 (Sixteen bit signed integer (qint16)) 3 — UInt16 (Sixteen bit unsigned integer (quint16)) 4 — UInt32 (Thirty two bit unsigned integer (quint32)) 5 — Int32 (Thirty two bit signed integer (qint32)) 6 — Float32 (Thirty two bit floating point (float)) 7 — Float64 (Sixty four bit floating point (double)) 8 — CInt16 (Complex Int16) 9 — CInt32 (Complex Int32) 10 — CFloat32 (Complex Float32) 11 — CFloat64 (Complex Float64) 12 — Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help ► About menu). Type: [enumeration] Default: 0 
EXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: None outputs = 
OUTPUT: Clipped (mask). Output raster layer clipped by the vector layer. Type: [raster]
"""
code_example = """
import processing
from qgis.core import QgsRasterLayer, QgsProject, QgsVectorLayer

def clip_raster_by_mask_layer():
    input_raster_path = 'D:/Data/InputRaster.tif'  # Path to the input raster
    mask_layer_path = 'D:/Data/MaskLayer.shp'  # Path to the mask layer
    output_path = 'D:/workspace_directory/output_raster.tif'  # Path for the output file

    # Load the input layers
    input_layer = QgsRasterLayer(input_raster_path, \"""Input Raster\")
    mask_layer = QgsVectorLayer(mask_layer_path, \"Mask Layer\", \"ogr\")

    # Define processing parameters
    parameters = {
        'INPUT': input_raster_path,
        'MASK': mask_layer_path,
        'SOURCE_CRS': 'EPSG:4326',  # Example value
        'TARGET_CRS': 'EPSG:4326',  # Example value
        'TARGET_EXTENT': '',
        'NODATA': None,
        'ALPHA_BAND': False,
        'CROP_TO_CUTLINE': True,
        'KEEP_RESOLUTION': False,
        'SET_RESOLUTION': False,
        'X_RESOLUTION': None,
        'Y_RESOLUTION': None,
        'MULTITHREADING': False,
        'OUTPUT': output_path,
        'OPTIONS': '',
        'DATA_TYPE': 0,  # Options: 0 — Use Input Layer Data Type, 1 — Byte, 2 — Int16, etc.
        'EXTRA': ''
    }

    # Execute processing
    result = processing.run(\"gdal:cliprasterbymasklayer\", parameters)

    # Add result to the project
    output_layer = QgsRasterLayer(result['OUTPUT'], 'Clipped Raster')
    QgsProject.instance().addMapLayer(output_layer)

# Execute the function
clip_raster_by_mask_layer()"""