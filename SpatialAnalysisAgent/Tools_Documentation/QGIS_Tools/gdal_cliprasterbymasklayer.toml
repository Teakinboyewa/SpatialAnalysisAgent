tool_ID = "gdal:cliprasterbymasklayer"
tool_name = "Clip raster by mask layer"
brief_description = "Clips any GDAL-supported raster by a vector mask layer."
full_description = """Clips any GDAL-supported raster by a vector mask layer.
This algorithm is derived from the GDAL warp utility .
Default menu: Raster ► Extraction"""
parameters = """
"""
code_example = """
import processing
from qgis.core import QgsRasterLayer, QgsProject, QgsVectorLayer

def clip_raster_by_mask_layer():
    input_raster_path = 'D:/Data/InputRaster.tif'  # Path to the input raster
    mask_layer_path = 'D:/Data/MaskLayer.shp'  # Path to the mask layer
    output_path = 'D:/workspace_directory/output_raster.tif'  # Path for the output file

    # Load the input layers
    input_layer = QgsRasterLayer(input_raster_path, \"""Input Raster\")
    mask_layer = QgsVectorLayer(mask_layer_path, \"Mask Layer\", \"ogr\")

    # Define processing parameters
    parameters = {
        'INPUT': input_raster_path,
        'MASK': mask_layer_path,
        'SOURCE_CRS': 'None',  # Example value
        'TARGET_CRS': 'None',  # Example value
        'TARGET_EXTENT': '',
        'NODATA': None,
        'ALPHA_BAND': False,
        'CROP_TO_CUTLINE': True,
        'KEEP_RESOLUTION': False,
        'SET_RESOLUTION': False,
        'X_RESOLUTION': None,
        'Y_RESOLUTION': None,
        'MULTITHREADING': False,
        'OUTPUT': output_path,
        'OPTIONS': '',
        'DATA_TYPE': 0,  # Options: 0 — Use Input Layer Data Type, 1 — Byte, 2 — Int16, etc.
        'EXTRA': '',
	'OUTPUT': output_path
    }

    # Execute processing
    result = processing.run(\"gdal:cliprasterbymasklayer\", parameters)

    # Add result to the project
    output_layer = QgsRasterLayer(result['OUTPUT'], 'Clipped Raster')
    QgsProject.instance().addMapLayer(output_layer)

# Execute the function
clip_raster_by_mask_layer()"""

