tool_ID = "native:reclassifybylayer"
tool_name = "Reclassify by layer"
brief_description = """Reclassifies a raster band by assigning new class values based on the ranges specified in a vector table."""
full_description = """Reclassifies a raster band by assigning new class values based on the ranges specified in a vector table."""
parameters = """
INPUT_RASTER: Raster layer. Raster layer to reclassify. Type: [raster] 
RASTER_BAND: Band number. If the raster is multiband, choose the band you want toreclassify.. Type: [raster band] Default: The first band of the raster layer 
INPUT_TABLE: Layer containing class breaks. Vector layer containing the values to use for classification.. Type: [vector: any] 
MIN_FIELD: Minimum class value field. Field with the minimum value of the range for the class.Use -inf to capture the lowest possible value.. Type: [tablefield: numeric] 
MAX_FIELD: Maximum class value field. Field with the maximum value of the range for the class.Use inf to capture the highest possible value.. Type: [tablefield: numeric] 
VALUE_FIELD: Output value field. Field with the value that will be assigned to the pixels thatfall in the class (between the corresponding min and maxvalues). Use nan to set the value of the range to NoData.. Type: [tablefield: numeric] 
OUTPUT: Reclassified raster. Specification of the output raster. One of: Save to a Temporary File Save to File…. Type: [raster] Default: [Save to temporary file] 
NO_DATA: Output NoData value. Value to apply to NoData values.. Type: [number] Default: -9999.0 
RANGE_BOUNDARIES: Range boundaries. Defines comparison rules for the classification.Options: 0 — min < value <= max 1 — min <= value < max 2 — min <= value <= max 3 — min < value < max. Type: [enumeration] Default: 0 
NODATA_FOR_MISSING: Use NoData when no range matches value. Applies the NoData value to band values that do not fall inany class.If False, the original value is kept.. Type: [boolean] Default: False 
DATA_TYPE: Output data type. Defines the format of the output raster file.Options: 0 — Byte (Eight bit unsigned integer (quint8)) 1 — Int16 (Sixteen bit signed integer (qint16)) 2 — UInt16 (Sixteen bit unsigned integer (quint16)) 3 — Int32 (Thirty two bit signed integer (qint32)) 4 — UInt32 (Thirty two bit unsigned integer (quint32)) 5 — Float32 (Thirty two bit floating point (float)) 6 — Float64 (Sixty four bit floating point (double)) 7 — CInt16 (Complex Int16) 8 — CInt32 (Complex Int32) 9 — CFloat32 (Complex Float32) 10 — CFloat64 (Complex Float64) 11 — Int8 (Eight bit signed integer (qint8)) Available options depend on the GDAL version built with QGIS(see Help ► About menu). Type: [enumeration] Default: 5 outputs = 
OUTPUT: Reclassified raster. Output raster layer with reclassified band values. Type: [raster]
"""
code_example = """
import processing
from qgis.core import QgsRasterLayer, QgsVectorLayer, QgsProject

def reclassify_raster_layer(input_raster_path, input_table_path, output_path):
    # Load the raster and table layers
    input_raster = QgsRasterLayer(input_raster_path, 'Input Raster')
    input_table = QgsVectorLayer(input_table_path, 'Input Table', 'ogr')

    # Define the parameters
    parameters = {
        'INPUT_RASTER': input_raster,
        'RASTER_BAND': 1,  # Default: The first band of the raster layer
        'INPUT_TABLE': input_table,
        'MIN_FIELD': 'min_value',  # Field with the minimum value of the range for the class
        'MAX_FIELD': 'max_value',  # Field with the maximum value of the range for the class
        'VALUE_FIELD': 'output_value',  # Field with the value assigned to the pixels
        'OUTPUT': output_path,
        'NO_DATA': -9999.0,
        'RANGE_BOUNDARIES': 0,  # '0' = 'min < value <= max', '1' = 'min <= value < max', '2' = 'min <= value <= max', '3' = 'min < value < max'
        'NODATA_FOR_MISSING': False,
        'DATA_TYPE': 5  # '0' = Byte, '1' = Int16, '2' = UInt16, '3' = Int32, '4' = UInt32, '5' = Float32, '6' = Float64, '7' = CInt16, '8' = CInt32, '9' = CFloat32, '10' = CFloat64, '11' = Int8
    }

    # Execute the reclassification algorithm
    result = processing.run(\"""native:reclassifybylayer\", parameters)

    # Add the reclassified raster layer to the QGIS project
    reclassified_raster_layer = QgsRasterLayer(result['OUTPUT'], 'Reclassified Raster')
    QgsProject.instance().addMapLayer(reclassified_raster_layer)

# Usage
input_raster_path = '/path/to/input_raster.tif'
input_table_path = '/path/to/class_breaks.shp'
output_path = '/path/to/output_reclassified.tif'
reclassify_raster_layer(input_raster_path, input_table_path, output_path)"""