tool_ID = "native:lowestpositioninrasterstack"
tool_name = "Lowest position in raster stack"
brief_description = """Evaluates on a cell-by-cell basis the position of the raster with the lowest value in a stack of rasters. Position counts start with 1 and range to the total number of input rasters. The order of the input rasters is relevant for the algorithm. If multiple rasters feature the lowest value, the first raster will be used for the position value."""
full_description = """Evaluates on a cell-by-cell basis the position of the raster with the lowest value in a stack of rasters. Position counts start with 1 and range to the total number of input rasters. The order of the input rasters is relevant for the algorithm. If multiple rasters feature the lowest value, the first raster will be used for the position value.
If multiband rasters are used in the data raster stack, the algorithm will always perform the analysis on the first band of the rasters - use GDAL to use other bands in the analysis. Any NoData cells in the raster layer stack will result in a NoData cell in the output raster unless the “ignore NoData” parameter is checked. The output NoData value can be set manually. The output rasters extent and resolution is defined by a reference raster layer and is always of Int32 type."""
parameters = """
INPUT_RASTERS: Input raster layers. List of raster layers to compare with. Type: [raster] [list] 
REFERENCE_LAYER: Reference layer. The reference layer for the output layer creation(extent, 
CRS, pixel dimensions). Type: [raster] 
IGNORE_NODATA: Ignore NoData values. If unchecked, any NoData cells in the data layer stackwill result in a NoData cell in the output raster. Type: [boolean] Default: False 
OUTPUT: Output layer. Specification of the output raster containing the result.One of: Save to a Temporary File Save to File…. Type: [raster] Default: [Save to temporary file] 
OUTPUT_NODATA_VALUE: Output NoData value. Value to use for NoData in the output layer. Type: [number] Default: -9999.0 outputs = 
OUTPUT: Output layer. Output raster layer containing the result. Type: [raster] 
CRS_AUTHID: 
CRS authority identifier. The coordinate reference system of the output raster layer. Type: [string] 
EXTENT: Extent. The spatial extent of the output raster layer. Type: [string] 
WIDTH_IN_PIXELS: Width in pixels. The number of columns in the output raster layer. Type: [integer] 
HEIGHT_IN_PIXELS: Height in pixels. The number of rows in the output raster layer. Type: [integer] 
TOTAL_PIXEL_COUNT: Total pixel count. The count of pixels in the output raster layer. Type: [integer]
"""
code_example = """
import processing
from qgis.core import QgsRasterLayer, QgsProject

def perform_lowest_position_in_stack():
    # Define input paths
    input_rasters = [
        \"""C:/path_to_raster1.tif\",
        \"C:/path_to_raster2.tif\",
        \"C:/path_to_raster3.tif\"
    ]
    reference_layer_path = \"C:/path_to_reference_layer.tif\"
    output_path = \"C:/output_directory/output_raster.tif\"

    # Load the reference raster layer
    reference_layer = QgsRasterLayer(reference_layer_path, 'Reference Layer')
    
    # Define the parameters
    parameters = {
        'INPUT_RASTERS': input_rasters,
        'REFERENCE_LAYER': reference_layer_path,
        'IGNORE_NODATA': False,  # type: [boolean] Default: False
        'OUTPUT_NODATA_VALUE': -9999.0,  # type: [number] Default: -9999.0
        'OUTPUT': output_path  # Save to File…
    }

    # Perform the operation
    result = processing.run(\"native:lowestpositioninrasterstack\", parameters)

    # Load the output layer to QGIS
    output_layer = QgsRasterLayer(result['OUTPUT'], 'Lowest Position in Stack')
    QgsProject.instance().addMapLayer(output_layer)

# Execute the function
perform_lowest_position_in_stack()"""