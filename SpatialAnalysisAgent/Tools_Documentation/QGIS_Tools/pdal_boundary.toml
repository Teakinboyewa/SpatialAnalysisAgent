tool_ID = "pdal:boundary"
tool_name = "Boundary"
brief_description = "Exports a polygon file containing point cloud layer boundary. It may contain holes and it may be a multi-part polygon."
full_description = """Exports a polygon file containing point cloud layer boundary. It may contain holes and it may be a multi-part polygon."""
parameters = """
INPUT: Input layer. Input point cloud layer to calculate boundary for. Type: [point cloud] 
RESOLUTION: Resolution of cells used to calculate boundary Optional. Resolution of cells used to calculate boundary. Type: [number] 
THRESHOLD: Minimal number of points in a cell to consider cell occupied Optional. Minimal number of points in a cell to consider cell occupied. Type: [number] 
OUTPUT: Boundary. Specify the point cloud file to use as output. One of: Save to a Temporary File Save to File…. Type: [vector: polygon] Default: [Save to temporary file] 
FILTER_EXPRESSION: Filter expression Optional. 
A 
PDAL expression for selecting a subset of features in the point cloud data. Type: [expression] 
FILTER_EXTENT: Cropping extent Optional. 
A map extent for selecting a subset of features in the point cloud data Available methods are: Calculate from layer…: uses extent of a layer loaded in the current project Calculate from layout map…: uses extent of a layout map item in the active project Calculate from bookmark…: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] outputs = 
OUTPUT: Boundary. Output polygon vector layer with the point cloud boundary.Currently supported format is 
.GPKG .. Type: [vector: polygon]
"""
code_example = """
import processing
from qgis.core import QgsProject, QgsPointCloudLayer

def calculate_boundary():
    input_path = 'C:/path/to/point_cloud.las'
    output_path = 'C:/Users/Output/boundary_polygon.shp'
    input_layer = QgsPointCloudLayer(input_path, \"""Input Point Cloud\", \"pdal\")
    
    parameters = {
        'INPUT': input_path,
        'RESOLUTION': '',
        'THRESHOLD': '',
        'OUTPUT': output_path,  # Save to a Temporary File, Save to File…
        'FILTER_EXPRESSION': '',
        'FILTER_EXTENT': ''
    }
    
    result = processing.run(\"pdal:boundary\", parameters)
    boundary_layer = QgsVectorLayer(result['OUTPUT'], 'Boundary Output', 'ogr')
    QgsProject.instance().addMapLayer(boundary_layer)

# Execute the function
calculate_boundary()"""