tool_ID = "pdal:exportraster"
tool_name = "Export to raster"
brief_description = "Exports point cloud data to a 2D raster grid having cell size of given resolution, writing values from the specified attribute."
full_description = """Exports point cloud data to a 2D raster grid having cell size of given resolution, writing values from the specified attribute."""
parameters = """
INPUT: Input layer. Input point cloud layer to export. Type: [point cloud] 
ATTRIBUTE: Attribute. 
A Field of the point cloud layer to extract the values from. Type: [field] [enumeration] 
RESOLUTION: Resolution of the density raster. Cell size of the output raster. Type: [number] Default: 1.0 
TILE_SIZE: Tile size for parallel runs. . Type: [number] Default: 1000 
OUTPUT: Exported. Specify the raster file to export the data to. One of: Save to a Temporary File Save to File…. Type: [raster] Default: [Save to temporary file] 
FILTER_EXPRESSION: Filter expression Optional. 
A 
PDAL expression for selecting a subset of features in the point cloud data. Type: [expression] 
FILTER_EXTENT: Cropping extent Optional. 
A map extent for selecting a subset of features in the point cloud data Available methods are: Calculate from layer…: uses extent of a layer loaded in the current project Calculate from layout map…: uses extent of a layout map item in the active project Calculate from bookmark…: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] 
ORIGIN_X: 
X origin of a tile for parallel runs Optional. . Type: [number] 
ORIGIN_Y: 
Y origin of a tile for parallel runs Optional. . Type: [number] outputs = 
OUTPUT: Exported. Output raster layer features of the point cloud layer are exported to.Currently supported format is 
.TIF .. Type: [raster]
"""
code_example = """
import processing
from qgis.core import QgsProject, QgsPointCloudLayer

def export_raster_from_pointcloud():
    input_layer_path = \"""path/to/point_cloud.las\"
    output_path = \"path/to/output_raster.tif\"
    
    # Load the Point Cloud Layer
    input_layer = QgsPointCloudLayer(input_layer_path, \"Point Cloud Layer\", \"pdal\")
    
    # Define the processing parameters
    parameters = {
        'INPUT': input_layer_path,
        'ATTRIBUTE': 'attribute_name',  # Update with appropriate field name
        'RESOLUTION': 1.0,
        'TILE_SIZE': 1000,
        'OUTPUT': output_path,  # Options: Save to a Temporary File, Save to File…
        'FILTER_EXPRESSION': '',
        'FILTER_EXTENT': '',
        'ORIGIN_X': '',
        'ORIGIN_Y': ''
    }
    
    # Execute the export raster algorithm
    result = processing.run(\"pdal:exportraster\", parameters)
    # Optionally load the output layer
    output_raster_layer = QgsPointCloudLayer(result['OUTPUT'], 'Exported_Raster', 'gdal')
    QgsProject.instance().addMapLayer(output_raster_layer)

# Execute the function
export_raster_from_pointcloud()"""