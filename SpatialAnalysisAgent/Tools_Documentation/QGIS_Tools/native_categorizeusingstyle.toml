tool_ID = "native:categorizeusingstyle"
tool_name = "Create categorized renderer from styles"
brief_description = "Sets a vector layer’s renderer to a categorized renderer using matching symbols from a style database. If no style file is specified, symbols from the user’s current symbol library are used instead."
full_description = """Sets a vector layer’s renderer to a categorized renderer using matching symbols from a style database. If no style file is specified, symbols from the user’s current symbol library are used instead.
A specified expression or field is used to create categories for the renderer. Each category is individually matched to the symbols which exist within the specified QGIS XML style database. Whenever a matching symbol name is found, the category’s symbol will be set to this matched symbol.
If desired, outputs can also be tables containing lists of the categories which could not be matched to symbols, and symbols which were not matched to categories."""
parameters = """
INPUT: Input layer. Vector layer to apply a categorized style to. Type: [vector: any] 
FIELD: Categorize using expression. Field or expression to categorize the features. Type: [expression] 
STYLE: Style database (leave blank to use saved symbols). File ( 
.XML ) containing the symbols to apply tothe input layer categories.The file can be obtained from the Style Manager Share symbols tool.If no file is specified, 
QGIS local symbols library isused.. Type: [file] 
CASE_SENSITIVE: Use case-sensitive match to symbol names. If True (checked), applies a case sensitive comparisonbetween the categories and symbols names. Type: [boolean] Default: False 
TOLERANT: Ignore non-alphanumeric characters while matching. If True (checked), non-alphanumeric characters in thecategories and symbols names will be ignored, allowinggreater tolerance during the match.. Type: [boolean] Default: False 
NON_MATCHING_CATEGORIES: Non-matching categories Optional. Output table for categories which do not match any symbol inthe database. One of: Skip Output Create Temporary Layer ( 
TEMPORARY_OUTPUT ) Save to File… Save to Geopackage… Save to Database Table… The file encoding can also be changed here.. Type: [table] Default: [Skip output] 
NON_MATCHING_SYMBOLS: Non-matching symbol names Optional. Output table for symbols from the provided style database whichdo not match any category. One of: Skip Output Create Temporary Layer ( 
TEMPORARY_OUTPUT ) Save to File… Save to Geopackage… Save to Database Table… The file encoding can also be changed here.. Type: [table] Default: [Skip output] outputs = 
NON_MATCHING_CATEGORIES: Non-matching categories. Lists categories which could not be matched to any symbol inthe provided style database. Type: [table] 
NON_MATCHING_SYMBOLS: Non-matching symbol names. Lists symbols from the provided style database which couldnot match any category. Type: [table] 
OUTPUT: Categorized layer. The input vector layer with the categorized style applied.No new layer is output.. Type: [same as input]
"""
code_example = """
from qgis.core import QgsVectorLayer, QgsProject
import processing

def categorize_using_style():
    input_path = 'D:/input_layer.shp'
    style_file = 'D:/style.xml'
    output_dir = 'C:/Users/Output'
    output_file_name = \"""NonMatchingCategories.csv\"
    output_path = f\"{output_dir}/{output_file_name}\"
    
    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")
    
    parameters = {
        'INPUT': input_path,
        'FIELD': 'category_field',
        'STYLE': style_file,
        'CASE_SENSITIVE': False,  # Boolean options: True, False
        'TOLERANT': False,  # Boolean options: True, False
        'NON_MATCHING_CATEGORIES': output_path,  # Output options: Skip Output Create Temporary Layer (TEMPORARY_OUTPUT), Save to File, Save to Geopackage, Save to Database Table
        'NON_MATCHING_SYMBOLS': None  # Output options: Skip Output Create Temporary Layer (TEMPORARY_OUTPUT), Save to File, Save to Geopackage, Save to Database Table
    }
    
    result = processing.run(\"native:categorizeusingstyle\", parameters)
    
categorize_using_style()"""