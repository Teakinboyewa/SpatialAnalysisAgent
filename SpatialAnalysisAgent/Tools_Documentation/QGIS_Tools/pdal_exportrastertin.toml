tool_ID = "pdal:exportrastertin"
tool_name = "Export raster (using triangulation)"
brief_description = "Exports point cloud data to a 2D raster grid using a triangulation of points and then interpolating cell values from triangles."
full_description = """Exports point cloud data to a 2D raster grid using a triangulation of points and then interpolating cell values from triangles."""
parameters = """
INPUT: Input layer. Input point cloud layer to export. Type: [point cloud] 
RESOLUTION: Resolution of the density raster. Cell size of the output raster. Type: [number] Default: 1.0 
TILE_SIZE: Tile size for parallel runs. . Type: [number] Default: 1000 
OUTPUT: Exported. Specify the raster file to export the data to. One of: Save to a Temporary File Save to File…. Type: [raster] Default: [Save to temporary file] 
FILTER_EXPRESSION: Filter expression Optional. 
A 
PDAL expression for selecting a subset of features in the point cloud data. Type: [expression] 
FILTER_EXTENT: Cropping extent Optional. 
A map extent for selecting a subset of features in the point cloud data Available methods are: Calculate from layer…: uses extent of a layer loaded in the current project Calculate from layout map…: uses extent of a layout map item in the active project Calculate from bookmark…: uses extent of a saved bookmark Use map canvas extent Draw on canvas: click and drag a rectangle delimiting the area to take into account Enter the coordinates as xmin, xmax, ymin, ymax. Type: [extent] 
ORIGIN_X: 
X origin of a tile for parallel runs Optional. . Type: [number] 
ORIGIN_Y: 
Y origin of a tile for parallel runs Optional. . Type: [number] outputs = 
OUTPUT: Exported (using triangulation). Output raster layer features of the point cloud layer are exported to.Currently supported format is 
.TIF .. Type: [raster]
"""
code_example = """
from qgis.core import QgsProject, QgsPointCloudLayer
import processing

def export_raster_tin():
    # Define the input and output paths
    input_path = 'path/to/input.las'
    output_path = 'path/to/output.tif'

    # Load the input point cloud layer
    input_layer = QgsPointCloudLayer(input_path, \"""Input Point Cloud\", \"pointcloud\")

    # Set the processing parameters
    params = {
        'INPUT': input_path,
        'RESOLUTION': 1.0,
        'TILE_SIZE': 1000,
        'OUTPUT': output_path,
        'FILTER_EXPRESSION': '',  # Optional
        'FILTER_EXTENT': '',      # Optional
        'ORIGIN_X': '',           # Optional
        'ORIGIN_Y': ''            # Optional
    }
    
    # Run the export raster TIN algorithm
    result = processing.run(\"pdal:exportrastertin\", params)

    # Load the exported raster
    exported_layer = QgsRasterLayer(result['OUTPUT'], 'Exported Raster')
    QgsProject.instance().addMapLayer(exported_layer)

# Execute the function
export_raster_tin()"""