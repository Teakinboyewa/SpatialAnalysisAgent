tool_ID = "grass7_v.net.allpairs"
tool_name = "v.net.allpairs"
brief_description = "Computes the shortest path between all pairs of nodes in the network."
synopsis = """v.net.allpairs
v.net.allpairs --help
v.net.allpairs[-g]input=nameoutput=name[arc_layer=string]   [node_layer=string]   [cats=range]   [where=sql_query]   [arc_column=name]   [arc_backward_column=name]   [node_column=string]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
parameters = """input=name[required]
    Name of input vector map
    Or data source for direct OGR access
output=name[required]
    Name for output vector map
arc_layer=string
    Arc layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:1
node_layer=string
    Node layer
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:2
cats=range
    Category values
    Example: 1,3,7-9,13
where=sql_query
    WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000
arc_column=name
    Arc forward/both direction(s) cost column (number)
arc_backward_column=name
    Arc backward direction cost column (number)
node_column=string
    Node cost column (number)"""
flags = """-g
    Use geodesic calculation for longitude-latitude projects
--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def run_v_net_allpairs(input_path, output_path):
    # Load the input vector layer
    input_layer = QgsVectorLayer(input_path, \"""Input Layer\", \"ogr\")

    # Define parameters for the grass7_v.net.allpairs algorithm
    parameters = {
        'input': input_path,  # input=name[required]
        'output': output_path,  # output=name[required]
        'arc_layer': '',  # arc_layer=string
        'node_layer': '',  # node_layer=string
        'cats': '',  # cats=range
        'where': '',  # where=sql_query
        'arc_column': '',  # arc_column=name
        'arc_backward_column': '',  # arc_backward_column=name
        'node_column': '',  # node_column=string
    }

    # Run the processing algorithm
    result = processing.run('grass7:v.net.allpairs', parameters)

    # Load the resultant layer
    output_layer = QgsVectorLayer(result['output'], \"Output Layer\", \"ogr\")
    QgsProject.instance().addMapLayer(output_layer)

# Specify paths
input_path = 'path/to/input_layer.shp'
output_path = 'path/to/output_layer.shp'

# Execute the function
run_v_net_allpairs(input_path, output_path)"""