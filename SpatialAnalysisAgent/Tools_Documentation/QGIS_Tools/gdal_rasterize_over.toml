tool_ID = "gdal:rasterize_over"
tool_name = "Rasterize (overwrite with attribute)"
brief_description = "Overwrites a raster layer with values from a vector layer. New values are assigned based on the attribute value of the overlapping vector feature."
full_description = """Overwrites a raster layer with values from a vector layer. New values are assigned based on the attribute value of the overlapping vector feature.
This algorithm is derived from the GDAL rasterize utility ."""
parameters = """
INPUT: Input layer. Input vector layer. Type: [vector: any] 
INPUT_RASTER: Input raster layer. Input raster layer. Type: [raster] 
FIELD: Field to use for a burn-in value Optional. Defines the attribute field to use to set the pixels values. Type: [tablefield: numeric] 
ADD: Add burn in values to existing raster values. If False, pixels are assigned the selected field’s value.If True, the selected field’s value is added to the valueof the input raster layer.. Type: [boolean] Default: False 
EXTRA: Additional command-line parameters Optional. Add extra GDAL command line options. Type: [string] Default: ‘’ outputs = 
OUTPUT: Rasterized. The overwritten input raster layer. Type: [raster]
"""
code_example = """
import processing

def rasterize_over():
    input_vector_path = 'D:/input_vector.shp'
    input_raster_path = 'D:/input_raster.tif'
    output_path = 'D:/output_raster.tif'
    
    parameters = {
        'INPUT': input_vector_path,  # Input vector layer
        'INPUT_RASTER': input_raster_path,  # Input raster layer
        'FIELD': '',  # Field to use for a burn-in value Optional, leave empty
        'ADD': False,  # Add burn in values to existing raster values. Options: [True, False]
        'EXTRA': '',  # Additional command-line parameters Optional, leave empty
        'OUTPUT': output_path
    }
    
    result = processing.run(\"""gdal:rasterize_over\", parameters)

rasterize_over()"""