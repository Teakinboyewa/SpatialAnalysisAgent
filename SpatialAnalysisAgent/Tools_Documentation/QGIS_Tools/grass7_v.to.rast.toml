tool_ID = "grass7_v.to.rast"
tool_name = "v.to.rast"
brief_description = "Converts (rasterize) a vector map into a raster map."
synopsis = """v.to.rast
v.to.rast --help
v.to.rast[-d]input=name[layer=string]   [type=string[,string,...]]   [cats=range]   [where=sql_query]output=nameuse=string[attribute_column=name]   [rgb_column=name]   [label_column=name]   [value=float]   [memory=memory in MB]   [--overwrite]  [--help]  [--verbose]  [--quiet]  [--ui]"""
parameters = """input=name[required]
    Name of input vector map
    Or data source for direct OGR access
layer=string
    Layer number or name
    Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
    Default:1
type=string[,string,...]
    Input feature type
    Options:point, line, boundary, centroid, area
    Default:point,line,area
cats=range
    Category values
    Example: 1,3,7-9,13
where=sql_query
    WHERE conditions of SQL statement without 'where' keyword
    Example: income < 1000 and population >= 10000
output=name[required]
    Name for output raster map
use=string[required]
    Source of raster values
    Options:attr, cat, value, z, dir
    attr: read values from attribute table
    cat: use category values
    value: use value specified by value option
    z: use z coordinate (points or contours only)
    dir: line direction in degrees CCW from east (lines only)
attribute_column=name
    Name of column for 'attr' parameter (data type must be numeric)
rgb_column=name
    Name of color definition column (with RRR:GGG:BBB entries)
label_column=name
    Name of column used as raster category labels
value=float
    Raster value (for use=value)
    Default:1
memory=memory in MB
    Maximum memory to be used (in MB)
    Cache size for raster rows
    Default:300"""
flags = """-d
    Create densified lines (default: thin lines)
    All cells touched by the line will be set, not only those on the render path
--overwrite
    Allow output files to overwrite existing files
--help
    Print usage summary
--verbose
    Verbose module output
--quiet
    Quiet module output
--ui
    Force launching GUI dialog"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def vector_to_raster():
    # Define the input and output paths
    input_path = 'D:/input_vector.shp'
    output_path = 'C:/Users/Output/raster_output.tif'
    
    # Load the input vector layer
    input_layer = QgsVectorLayer(input_path, \"""Input Vector\", \"ogr\")
    
    # Set the parameters for the vector to raster conversion
    parameters = {
        'input': input_path,  # Name of input vector map or data source for direct OGR access
        'layer': '1', # Layer number or name; default is 1
        'type': 'point,line,area', # Input feature type; options: point, line, boundary, centroid, area (default: point,line,area)
        'cats': '',  # Category values; Example: 1,3,7-9,13
        'where': '',  # WHERE conditions of SQL statement without 'where' keyword; Example: income < 1000 and population >= 10000
        'output': output_path,  # Name for output raster map
        'use': 'cat', # Source of raster values; options: attr, cat, value, z, dir
        'attribute_column': '',  # Name of column for 'attr' parameter (data type must be numeric)
        'rgb_column': '',  # Name of color definition column (with RRR:GGG:BBB entries)
        'label_column': '',  # Name of column used as raster category labels
        'value': 1,  # Raster value (for use=value); default is 1
        'memory': 300,  # Maximum memory to be used (in MB); default is 300
    }
    # Run the processing algorithm
    result = processing.run(\"grass7_v.to.rast\", parameters)
    
    # Load the resulting raster layer
    raster_layer = QgsVectorLayer(result['output'], 'Raster_output', 'gdal')
    QgsProject.instance().addMapLayer(raster_layer)

# Execute the function
vector_to_raster()"""