
tool_ID = 'native:joinbylocationsummary'

tool_name = 'Join attributes by location'

brief_description = '''
Join attributes from one vector layer to another by location. This algorithm takes an input vector layer and creates a new vector layer that is an extended version of the input one, with additional attributes in its attribute table. The additional attributes and their values are taken from a second vector layer. A spatial criteria is applied to select the values from the second layer that are added to each feature from the first layer in the resulting one.
'''

parameters ='''
INPUT:
PREDICATE:
JOIN
JOIN_FIELDS:
SUMMARIES: One or more of 0 — count; 1 — unique; 2 — min; 3 — max; 4 — range; 5 — sum; 6 — mean; 7 — median; 8 — stddev; 9 — minority; 10 — majority; 11 — q1; 12 — q3; 13 — iqr; 14 — empty; 15 — filled; 16 — min_length; 17 — max_length; 18 — mean_length
DISCARD_NONMATCHING:
PREFIX:
OUTPUT: Specify the output (buffer) layer. One of: Create Temporary Layer (TEMPORARY_OUTPUT); Save to File…; Save to Geopackage…; Save to Database Table…; Append to Layer…
'''

code_example = '''
import processing
from qgis.core import QgsProject,QgsVectorLayer
def joinbylocationsummary():
    output_path = 'D:/Output_path/Output_layer.shp'

    # Define the parameters Example below:
    parameters = {
        'INPUT':'D:/SpatialAnalysisAgent/Data/flooddata.shp',
        'PREDICATE':[5], #Available values - 0: intersect, 1: contain, 2: equal, 3: touch, 4: overlap, 5: are within, 6: cross
        'JOIN':'D:/SpatialAnalysisAgent/Data/roads.shp',
        'JOIN_FIELDS':[],
        'SUMMARIES':0, #One or more of 0 — count; 1 — unique; 2 — min; 3 — max; 4 — range; 5 — sum; 6 — mean; 7 — median; 8 — stddev; 9 — minority; 10 — majority; 11 — q1; 12 — q3; 13 — iqr; 14 — empty; 15 — filled; 16 — min_length; 17 — max_length; 18 — mean_length
        'DISCARD_NONMATCHING':True,
        'OUTPUT': output_path
        }
    # Perform the join by location summary
    result = processing.run("native:joinbylocationsummary", parameters)
    # Load the selected features as a new layer
    output_layer = QgsVectorLayer(result['OUTPUT'], 'Joined attributes, 'ogr')
    QgsProject.instance().addMapLayer(output_layer)
joinbylocationsummary()
'''
