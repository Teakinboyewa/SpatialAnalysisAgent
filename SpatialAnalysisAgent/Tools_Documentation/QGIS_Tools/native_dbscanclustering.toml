tool_ID = "native:dbscanclustering"
tool_name = "DBSCAN clustering"
brief_description = """Clusters point features based on a 2D implementation of Density-based spatial clustering of applications with noise (DBSCAN) algorithm."""
full_description = """Clusters point features based on a 2D implementation of Density-based spatial clustering of applications with noise (DBSCAN) algorithm.
The algorithm requires two parameters, a minimum cluster size, and the maximum distance allowed between clustered points."""
parameters = """
INPUT: Input layer. Layer to analyze. Type: [vector: point] 
MIN_SIZE: Minimum cluster size. Minimum number of features to generate a cluster. Type: [number] Default: 5 
EPS: Maximum distance between clustered points. Distance beyond which two features can not belongto the same cluster (eps). Type: [number] Default: 1.0 
OUTPUT: Clusters. Specify the vector layer for the result of the clustering. One of: Create Temporary Layer ( 
TEMPORARY_OUTPUT ) Save to File… Save to Geopackage… Save to Database Table… The file encoding can also be changed here.. Type: [vector: point] Default: [Create temporary layer] 
DBSCAN*: Treat border points as noise 
(DBSCAN*) Optional. If checked, points on the border of a cluster arethemselves treated as unclustered points, and onlypoints in the interior of a cluster are tagged asclustered.. Type: [boolean] Default: False 
FIELD_NAME: Cluster field name. Name of the field where the associated cluster numbershall be stored. Type: [string] Default: 
‘CLUSTER_ID’ 
SIZE_FIELD_NAME: Cluster size field name. Name of the field with the count of features in the same cluster. Type: [string] Default: 
‘CLUSTER_SIZE’ outputs = 
OUTPUT: Clusters. Vector layer containing the original features with afield setting the cluster they belong to. Type: [vector: point] 
NUM_CLUSTERS: Number of clusters. The number of clusters discovered. Type: [number]
"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def dbscan_clustering():
    input_path = 'D:/Data/InputLayer.shp'
    output_path = 'D:/output_path/ClusteredPoints.shp'

    input_layer = QgsVectorLayer(input_path, 'Input Layer', 'ogr')

    parameters = {
        'INPUT': input_layer,
        'MIN_SIZE': 5,
        'EPS': 1.0,
        'OUTPUT': output_path,
        'DBSCAN*': False,
        'FIELD_NAME': 'CLUSTER_ID',
        'SIZE_FIELD_NAME': 'CLUSTER_SIZE'
    }
    
    result = processing.run('native:dbscanclustering', parameters)
    
    clustered_layer = QgsVectorLayer(result['OUTPUT'], 'Clustered Points', 'ogr')
    QgsProject.instance().addMapLayer(clustered_layer)

dbscan_clustering()"""