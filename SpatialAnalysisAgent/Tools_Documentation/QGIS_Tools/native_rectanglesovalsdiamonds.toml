tool_ID = "native:rectanglesovalsdiamonds"
tool_name = "Rectangles, ovals, diamonds"
brief_description = """Creates a buffer area with a rectangle, oval or diamond shape for each feature of the input point layer."""
full_description = """Creates a buffer area with a rectangle, oval or diamond shape for each feature of the input point layer.
The shape parameters can be fixed for all features or dynamic using a field or an expression."""
parameters = """
INPUT: Input layer. Input point vector layer. Type: [vector: point] 
SHAPE: Buffer shape. The shape to use. One of: 0 — Rectangles 1 — Ovals 2 — Diamonds. Type: [enumeration] 
WIDTH: Width. Width of the buffer shape. Type: [number ] Default: 1.0 
HEIGHT: Height. Height of the buffer shape. Type: [number ] Default: 1.0 
ROTATION: Rotation Optional. Rotation of the buffer shape. Type: [number ] Default: None 
SEGMENTS: Number of segments. Number of segments for a full circle ( Ovals shape). Type: [number] Default: 36 
OUTPUT: Output. Specify the output vector layer. One of: Create Temporary Layer ( 
TEMPORARY_OUTPUT ) Save to File… Save to Geopackage… Save to Database Table… Append to Layer… The file encoding can also be changed here.. Type: [vector: polygon] Default: [Create temporary layer] outputs = 
OUTPUT: Output. The output vector layer (with the buffer shapes). Type: [vector: polygon]
"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def generate_buffers():
    input_path = \"""D:/Data/PointLayer.shp\"
    output_path = \"D:/workspace_directory/output_layer.shp\"

    input_layer = QgsVectorLayer(input_path, \"Input Points\", \"ogr\")

    parameters = {
        'INPUT': input_layer,
        'SHAPE': 1,  # Options: 0 - Rectangles, 1 - Ovals, 2 - Diamonds
        'WIDTH': 2.0,
        'HEIGHT': 4.0,
        'ROTATION': 45,
        'SEGMENTS': 36,
        'OUTPUT': output_path
    }

    result = processing.run(\"native:rectanglesovalsdiamonds\", parameters)

    output_layer = QgsVectorLayer(result['OUTPUT'], 'Buffered Shapes', 'ogr')
    QgsProject.instance().addMapLayer(output_layer)

generate_buffers()"""