tool_ID = "native:rotatefeatures"
tool_name = "Rotate"
brief_description = """Rotates feature geometries by the specified angle clockwise. The rotation occurs around each feature’s centroid, or optionally around a unique preset point."""
full_description = """Rotates feature geometries by the specified angle clockwise. The rotation occurs around each feature’s centroid, or optionally around a unique preset point.
Allows features in-place modification of point, line, and polygon features"""
parameters = """
INPUT: Input layer. Input vector layer. Type: [vector: any] 
ANGLE: Rotation (degrees clockwise). Angle of the rotation in degrees. Type: [number ] Default: 0.0 
ANCHOR: Rotation anchor point (x, y) Optional. 
X,Y coordinates of the point to rotate thefeatures around.If not set the rotation occurs around eachfeature’s centroid.. Type: [point] Default: None 
OUTPUT: Rotated. Specify the output vector layer (with rotated geometries).One of: Create Temporary Layer ( 
TEMPORARY_OUTPUT ) Save to File… Save to Geopackage… Save to Database Table… Append to Layer… The file encoding can also be changed here.. Type: [same as input] Default: [Create temporary layer] outputs = 
OUTPUT: Rotated. The output vector layer with rotated geometries. Type: [same as input]
"""
code_example = """
import processing
from qgis.core import QgsVectorLayer, QgsProject

def rotate_features():
    input_path = \"""D:/Data/InputLayer.shp\"
    output_path = \"D:/workspace_directory/output_layer.shp\"

    input_layer = QgsVectorLayer(input_path, \"Input Layer\", \"ogr\")

    parameters = {
        'INPUT': input_layer,
        'ANGLE': 45.0,  # Example of rotation angle in degrees
        'ANCHOR': '120.0, 35.0',  # Example of anchor point in x,y
        'OUTPUT': output_path  # Specify the output path
    }

    result = processing.run(\"native:rotatefeatures\", parameters)

    rotated_layer = QgsVectorLayer(result['OUTPUT'], 'Rotated Layer', 'ogr')
    QgsProject.instance().addMapLayer(rotated_layer)

rotate_features()"""